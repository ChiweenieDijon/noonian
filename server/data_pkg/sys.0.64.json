{
"metadata":{
	"_id": "7R4cBwsWTSacdSk5ZrAjTw",
	"build_config": {
		"exclude": [
			"TestObject"
		]
	},
	"description": "The foundational package for Noonian.",
	"enable_building": false,
	"key": "sys",
	"major_version": 0,
	"manifest": {
		"AngularApp": {
			"HvpsexNtTOyRCzDDd4GNsg": "sys:56",
			"kRd_Ft64QFey_at4tgphXA": "sys:27"
		},
		"AngularModule": {
			"NJnfAVnFSmuMcv9voRnaJQ": "sys:8",
			"myP57XGhSNyDKrrcJFvO0Q": "sys:68"
		},
		"AngularProvider": {
			"-WzjxRZhT-CoPcBycQAiOg": "sys:11",
			"1DR9d4BTQtafOsD03s3kPg": "sys:25",
			"1KOgLhmgQj2AUKYIxflYqA": "sys:26",
			"2UpyXO5lR3qV-oce53G_7A": "sys:41",
			"3Viz_TmyQRqPGTDKMEhv2A": "sys:7",
			"3ap2IrTbTkOORGV3Ra5Fjg": "sys:20",
			"3j9njXR_Qri6Ce8kubk9nw": "sys:5",
			"5W1f4vxWTte-kQvjjgpyLA": "sys:37",
			"5dJkEI1PRmK41Hh2lw2y_w": "sys:28",
			"78XYGLNnRmC6RFphsvfNbw": "sys:3",
			"7UVBjiqKRueVphLN5EtfLg": "sys:31",
			"7jHQrtYKQxSzW_pRHAd9RA": "sys:15",
			"9en21yAeQAOdV_Uxm_C9sQ": "sys:36",
			"Gh1s8LuGThywzsMA7BIMjg": "sys:12",
			"Hd7vderbSfKfJzks0xJTQg": "sys:17",
			"I_Fy8QWkTdiSj9Bz3A-jNw": "sys:85",
			"Ik05NEwxTJitCXy7seb6rQ": "sys:1",
			"LsujDPMnQ8aJ268YxHkBPA": "sys:5",
			"MOV8fi2gT8ySGHQZ4FAT5Q": "sys:17",
			"MfFXObZ9SI2eCjqV6lKBmA": "sys:17",
			"NsTdpPyyQhWREbMKoDr5wA": "sys:12",
			"RPBp2C0yRgaHDpMhBYut_Q": "sys:5",
			"T9gLsPzJT7iKmH1uKk76BQ": "sys:7",
			"UDVo5w53QzeLoqZ6kjTatQ": "sys:1",
			"UEzEc9S3SnidfoZ6EefZqQ": "sys:5",
			"V5AIrjQIRVSPYBI5V2zs4w": "sys:26",
			"VMylLXsAQSOLI94A-RQgTA": "sys:17",
			"VwZdmM7bSeOfdacXJQNeUA": "sys:1",
			"YKldolloSTitGHf7Wz64PQ": "sys:2",
			"_28vJLv9Tt6HzXexuNITlA": "sys:12",
			"dfknFcxcQGWvTrHw0DZcIA": "sys:46",
			"eoefRk8MQQqLX-MFLYPdSQ": "sys:8",
			"ezSJbZ-NQ52ZgnKLWh1Ebw": "sys:4",
			"hCyhlFUVRg-I67dGF-RcjQ": "sys:2",
			"jXqx7LOLRl6ZoWUORs8nPA": "sys:39",
			"mZ9F54oASxS70Cwk1eodeA": "sys:3",
			"pc0Bq49iSFq_OCgsejPoWQ": "sys:5",
			"q1yaFwgcR2WQu8xUaySIlw": "sys:20",
			"qo19scAPQ1OlMmbEWlceMg": "sys:6",
			"qt1-hwnEQmum-4hvi9O-Aw": "sys:3",
			"shz0lNmSRhWP9DjcWypp7A": "sys:81",
			"u6OrdVlHSr2vYyTi3nfoqQ": "sys:1",
			"uIn4BYTnSuqQpF8sCTAiCQ": "sys:8",
			"wwX1-_BxSYWYOQdMBcUTjw": "sys:3",
			"xsxZe1yRTb6jFJtSSTF3mQ": "sys:4",
			"zLrdPMCOSMuj44EGALgmDw": "sys:8",
			"zyR-OIZhQqmy70eVOj7twg": "sys:8"
		},
		"AngularTemplate": {
			"-2Gpn4Q_QK6iFWp83138Fg": "sys:9",
			"1AvVYpoKRzaBCsiGkrDEaQ": "sys:27",
			"40032UdQRL2-Jdg-CUoIqg": "sys:7",
			"4yT9t5IzTIqSCLFnR508rw": "sys:3",
			"6OYTWbEuSxGAYApNR85rAg": "sys:5",
			"Asy2H3LZTZaS16UFz4JTdg": "sys:6",
			"DochseC4RXmnUQc1xnjZkQ": "sys:8",
			"JlYdHTiWRoGbI81O-VPkXg": "sys:7",
			"MbVLEC9ETmapSheNd_78Dg": "sys:10",
			"R8TV3oHJRZG6KU9GlhfrIQ": "sys:14",
			"XSx9nqdyQeuaytKKJmsEtw": "sys:1",
			"ZLuRTnxQRiuqsSqzmbL8Jw": "sys:10",
			"aGUQwyKpQnCfPcU_qdVV2A": "sys:1",
			"c-Sh5WEEQqW1adX257yZVQ": "sys:17",
			"hbhKtxpDQLaUvyA7hogLWw": "sys:22",
			"iMYbBIZHRvqnpf6mAmeBBw": "sys:8",
			"kX5Bln7MQ7evgGJJm9QhUw": "sys:9",
			"lRoO3i4TTsi142xvw7vnIA": "sys:17",
			"nFlRtvy8T4WjgiUECbROSw": "sys:5",
			"nWxgcco1SJWxxpgCW1TjYg": "sys:12",
			"nlXSAaacSla8tUPF9oYF7A": "sys:6",
			"qwW8v9NIReKHdrGiRZl9tg": "sys:10",
			"r4BrmS_bRVWPqcl-NAQYiQ": "sys:1",
			"rnTzkxz-SoayJMPtHFEPcA": "sys:11",
			"xQhrwwpWR-uqqlbCrQ95xw": "sys:6"
		},
		"BusinessObjectDef": {
			"0TO-sBb1TjeAAzaMgd-8KQ": "sys:3",
			"1lAUvVINQu-8xKB3H0StaA": "sys:2",
			"24FNsXFmQAaegQ77SKKC6g": "sys:1",
			"2jfKy7M9Q6-QIOGOOwrf-Q": "sys:2",
			"8q-MORjBS3qC0Dwh6dTIkw": "sys:3",
			"9lfB2NHJQdGXiCADh019SQ": "sys:1",
			"9nPBq3cpRbm5MyhyxSnZjA": "sys:1",
			"A_eCG8jqToSYTvnyiSYqRA": "sys:3",
			"CW0euwoXRG-cUFD9-9xwSg": "sys:2",
			"DJO4J7xRTvydSH_aBCtAFw": "sys:3",
			"Dyf49QfST2CwXH1TYOSgHQ": "sys:1",
			"G6NlMXjRQEeiqdsC6PP-Dw": "sys:12",
			"IG7UUXYwTv6Ffj4o489duA": "sys:3",
			"IVNeprDJTJezVTH2PnbmQA": "deleted",
			"IbTRqThxTGSys_M1KRaZoQ": "sys:2",
			"IfDt7M3yTMOt6D2BkMP66A": "sys:6",
			"IhXNqXAyQiqGk28iCotr0Q": "sys:11",
			"LHh5ZfA6Swq6cHb3CcmCgA": "sys:3",
			"QLN_PHr_Tj6nzgzrHA4XdQ": "sys:2",
			"R1r6pCVESdma9hj8GrfMaQ": "sys:2",
			"UfkDq2TKQAm4OWijwTpokQ": "sys:3",
			"ZWSBEFYOT6WlJG95iIm_rw": "sys:9",
			"_7EZRGUeRYaiyU-YSZonhQ": "sys:3",
			"_K5c8nuqSHOof2sQkwfYBQ": "sys:1",
			"_kXc9xmXRK25KE0qkjrXVg": "sys:4",
			"ddY7PaHnQsGCChSZfL12wg": "sys:2",
			"eTt1sebpTOOicLafo-B1PQ": "sys:2",
			"fz7jb19XR5K4aclPQdkjIw": "sys:1",
			"gzp1tQoUTfek9ib8xQZp7Q": "sys:1",
			"hEP551o6TQKAtYuN6l2ALw": "sys:2",
			"hlNq-6YtR_mr_AFSaLfcAw": "sys:2",
			"iAifFeKZRDCpBYTmzTNbXQ": "sys:4",
			"iKLd6IaxT5eli2yl0XpEzA": "sys:1",
			"iLfiQteMQQ-daJIeQ37y5w": "sys:1",
			"jYHdzRfHSFaD4X6ACZ-_uQ": "sys:6",
			"oThGB1UxRGiPK6tzu4PUXQ": "sys:3",
			"pQIx0YDZQJSLi1cNHxwKlA": "sys:3",
			"pzaSsQYLT7uvOx6Trp1wMw": "sys:2",
			"qZR4N3BFQGuMzjcj17jitg": "sys:4",
			"rVjuQcaKTzi2KV5qbWdP3Q": "sys:1",
			"uEaZJyjDQXWMs-vNQrjiyQ": "sys:4",
			"w1FEKYa4SbiVPVqAtEWJyw": "sys:3"
		},
		"CodeModule": {
			"9f_aeR8HQE-HqePHGgquNg": "sys:14",
			"iV-ugHjjQo29KbS3E0UxQg": "sys:17",
			"pwMVRvdjSU-2Ak0BWDA6AA": "sys:5"
		},
		"Config": {
			"-H2Rcmo1Sriv9cRoQiYxGQ": "deleted",
			"076TmOduSve4_ZvYrqSLig": "sys:5",
			"0KZWeNuMSJyW7QImA9AndA": "sys:1",
			"0tydbMgIRdudkdXTyXt7qA": "sys:2",
			"1Ot34-g6Q12L6OoxKi401A": "sys:3",
			"1nme6hlATsews3AMdvHyaA": "sys:3",
			"2kCebqAhSq23kIfWjZ7H5Q": "sys:1",
			"447ODSNfR4S1BcDTKHehoA": "sys:1",
			"4oreVV9bQE6POFFq8ruL1Q": "sys:2",
			"5wAcBhU-QWqnwR0HoTd5uw": "sys:1",
			"6VBJYXFFQyq9ODPG8dZMSg": "sys:1",
			"6eMazeR1Q_yJMeYWnj0VhQ": "sys:3",
			"6zyebkpAS_m3IGJNU3-txQ": "sys:2",
			"7yVPwbASRIuobIrUyzuFLQ": "sys:1",
			"8hfoCeuHQbaV11P33vcTTw": "sys:5",
			"9TAnJ5tyQ7GxTX0sv3nXtw": "sys:1",
			"BVZPlBKCSVaoqTN8h3lvTA": "sys:3",
			"BfVWyf-jTjaOPaH3AZYgig": "sys:5",
			"CMHfC8YPTO6sEeNhLZmTVA": "sys:2",
			"CVk1ivsMS0qS1kCvrEk0dg": "sys:3",
			"Cu-EL7B2SZyDpkAj_QzZIg": "sys:6",
			"CzEs6oTgTrKrikVdgl4I2g": "sys:1",
			"DRm8hzYDQLiIv1iOV_bJig": "sys:1",
			"EYjxKQGORteqG0d9VRTxZA": "sys:3",
			"EvzkCjcMT5eBgEiPDWaObA": "sys:1",
			"F4LgLaVTSKKPaDJuVk06zA": "sys:3",
			"F51v_xUnQgehAn3ZVR8vgA": "sys:9",
			"GDzTJ1SERbyhOIKYYkNkNA": "sys:5",
			"GRaSJrg4QKWVnP6Dwda0vA": "sys:7",
			"Hj3COO0iQyufTftJqfUt_Q": "sys:4",
			"HjJ3QzvGSda4mliXCksO_A": "sys:1",
			"I5AizP_DTgqHdp3MFvdsrw": "sys:3",
			"I_f0Ld-gSp2MtcPoVF9YaQ": "sys:8",
			"J9SNvBpBQAGYMkbPYRYPrA": "sys:1",
			"Kohb_6sxTGC1eGdeRsCtMw": "sys:3",
			"KpTzs_FUS9ylachpjVI_XA": "sys:3",
			"LO0K56w7R4GWv3LZ7-tGJg": "sys:1",
			"Oq6WcNJFSomqJf7Q3R_tyA": "sys:2",
			"OuZlkU4RRte4PhEc1osj-w": "sys:5",
			"P2a0BxxZS-OTiottP1JsMw": "sys:5",
			"PbIVRpHHQ2Wtd3-bT_NeYg": "sys:1",
			"QwJDuVeNSC-52XC8Iekbmw": "sys:2",
			"Sxds6jgoSeKcDIXuLM6ggg": "sys:25",
			"TceD89EZTVa-uQncdIxkbA": "sys:1",
			"Wno7cIleSF6nmkMi4vu_jA": "sys:2",
			"Xhs0pIeIQ-WP_jsX6j9Mag": "sys:6",
			"XlkTgxHAQRSiic10iuV_Ig": "sys:1",
			"Y-hXaNJuSNm5F-SS5dTZsQ": "sys:1",
			"Y3qe_-s7QnKy0jB-nMI5xw": "sys:15",
			"YH7PZXVaTAmHMb-cJlkeoA": "sys:1",
			"YN49yI-cQO-YJGTtKaav8Q": "sys:1",
			"ZIyLu8ZCQV2K6GS2XqqbEA": "sys:4",
			"ZcYFrLsyQpSLpykRLi-nEA": "sys:1",
			"b3-wP1RKQAm56z4xRENVlg": "sys:1",
			"cSzNMWAYT2Whr1OqDdHGyg": "sys:2",
			"cqb0vgELTiyDb6zfI6Tavg": "sys:6",
			"dWglHelJQqe4iyrOHCd8BA": "sys:1",
			"dkwBaED1TUSMvFlVkNOwKw": "sys:1",
			"eSAFk0BgQ7iKh-q9q02ZUw": "sys:2",
			"g7Eq-Ra_Qc2oJFqjM8AoBQ": "sys:1",
			"hIGoBem9TQinCMTZh-tCTQ": "sys:3",
			"hJiZxpRJRp-7ihmjq5qpMQ": "sys:4",
			"if2R-LabRcyDzpX_5X_ucQ": "sys:2",
			"jSJbDp6BReSLHQW54XyBvQ": "sys:1",
			"knpIXitAQh2Mf2d6ctQOow": "sys:3",
			"kvJ1SBi-QeqtaeRTwRO5Rg": "sys:3",
			"m7poGk4CSBKCO1X_X29-Vw": "sys:4",
			"mS7U_n_RRl-PY3SO_6tr2Q": "sys:4",
			"mXLpqs_6RYO6jfseoLep_g": "sys:5",
			"o7ujH63ISeu4gR7Bjrrrgw": "sys:1",
			"oot_vdKQTJqqhk2oqw97-g": "sys:1",
			"qqVlSIILTbiGNUzOtHQqcg": "sys:2",
			"sQDsv1FXThuAxLRiAKJQIA": "sys:8",
			"s_sYihekR-CwwhMvagVpRQ": "sys:6",
			"spHxGeTiRsGzocGsaIIEMg": "sys:2",
			"uPQXlOglR9yDx4p_ZEmV3g": "sys:2",
			"vDdUnL3nQ6a1e9nTNiqLog": "sys:1",
			"w2U0lB56Sq2Mb-6r3WDBsw": "sys:13",
			"x6rl0g-sRW2tse13At0wmg": "sys:6",
			"xcvMD6R0TmO0rycK3Vd1rA": "sys:2",
			"xmAXxOxKReCjsdFT3pu59w": "sys:2",
			"yfTTwRezQFKAnbUGICed4w": "sys:4",
			"yjoQfy6JT9OfNzPFSEHqEQ": "sys:3",
			"zk3SuXVIRi6GMnCej9_nUQ": "sys:5",
			"zqq006kzRgiWjMdclIEQ7Q": "sys:3"
		},
		"CssResource": {
			"5Aeg3b-LRlaZ75IcNGqD3w": "deleted",
			"mF2-m7xwSv-GOiV7I-YPNg": "sys:25",
			"o4W541R8SOaAsLdTAFRwBw": "sys:4",
			"rTEg0q5bQbiYsTXNOFCBvQ": "sys:3"
		},
		"DataExport": {
			"Vs_E0HrSSk6_aNtNUvexaw": "sys:1"
		},
		"DataTrigger": {
			"-aT_dJmKS5uF3MP_nVLLIg": "sys:2",
			"IPWKy2naTimBBtj-HykGvA": "sys:1",
			"LomdQQiYRR-FjCWfD4DNzg": "sys:2",
			"P7GzOrKTQAKP0UY8s8e5xA": "sys:5",
			"TIi-Pfd1Sai81ENuQKBjvA": "sys:2"
		},
		"DbuiCustomPage": {
			"2fHM4oJ_TUKJth8FgnTr0g": "sys:5",
			"g8O7qmAZQ-Khw4FHXQdlfg": "sys:1",
			"wGwX2SpXRjWE7iLAAQkROQ": "sys:5"
		},
		"DocTemplate": {
			"4ErFTHwWQS2ptwkBB1UZWg": "sys:1"
		},
		"Enumeration": {
			"aGtg2ZyaRACD6m0S-ulCog": "sys:1",
			"ziaKbpUeTYC8t691DU1tug": "sys:1"
		},
		"FieldType": {
			"2RQWYKymQMmfYqEGxXVtoA": "sys:1",
			"9_TB_-ppQnCpm3EKkO8naw": "sys:2",
			"DDssakmDQoeACryXT377xw": "sys:2",
			"EaQUGA7oS7qKanG4QbvYbQ": "sys:4",
			"EqIuGj81QTyVDFA7qRQNHg": "sys:2",
			"JMHHYAPlSgKuC5alDvehWA": "sys:1",
			"L0RpjYeuS-uVqxj00KzEZg": "sys:2",
			"PkJTkOpsStGYcReZiDoEnQ": "sys:1",
			"Qywi2S8xT86_tQl4leIXNA": "sys:2",
			"S8eHnlXxQJqIPLM2q8HniQ": "sys:2",
			"SRrCNHZCTvW6sTMtR3a0iQ": "sys:1",
			"WiUvP7txRQiF6tPM9FpFIw": "sys:4",
			"ZD_vX9d-RLqxGTOdZntz6Q": "sys:1",
			"aeOhqBixSbigoy3yBkyScQ": "sys:2",
			"bHeoPzsMScORdzjtX6GdoA": "sys:2",
			"cKFhGuY3SZ6_2YWKwkpqCA": "sys:3",
			"e-rYyVWHQoKi1om5SUBMcA": "sys:2",
			"ePi7MsceQMqn3qnVBlHkNA": "sys:5",
			"gxJBuQp7RkKLIV0cazfFnA": "sys:1",
			"jOZVJVLOTmGK6Ppf7JNnCw": "sys:1",
			"lpmwbanlQH20mCWioX0H1g": "sys:3",
			"nplFum9LRdWvt5TW1LyulQ": "sys:8",
			"uMEzxXwVSgmj_dbfeY-fLA": "sys:5",
			"uavtEE5AT2q5WcEcsWYTpw": "sys:3",
			"vOaH1F-HRhefePjYFAGCBA": "sys:1",
			"vxlB7gSPTWqq98tG5lCcPQ": "sys:2",
			"z_2NESmpQ-29ACeUMhflNQ": "sys:3"
		},
		"FieldTypeUiSpec": {
			"0EOzSaCaS2OrxRIr2WfbXA": "sys:3",
			"1-8wwUmiSpSdYgICK078Vw": "sys:1",
			"2HV6rNCrSySh_05yfcg50w": "sys:4",
			"3G2t7niJSRmrRluTIU9cSg": "sys:8",
			"3puRzrB0QWKw9aKe7RVZ9g": "sys:10",
			"3y_egv2CQ1aiRhukfvJIRg": "sys:4",
			"7SaoAuyKRd6WbIu1ANryEw": "sys:1",
			"9uHrzJ-IQPqu-IK3bywR3A": "sys:19",
			"BvydEKALTzK9ALeB_zibrg": "sys:5",
			"DG2H5d3ARH23lwhvepe0QQ": "sys:18",
			"EI-Y7M75RauzkC2TI-IuQw": "sys:6",
			"EUIsdoYuRRy1Wz6mtiH8Wg": "sys:2",
			"ElEWFvl1T-u5DaRVdBhxCA": "sys:7",
			"FKpvB_JNSoOF2tVEuXEkIQ": "sys:2",
			"HYHluWpfQxqDTEhWxSIWkA": "sys:10",
			"JUG__Q2uSEaMeHlf4NXebQ": "sys:36",
			"L3YQRK0mSJGE1EK4_FDCCg": "sys:2",
			"LT7gGfGtSX6ruO8MqG-C0w": "sys:2",
			"NpOPK9reRguXCb0M8WqvIA": "sys:8",
			"QYBXXHdmQzuWMhjDeBgVLA": "sys:1",
			"QyMv30pcQse-jnzkfWucLg": "sys:15",
			"SkSJmUFsQ2O7xgNpyQf5Vg": "sys:4",
			"T7NihP3ySOSCy3Z-DKrweA": "sys:7",
			"WGbVcsKwRWe3KL1p8OqS9A": "sys:10",
			"XBBQrHkGT_K4MPJTItuYcQ": "sys:10",
			"Y3uU16OvRQGDqyKMxt8RNA": "sys:5",
			"Z758y2u8Tb6kTGT17ngymQ": "sys:4",
			"Za2of_r5Qk2Uo5jkZOvgMg": "sys:4",
			"_nWPVWaMRlezcACfs6ZLHw": "sys:9",
			"chdRzdWGRbWw-4eOY2bnWA": "sys:4",
			"e9vFlgCpSPaPzAGGPNA9Ug": "sys:3",
			"ey4E7-xHTFekIa4P4aeqtA": "sys:2",
			"ghqIrx4MT3qrnJwpZ5cHsA": "sys:3",
			"giVO3IurRbqdZ3WnhgHPHA": "sys:6",
			"iLXjm75iRgGisekV6pczvg": "sys:29",
			"k46CuIUYRU2t6MV-r3PrXQ": "sys:5",
			"lnxD7faIRSm03jtJItuU8w": "sys:1",
			"mOJCSStLQ42WAXr3yJEMJA": "sys:2",
			"nGNxfDMsRACXhSG0G_509Q": "sys:3",
			"nRL5-PUBSTCrnHeAH6ZiPw": "sys:3",
			"nzwhA-zvRsS0i_cousGbiQ": "sys:22",
			"plX-2sUOSiW3dlXKZKLTQw": "sys:2",
			"rYbkzgFbRE6ba2QK6FbaNg": "sys:14",
			"s8cKD6C4SYmGKhog3B4zhg": "sys:7",
			"tfbLyH5LTdej83BgiANlHQ": "sys:1",
			"vZafim91SDeMAEcOVdBS3g": "sys:8",
			"v_YymGX0TNCkdQtOuHgPDA": "sys:6",
			"yOXK_1eERwCC7K4QGkFciA": "sys:2",
			"yzItsBrUQr-SZfH53sXVVQ": "sys:2"
		},
		"JsResource": {
			"2TDnTPuBRLCu1-DgDQdmKA": "sys:4",
			"GABEyCzfTNSuQeo0b1H6TA": "sys:4",
			"GUOAqvm-T0K8quHjSH-P8w": "sys:5",
			"QJ9VrGUoQya0fyEGoww65A": "sys:6",
			"WGmUTuiGS5KfXGYV_sUHeQ": "sys:3",
			"YHk7GG6fQIKjEFXm7zTmFg": "sys:4",
			"cevOr03VSL6fKgpPRnXYVQ": "sys:1",
			"mmYBlEfVRi2WM5nGcfm0VA": "sys:4",
			"obYp82hZTaWS6ABYtZ2eJA": "sys:4",
			"omuJBnPOSYC6z4RH26g_xA": "sys:1"
		},
		"LabelGroup": {
			"0-2MLJNsRcqzvkDmagrWNg": "sys:1",
			"0-3ITOp9SGa71bHTqox3Dw": "sys:2",
			"1goV4lEVQ6CWVJzvTAPYOg": "sys:2",
			"2Zquz6iMQLS7V_ZyZWBR4Q": "sys:2",
			"2_amBJywS--YleeMplRr9w": "sys:2",
			"3pQa7G08RPCvbNj-3SXnGw": "sys:1",
			"5BKy2VxhTRqkuRDx74Byzg": "sys:3",
			"7NOuKKSLSxytgyMyw3mm2w": "sys:2",
			"7cawn4f9SneVXCAMIViLmQ": "sys:3",
			"8DShs7YTQf26hn73nut7Xg": "sys:2",
			"8X3sML8-SS6icy3ql5brQg": "sys:1",
			"8ztMXn4uQ-CZFu8GyFEVhg": "sys:1",
			"CoWMlx_mQjCR23MRd_OMNA": "sys:3",
			"E-a8Xpq1Tja5pjgokvJu1A": "sys:1",
			"EWIt-os4Q4Cez3WAYSicBg": "sys:1",
			"LKubEUuoQtOlBpvsmH6opg": "sys:1",
			"NhgQZhe2SlSXrY8IJlW0-g": "sys:2",
			"Q8e8BUTARj6S6PCQs827wg": "sys:7",
			"QGiwBe2MRDGQaJczxQJhcw": "sys:4",
			"SpMuRxTkTjaqIcALF8Kj8Q": "sys:1",
			"TS9SHirsQXKol9WBYFN-ZA": "sys:1",
			"U4yGzcuDQh2rjSA7O3s7Tw": "sys:1",
			"V_SaiCYWR5yl9o006_soMA": "sys:1",
			"Y-CAFkrLQDaUXl3yZAUpyw": "sys:2",
			"_DrkA3czQUup-f2KiH-fCw": "sys:1",
			"_QrXcqXVTjqddtOxKYlG9g": "sys:1",
			"_Tbit9I7QJ-Qv4c6PI25Sg": "sys:5",
			"_qEUjNuUQEiXNCKHLEQIeg": "sys:2",
			"a5b6nZpERjiEGIJyV0DugA": "sys:3",
			"aaEiS8DwTTSNsh-FRqlOuQ": "sys:1",
			"adqo1DHgT7Wc68njA7Eykg": "sys:1",
			"cT9jjW3gTUe-gLlyRxID2w": "sys:1",
			"djHBYpkcRWuo5vHgCSsvqw": "sys:1",
			"e-ykFDhbSWOeb7oxA8E_iQ": "sys:1",
			"f5jWkW__R7GMilAtgyOsjA": "sys:1",
			"fVVSdgdOSgGPZjlhkT8ZGA": "sys:1",
			"fphmOTaoTjeuZwiJ3A_eeA": "sys:1",
			"ioOrOL6zRmKDinIvZqAeFA": "sys:1",
			"jUvRflD4R5G5nrgacVEZqw": "sys:1",
			"l007C5XJRNyhqfXK-65DFw": "sys:1",
			"m4wYLW6UQeW429OeHQAQfw": "sys:5",
			"mttLJj-BSYS3LobLEoa1bA": "sys:1",
			"oyTJzYryQ0CN4fhqSE8-Qg": "sys:2",
			"pq7sOK1ATRONqjsKnQ-e_A": "sys:3",
			"q8GFjcCzSKm-Jj30-dNzpQ": "sys:1",
			"qQZPxlHNTZ29ZamXeIWkAw": "sys:3",
			"rXLbwEJ_RrCjtdHyfECIIw": "sys:1",
			"tiV9QuZdQSCc-CtS8-xJGA": "sys:1",
			"uxOzgKeRRKCguGbhyQtD3g": "sys:1",
			"vQFHWhwZS1-l3PBxxzcBsg": "sys:2",
			"w3FIbwfYQoKk_QISUEDdKw": "sys:2",
			"wZwh09FtR9KG0Yfagncppw": "sys:2",
			"xJDHd2XfT_uz1TXZ8HZQ0A": "sys:3",
			"yOHJcevIQVKQuzvD4LC_SQ": "sys:1"
		},
		"Language": {
			"-9v21P2lEeSFtiimx_V4dw": "sys:1",
			"-9v2mP2lEeSFtiimx_V4dw": "sys:1",
			"-9vFOP2lEeSFtiimx_V4dw": "sys:2",
			"-9vG-v2lEeSFtiimx_V4dw": "sys:1",
			"-9vGKP2lEeSFtiimx_V4dw": "sys:1",
			"-9vGgv2lEeSFtiimx_V4dw": "sys:1",
			"-9vGvv2lEeSFtiimx_V4dw": "sys:1",
			"-9vHQP2lEeSFtiimx_V4dw": "sys:1",
			"-9vHhv2lEeSFtiimx_V4dw": "sys:1",
			"-9vHwv2lEeSFtiimx_V4dw": "sys:1",
			"-9vI7v2lEeSFtiimx_V4dw": "sys:1",
			"-9vICP2lEeSFtiimx_V4dw": "sys:1",
			"-9vIRP2lEeSFtiimx_V4dw": "sys:1",
			"-9vIgP2lEeSFtiimx_V4dw": "sys:1",
			"-9vIsv2lEeSFtiimx_V4dw": "sys:1",
			"-9vJ1P2lEeSFtiimx_V4dw": "sys:1",
			"-9vJKv2lEeSFtiimx_V4dw": "sys:1",
			"-9vJZv2lEeSFtiimx_V4dw": "sys:1",
			"-9vJov2lEeSFtiimx_V4dw": "sys:1",
			"-9vKEP2lEeSFtiimx_V4dw": "sys:1",
			"-9vKVv2lEeSFtiimx_V4dw": "sys:1",
			"-9vKkv2lEeSFtiimx_V4dw": "sys:1",
			"-9vKxP2lEeSFtiimx_V4dw": "sys:1",
			"-9vL5v2lEeSFtiimx_V4dw": "sys:1",
			"-9vLAP2lEeSFtiimx_V4dw": "sys:1",
			"-9vLPP2lEeSFtiimx_V4dw": "sys:1",
			"-9vLbv2lEeSFtiimx_V4dw": "sys:1",
			"-9vLqv2lEeSFtiimx_V4dw": "sys:1",
			"-9vMIv2lEeSFtiimx_V4dw": "sys:1",
			"-9vMVP2lEeSFtiimx_V4dw": "sys:1",
			"-9vM_v2lEeSFtiimx_V4dw": "sys:1",
			"-9vMkP2lEeSFtiimx_V4dw": "sys:1",
			"-9vMzP2lEeSFtiimx_V4dw": "sys:1",
			"-9vN5P2lEeSFtiimx_V4dw": "sys:1",
			"-9vNOv2lEeSFtiimx_V4dw": "sys:1",
			"-9vNdv2lEeSFtiimx_V4dw": "sys:1",
			"-9vNqP2lEeSFtiimx_V4dw": "sys:1",
			"-9vO1P2lEeSFtiimx_V4dw": "sys:1",
			"-9vOIP2lEeSFtiimx_V4dw": "sys:1",
			"-9vOXP2lEeSFtiimx_V4dw": "sys:1",
			"-9vOjv2lEeSFtiimx_V4dw": "sys:1",
			"-9vP7P2lEeSFtiimx_V4dw": "sys:1",
			"-9vPBv2lEeSFtiimx_V4dw": "sys:1",
			"-9vPQv2lEeSFtiimx_V4dw": "sys:1",
			"-9vPfv2lEeSFtiimx_V4dw": "sys:1",
			"-9vPsP2lEeSFtiimx_V4dw": "sys:1",
			"-9vQ0v2lEeSFtiimx_V4dw": "sys:1",
			"-9vQKP2lEeSFtiimx_V4dw": "sys:1",
			"-9vQZP2lEeSFtiimx_V4dw": "sys:1",
			"-9vQoP2lEeSFtiimx_V4dw": "sys:1",
			"-9vR9P2lEeSFtiimx_V4dw": "sys:1",
			"-9vRDv2lEeSFtiimx_V4dw": "sys:1",
			"-9vRSv2lEeSFtiimx_V4dw": "sys:1",
			"-9vRhv2lEeSFtiimx_V4dw": "sys:1",
			"-9vRuP2lEeSFtiimx_V4dw": "sys:1",
			"-9vS2v2lEeSFtiimx_V4dw": "sys:1",
			"-9vSMP2lEeSFtiimx_V4dw": "sys:1",
			"-9vSbP2lEeSFtiimx_V4dw": "sys:1",
			"-9vSqP2lEeSFtiimx_V4dw": "sys:1",
			"-9vTFv2lEeSFtiimx_V4dw": "sys:1",
			"-9vTUv2lEeSFtiimx_V4dw": "sys:1",
			"-9vT_P2lEeSFtiimx_V4dw": "sys:1",
			"-9vThP2lEeSFtiimx_V4dw": "sys:1",
			"-9vTwP2lEeSFtiimx_V4dw": "sys:1",
			"-9vU2P2lEeSFtiimx_V4dw": "sys:1",
			"-9vULv2lEeSFtiimx_V4dw": "sys:1",
			"-9vUav2lEeSFtiimx_V4dw": "sys:1",
			"-9vUpv2lEeSFtiimx_V4dw": "sys:1",
			"-9vV0v2lEeSFtiimx_V4dw": "sys:1",
			"-9vVHv2lEeSFtiimx_V4dw": "sys:1",
			"-9vVWv2lEeSFtiimx_V4dw": "sys:1",
			"-9vVlv2lEeSFtiimx_V4dw": "sys:1",
			"-9vW9P2lEeSFtiimx_V4dw": "sys:1",
			"-9vWDv2lEeSFtiimx_V4dw": "sys:1",
			"-9vWSv2lEeSFtiimx_V4dw": "sys:1",
			"-9vWfP2lEeSFtiimx_V4dw": "sys:1",
			"-9vWuP2lEeSFtiimx_V4dw": "sys:1",
			"-9vX5P2lEeSFtiimx_V4dw": "sys:1",
			"-9vXMP2lEeSFtiimx_V4dw": "sys:1",
			"-9vXbP2lEeSFtiimx_V4dw": "sys:1",
			"-9vXqP2lEeSFtiimx_V4dw": "sys:1",
			"-9vYFv2lEeSFtiimx_V4dw": "sys:1",
			"-9vYUv2lEeSFtiimx_V4dw": "sys:1",
			"-9vY_P2lEeSFtiimx_V4dw": "sys:1",
			"-9vYjv2lEeSFtiimx_V4dw": "sys:1",
			"-9vYwP2lEeSFtiimx_V4dw": "sys:1",
			"-9vZ4v2lEeSFtiimx_V4dw": "sys:1",
			"-9vZOP2lEeSFtiimx_V4dw": "sys:1",
			"-9vZdP2lEeSFtiimx_V4dw": "sys:1",
			"-9vZsP2lEeSFtiimx_V4dw": "sys:1",
			"-9vaHv2lEeSFtiimx_V4dw": "sys:1",
			"-9vaWv2lEeSFtiimx_V4dw": "sys:1",
			"-9valv2lEeSFtiimx_V4dw": "sys:1",
			"-9vayP2lEeSFtiimx_V4dw": "sys:1",
			"-9vbBP2lEeSFtiimx_V4dw": "sys:1",
			"-9vbQP2lEeSFtiimx_V4dw": "sys:1",
			"-9vbfP2lEeSFtiimx_V4dw": "sys:1",
			"-9vd_P2lEeSFtiimx_V4dw": "sys:1",
			"-9vdwP2lEeSFtiimx_V4dw": "sys:1",
			"-9ve4v2lEeSFtiimx_V4dw": "sys:1",
			"-9veOP2lEeSFtiimx_V4dw": "sys:1",
			"-9vedP2lEeSFtiimx_V4dw": "sys:1",
			"-9vesP2lEeSFtiimx_V4dw": "sys:1",
			"-9vf0v2lEeSFtiimx_V4dw": "sys:1",
			"-9vfHv2lEeSFtiimx_V4dw": "sys:1",
			"-9vfWv2lEeSFtiimx_V4dw": "sys:1",
			"-9vflv2lEeSFtiimx_V4dw": "sys:1",
			"-9vg9P2lEeSFtiimx_V4dw": "sys:1",
			"-9vgBP2lEeSFtiimx_V4dw": "sys:1",
			"-9vgQP2lEeSFtiimx_V4dw": "sys:1",
			"-9vgfP2lEeSFtiimx_V4dw": "sys:1",
			"-9vguP2lEeSFtiimx_V4dw": "sys:1",
			"-9vh2v2lEeSFtiimx_V4dw": "sys:1",
			"-9vhJv2lEeSFtiimx_V4dw": "sys:1",
			"-9vhYv2lEeSFtiimx_V4dw": "sys:1",
			"-9vhnv2lEeSFtiimx_V4dw": "sys:1",
			"-9viFv2lEeSFtiimx_V4dw": "sys:1",
			"-9viUv2lEeSFtiimx_V4dw": "sys:1",
			"-9vimP2lEeSFtiimx_V4dw": "sys:1",
			"-9viyv2lEeSFtiimx_V4dw": "sys:1",
			"-9vj7P2lEeSFtiimx_V4dw": "sys:1",
			"-9vjBv2lEeSFtiimx_V4dw": "sys:1",
			"-9vjQv2lEeSFtiimx_V4dw": "sys:1",
			"-9vjfv2lEeSFtiimx_V4dw": "sys:1",
			"-9vjuv2lEeSFtiimx_V4dw": "sys:1",
			"-9vk3P2lEeSFtiimx_V4dw": "sys:1",
			"-9vkKP2lEeSFtiimx_V4dw": "sys:1",
			"-9vkZP2lEeSFtiimx_V4dw": "sys:1",
			"-9vkoP2lEeSFtiimx_V4dw": "sys:1",
			"-9vl_v2lEeSFtiimx_V4dw": "sys:1",
			"-9vlaP2lEeSFtiimx_V4dw": "sys:1",
			"-9vlmv2lEeSFtiimx_V4dw": "sys:1",
			"-9vlzP2lEeSFtiimx_V4dw": "sys:1",
			"-9vmMP2lEeSFtiimx_V4dw": "sys:1",
			"-9vn1P2lEeSFtiimx_V4dw": "sys:1",
			"-9vnKv2lEeSFtiimx_V4dw": "sys:1",
			"-9vnZv2lEeSFtiimx_V4dw": "sys:1",
			"-9vnmP2lEeSFtiimx_V4dw": "sys:1",
			"-9vo4v2lEeSFtiimx_V4dw": "sys:1",
			"-9voEP2lEeSFtiimx_V4dw": "sys:1",
			"-9voQv2lEeSFtiimx_V4dw": "sys:1",
			"-9vodP2lEeSFtiimx_V4dw": "sys:1",
			"-9vosP2lEeSFtiimx_V4dw": "sys:1",
			"-9vp8P2lEeSFtiimx_V4dw": "sys:1",
			"-9vpHv2lEeSFtiimx_V4dw": "sys:1",
			"-9vpUP2lEeSFtiimx_V4dw": "sys:1",
			"-9vpgv2lEeSFtiimx_V4dw": "sys:1",
			"-9vpvv2lEeSFtiimx_V4dw": "sys:1",
			"-9vqLP2lEeSFtiimx_V4dw": "sys:1",
			"-9vqXv2lEeSFtiimx_V4dw": "sys:1",
			"-9vtYP2lEeSFtiimx_V4dw": "sys:1",
			"-9vtnP2lEeSFtiimx_V4dw": "sys:1",
			"-9vtzv2lEeSFtiimx_V4dw": "sys:1",
			"-9vu3P2lEeSFtiimx_V4dw": "sys:1",
			"-9vuCv2lEeSFtiimx_V4dw": "sys:1",
			"-9vuPP2lEeSFtiimx_V4dw": "sys:1",
			"-9vubv2lEeSFtiimx_V4dw": "sys:1",
			"-9vuqv2lEeSFtiimx_V4dw": "sys:1",
			"-9vv4P2lEeSFtiimx_V4dw": "sys:1",
			"-9vvDv2lEeSFtiimx_V4dw": "sys:1",
			"-9vvQP2lEeSFtiimx_V4dw": "sys:1",
			"-9vvfP2lEeSFtiimx_V4dw": "sys:1",
			"-9vvrv2lEeSFtiimx_V4dw": "sys:1",
			"-9vw7v2lEeSFtiimx_V4dw": "sys:1",
			"-9vwHP2lEeSFtiimx_V4dw": "sys:1",
			"-9vwTv2lEeSFtiimx_V4dw": "sys:1",
			"-9vwiv2lEeSFtiimx_V4dw": "sys:1",
			"-9vwvP2lEeSFtiimx_V4dw": "sys:1",
			"-9vxIP2lEeSFtiimx_V4dw": "sys:1",
			"-9vxXP2lEeSFtiimx_V4dw": "sys:1",
			"-9vx_P2lEeSFtiimx_V4dw": "sys:1",
			"-9vxjv2lEeSFtiimx_V4dw": "sys:1",
			"-9vxwP2lEeSFtiimx_V4dw": "sys:1",
			"-9vyLv2lEeSFtiimx_V4dw": "sys:1",
			"-9vyav2lEeSFtiimx_V4dw": "sys:1",
			"-9vynP2lEeSFtiimx_V4dw": "sys:1",
			"-9vyzv2lEeSFtiimx_V4dw": "sys:1",
			"-9vzCv2lEeSFtiimx_V4dw": "sys:1",
			"-9vzPP2lEeSFtiimx_V4dw": "sys:1",
			"-9vzbv2lEeSFtiimx_V4dw": "sys:1",
			"-9vzqv2lEeSFtiimx_V4dw": "sys:1",
			"3sYTbZcQQDig4jSSYIuH7A": "sys:1",
			"E5VRsTHzR3GUKGcPAWZT-Q": "sys:1",
			"Ory8fkpLRRSbnSf0K8_WeA": "sys:1",
			"wrR1NSqvQ_qVsXiJKkA_xw": "sys:1"
		},
		"MemberFunction": {
			"1uza6hDGSvSEzgX0ls6QzQ": "sys:1",
			"BK1V0jTiSqiA28ztAXUxog": "sys:1",
			"M_T8-yHuSC-b4WXHp3K3OQ": "sys:2",
			"RSc8RWl_RCa0rJgZAQae5w": "sys:19",
			"Rk-_b0GMSI2IrwAJjZwqzw": "sys:1",
			"bcle51paSiSQ9WaJ1uBxRQ": "sys:6",
			"d-IVhuAdQlilU16t8Xyd-w": "sys:36",
			"gmqHd9JrSjGwXTnXsBsIPw": "sys:1",
			"t14zSWV5SPa7k6brh4HFxg": "sys:12",
			"tDmzVEMjQ0Ky1lpYoLnvCQ": "sys:1"
		},
		"Menu": {
			"AXmX40RPTXC56BjTfuMyUA": "sys:2",
			"CEDPhAZiSOCkHHBZANtoPA": "sys:2",
			"RnuXn3mXQiKUO604UiGN9Q": "sys:4",
			"X1w4NWaxT2euz8uKoVzrXg": "sys:2",
			"kRvYH_xNQWGDwhBiTCx1KQ": "sys:5",
			"p_WVIZErQimM-X_lf_6oOQ": "sys:10",
			"qHIq7pPjQgG4R_owGIU85Q": "sys:1",
			"qPRQBy6cQ3Oae_PhBpzN2g": "sys:2"
		},
		"QueryOp": {
			"5VU7BvKZRRG2dH3kfZVxYA": "sys:1",
			"5rnL4pEBS_mXnb6ukXlYTg": "sys:1",
			"6RPTYsHJS_2kW_jh0y2XrQ": "sys:1",
			"7OTRucYDT6CZbe48ouvuRA": "sys:2",
			"9QBc1ld5SvG5tZ7M06gXnQ": "sys:2",
			"Fg065eAnQCWCYnprkIOzmQ": "sys:1",
			"GAH5UsVYQ8-7Rex6HOo3aA": "sys:1",
			"Ga845hr7TvOvAA5hLSs77A": "sys:1",
			"N-PdnQsoQUGvHJV2XkqiUw": "sys:2",
			"Q8zKUPQpQ463QrxTG3Fo2Q": "sys:3",
			"UJ2ZLOfVTYa8BGzohg9QKg": "sys:8",
			"X0qnD1lBQUy1B_7v2gOAdg": "sys:1",
			"XSLnZYP0QeudDfrQ0zpNxg": "sys:2",
			"ZEhDBfiSSVWSThJ7JWDRVg": "sys:4",
			"aZG5D6MQQImi1DLsFHpegw": "sys:4",
			"claxRaq5Sl6999g5ADvFBA": "sys:1",
			"eOnt26G2TES8-45sIWf4lg": "sys:2",
			"fS3K_3xCRByFHjbFDnpguw": "sys:2",
			"fsAeeW_cSkKcRq_Z1f3BFg": "sys:9",
			"gk5NKp1mS5mukraeQEPXxw": "sys:3",
			"jsEir8gmRbicBtWdCGzjmA": "sys:1",
			"na9FEzBsQJaAwn_Hxx36-Q": "sys:1",
			"nzhqqWOrRLiLG_BmsdxMxA": "sys:1",
			"tAVq-i-vR4q-TXmDgAtVhg": "sys:2",
			"vHByvw8nQz-_tASbX6g56g": "sys:1",
			"xVTEHwn0QZGCV0y3-40-sA": "sys:2"
		},
		"QueryOpUiSpec": {
			"57ILg9OpRKW_mlCRHlbzgA": "sys:5",
			"7Ii8-VwZSEm4dTV4_P5mAQ": "sys:1",
			"8bkpoJNqS6yAs24lNkbZDQ": "sys:1",
			"JCrbxNzDQPuHm_XRuwti9g": "sys:2",
			"KX-8B_faRSufRJ_0hGFetQ": "sys:1",
			"MwwmFSrdRGmgI24guVcCZg": "sys:2",
			"Pu272MTXQ7mIjEHlQrkcow": "sys:1",
			"RFw8yw0xQhalrk0amOWkiQ": "sys:2",
			"XI_wd0QiRwCbonJru7RwWQ": "sys:1",
			"csHQdrakQV-HfiudquIaeg": "sys:1",
			"oKmeb35kScC15wC7BfpjGQ": "sys:3"
		},
		"RemotePackageRepository": {
			"vbIpJ6l7RBask_VdWUx0fg": "sys:3"
		},
		"Role": {
			"FnQ_eBYITOSC8kJA4Zul5g": "sys:1",
			"XXcEtJJ7TwSHOXlwJjz7cA": "deleted"
		},
		"ScheduleTrigger": {
			"75h3lMjSSg-X8rRdBpS67A": "deleted"
		},
		"TwoFactorAuthImplementation": {
			"GaulTlfcRgGe0DkrJcq_tQ": "sys:4",
			"fqJ0O30bRBGZx_MbdZJH-g": "sys:2"
		},
		"UiAction": {
			"i8CPDhK4SXKT7tT8JknLQw": "sys:1",
			"nCpVSR9XR3CrhRBRNDNtPw": "sys:8",
			"zIbWSxNgRiGVY_G7j_jYsA": "sys:1"
		},
		"User": {
			"68J3HOTcSUOm6DRlj9VfNg": "deleted",
			"vl22Nf2XTNym2-X90sxOag": "sys:3"
		},
		"WebService": {
			"5TmX2XybS4WCYB8wS_g1uA": "sys:1",
			"7ugMfTjtQtyPiOiCpci9hA": "sys:4",
			"9G9tifuVToCBntbpzatynA": "sys:3",
			"EPl27ZhKQBO60-xwX60JgA": "sys:2",
			"Enqql7tlRMCPLm2kCsIDvg": "sys:28",
			"GXO11xYsQLKmo_4Ohy-eaQ": "sys:10",
			"IeZLWhf8TEygSbIiXxU37A": "sys:6",
			"OsHGskAGTUWcWsUUMDkVLA": "sys:3",
			"SUUJLgaBQSmM-hi3AyGP0A": "sys:14",
			"SyEf04PFRfKB6f-MOH3QBg": "sys:2",
			"Tjiak1GXQq2BArAt7X9gew": "sys:2",
			"UbKQqqY7SAWn6IrffevzFQ": "sys:7",
			"_ody1b4bSw2XY7xo1FycqQ": "sys:1",
			"bl7smamMSomv6EqTsuHCCg": "sys:11",
			"cCrZOnWwSeO0dxcvJOfUBA": "sys:1",
			"fiWfHKZ8QS6-SezUmvfSmQ": "sys:3",
			"gvfgQ7NmQB-IfJSvKxyE6w": "sys:1",
			"jD8x-SVrQBmD38_K0rzFqA": "sys:1",
			"lh4L_i9JQM2YIhtbmLtcUw": "sys:1",
			"oYBiiisfSu6pOQWFerHCHg": "sys:10",
			"rR1feiTrQP6WDbkV_3s3rg": "sys:3",
			"rVM06exeQXWZPYBFnq6n0g": "sys:6",
			"v7m93WESQVyYqXfZE9XN4Q": "sys:1",
			"w-lHVPreRRSku89vhlyagA": "sys:2"
		}
	},
	"minor_version": 64,
	"name": "Core System"
},
"business_objects":[
{
	"__disp": "WebResource",
	"__pkg": "sys",
	"__ver": "sys:3",
	"_class": "BusinessObjectDef",
	"_id": "0TO-sBb1TjeAAzaMgd-8KQ",
	"abstract": true,
	"class_name": "WebResource",
	"definition": {
		"doc": {
			"type": "jsdoc"
		},
		"name": {
			"type": "string"
		},
		"path": {
			"type": "path"
		},
		"rolespec": {
			"type": "rolespec"
		}
	},
	"doc": "A WebResource object is an item whose content is accessible via an http request.  Core Noonian functionality checks incoming requests against the path/name of WebResources, and checks the logged-in user's roles against the \"rolespec\".  If a match is found, and role check passes, the \"serveContent\" member function is called on the WebResource to send the response.",
	"system": true
},
{
	"__disp": "DataExport",
	"__ver": "sys:2",
	"_class": "BusinessObjectDef",
	"_id": "1lAUvVINQu-8xKB3H0StaA",
	"abstract": false,
	"class_name": "DataExport",
	"definition": {
		"content_type": {
			"type": "string"
		},
		"name": {
			"type": "string"
		},
		"transform_fn": {
			"applicable": "serverside",
			"type": "function"
		}
	},
	"doc": "A mechanism for plugging in a particular export data format.  The \"transform_fn\" accepts an input stream of business objects and an output stream to which it writes the data in the exported format.",
	"system": true
},
{
	"__disp": "DbuiReport",
	"__ver": "sys:1",
	"_class": "BusinessObjectDef",
	"_id": "24FNsXFmQAaegQ77SKKC6g",
	"abstract": false,
	"class_name": "DbuiReport",
	"definition": {
		"doc": {
			"type": "jsdoc"
		},
		"input_perspective": {
			"type": "object"
		},
		"input_typedef": {
			"type": "object"
		},
		"name": {
			"type": "path"
		},
		"output_perspective": {
			"type": "object"
		},
		"output_typedef": {
			"type": "object"
		},
		"web_service": {
			"denormalize_fields": [
				"path"
			],
			"ref_class": "WebService",
			"type": "reference"
		}
	},
	"system": true
},
{
	"__disp": "RemotePackageRepository",
	"__ver": "sys:2",
	"_class": "BusinessObjectDef",
	"_id": "2jfKy7M9Q6-QIOGOOwrf-Q",
	"abstract": false,
	"class_name": "RemotePackageRepository",
	"definition": {
		"auth": {
			"type": "object"
		},
		"name": {
			"type": "string"
		},
		"package_keys": [
			{
				"type": "string"
			}
		],
		"packages": [
			{
				"denormalize_fields": [
					"key",
					"major_version",
					"minor_version"
				],
				"ref_class": "BusinessObjectPackage",
				"type": "reference"
			}
		],
		"url": {
			"type": "url"
		}
	},
	"doc": "Configures a set of packages on this system to be update-able via a remote noonian package repo (hosted using sys.package_repo)",
	"system": true
},
{
	"__disp": "JsResource",
	"__ver": "sys:3",
	"_class": "BusinessObjectDef",
	"_id": "8q-MORjBS3qC0Dwh6dTIkw",
	"abstract": false,
	"class_name": "JsResource",
	"definition": {
		"content": {
			"language": "javascript",
			"type": "sourcecode"
		}
	},
	"doc": "A WebResource with javascript content.  When resource is requested, \"content\" is served with ContentType \"application/javascript\".",
	"superclass": {
		"_disp": "WebResource",
		"_id": "0TO-sBb1TjeAAzaMgd-8KQ"
	},
	"system": true
},
{
	"__disp": "HtmlResource",
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "BusinessObjectDef",
	"_id": "9lfB2NHJQdGXiCADh019SQ",
	"class_name": "HtmlResource",
	"definition": {
		"content": {
			"language": "html",
			"type": "sourcecode"
		}
	},
	"doc": "A WebResource with HTML content.",
	"superclass": {
		"_disp": "WebResource",
		"_id": "0TO-sBb1TjeAAzaMgd-8KQ"
	},
	"system": true
},
{
	"__disp": "ImageResource",
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "BusinessObjectDef",
	"_id": "9nPBq3cpRbm5MyhyxSnZjA",
	"abstract": false,
	"class_name": "ImageResource",
	"definition": {
		"content": {
			"type": "image"
		}
	},
	"doc": "A WebResource that is a graphical image.  Image data is stored as an 'image' type field (base64 encoded), so for exceptionally large images, it may be more appropriate to use FileResource.",
	"superclass": {
		"_disp": "WebResource",
		"_id": "0TO-sBb1TjeAAzaMgd-8KQ"
	},
	"system": true
},
{
	"__disp": "LabelGroup",
	"__pkg": "sys",
	"__ver": "sys:3",
	"_class": "BusinessObjectDef",
	"_id": "A_eCG8jqToSYTvnyiSYqRA",
	"abstract": false,
	"class_name": "LabelGroup",
	"definition": {
		"key": {
			"seperator": ".",
			"type": "path"
		},
		"language": {
			"denormalize_fields": [
				"code"
			],
			"ref_class": "Language",
			"type": "reference"
		},
		"system": {
			"type": "boolean"
		},
		"value": {
			"type": "object"
		}
	},
	"doc": "A LabelGroup stores a logical grouping of internationalized labels, associated with a particular language.",
	"system": true
},
{
	"__disp": "WebService",
	"__pkg": "sys",
	"__ver": "sys:2",
	"_class": "BusinessObjectDef",
	"_id": "CW0euwoXRG-cUFD9-9xwSg",
	"abstract": false,
	"class_name": "WebService",
	"definition": {
		"_disp": "<%= path %>",
		"doc": {
			"type": "jsdoc"
		},
		"function": {
			"applicable": "serverside",
			"type": "function"
		},
		"path": {
			"separator": "/",
			"type": "path"
		},
		"rolespec": {
			"type": "rolespec"
		}
	},
	"doc": "A function that runs on the server-side, is callable via HTTP request for the \"path\", and returns an arbitrary object (or a promise that eventually resolves to an object) that is serialzed to JSON in the HTTP response.",
	"system": true
},
{
	"__disp": "UpdateLog",
	"__ver": "sys:3",
	"_class": "BusinessObjectDef",
	"_id": "DJO4J7xRTvydSH_aBCtAFw",
	"abstract": false,
	"class_name": "UpdateLog",
	"definition": {
		"external_pkg": {
			"type": "boolean"
		},
		"object_class": {
			"type": "string"
		},
		"object_id": {
			"type": "string"
		},
		"package": {
			"ref_class": "BusinessObjectPackage",
			"type": "reference"
		},
		"revert_patch": {
			"type": "object"
		},
		"timestamp": {
			"type": "datetime"
		},
		"update_type": {
			"enum": [
				"create",
				"update",
				"delete"
			],
			"type": "string"
		},
		"updated_version": {
			"type": "string"
		}
	},
	"doc": "Represents a single data change of a business object in the system - a create, update, or delete.\nStores diff history if \"enableHistory\" is enabled in instance config file",
	"system": true
},
{
	"__disp": "PackageConflict",
	"__ver": "sys:1",
	"_class": "BusinessObjectDef",
	"_id": "Dyf49QfST2CwXH1TYOSgHQ",
	"abstract": false,
	"class_name": "PackageConflict",
	"definition": {
		"conflict_type": {
			"enum": [
				"divergent",
				"independent update",
				"missing class"
			],
			"type": "string"
		},
		"created_date": {
			"type": "datetime"
		},
		"diff": {
			"type": "object"
		},
		"installed_object": {
			"type": "object"
		},
		"installed_version_id": {
			"type": "string"
		},
		"merged_object": {
			"type": "object"
		},
		"object_class": {
			"type": "string"
		},
		"object_id": {
			"type": "string"
		},
		"package": {
			"ref_class": "BusinessObjectPackage",
			"type": "reference"
		},
		"package_version_id": {
			"type": "string"
		}
	},
	"doc": "When a package is upgraded or installed, it is possible that conflicting changes have been made to objects that are supposed to be installed:\n1. the version in the package is \"older\" than the object that is installed; i.e. some modifications have been made to the object in the instance, but no modifications have been made to the version in the package.  (conflict_type='independent update').  No merge requried - just leave the existing version in the system; this PackageConflict is merely informational.\n2. the version in the package is divergent from the one installed; i.e. modifications have been made to the object installed AND the package contains its own modifications to the previous version. (conflict_type='divergent')  A merge is required; this PackageConflict contains all the data needed to perform the merge",
	"system": true
},
{
	"__disp": "AngularModule",
	"__ver": "sys:12",
	"_class": "BusinessObjectDef",
	"_id": "G6NlMXjRQEeiqdsC6PP-Dw",
	"abstract": false,
	"class_name": "AngularModule",
	"definition": {
		"config_function": {
			"applicable": "clientside",
			"type": "function"
		},
		"css_dependencies": [
			{
				"denormalize_fields": [
					"name",
					"path"
				],
				"ref_class": "CssResource",
				"type": "reference"
			}
		],
		"external_mod_dependencies": [
			{
				"type": "string"
			}
		],
		"js_dependencies": [
			{
				"denormalize_fields": [
					"name",
					"path"
				],
				"ref_class": "JsResource",
				"type": "reference"
			}
		],
		"mod_dependencies": [
			{
				"denormalize_fields": [
					"name"
				],
				"ref_class": "AngularModule",
				"type": "reference"
			}
		]
	},
	"doc": "A WebResource that is an angular module.  \nA module is composed of the AngularProviders (factories, controllers, directives, filters, etc) and AngularTemplates that reference it. \nWhen resource is requested, the components are pulled together into a single document, and served with a content type of 'application/javascript'.",
	"superclass": {
		"_disp": "WebResource",
		"_id": "0TO-sBb1TjeAAzaMgd-8KQ"
	},
	"system": true
},
{
	"__disp": "Menu",
	"__pkg": "sys",
	"__ver": "sys:3",
	"_class": "BusinessObjectDef",
	"_id": "IG7UUXYwTv6Ffj4o489duA",
	"abstract": false,
	"class_name": "Menu",
	"definition": {
		"definition": {
			"type": "object"
		},
		"definition_getter": {
			"type": "function"
		},
		"doc": {
			"type": "jsdoc"
		},
		"key": {
			"separator": ".",
			"type": "path"
		},
		"rolespec": {
			"type": "rolespec"
		},
		"type": {
			"enum": [
				"static",
				"clientside",
				"serverside"
			],
			"type": "string"
		}
	},
	"doc": "An ordered grouping of actions and submenus under a key.  Utilized by DBUI for the sidebar menu.",
	"system": true
},
{
	"__disp": "DocTemplate",
	"__ver": "sys:2",
	"_class": "BusinessObjectDef",
	"_id": "IbTRqThxTGSys_M1KRaZoQ",
	"abstract": false,
	"class_name": "DocTemplate",
	"definition": {
		"content": {
			"type": "text"
		},
		"content_type": {
			"type": "string"
		},
		"key": {
			"type": "path"
		}
	},
	"doc": "An instance contains template used to generate documentation for a Noonian Package",
	"system": true
},
{
	"__disp": "TwoFactorAuthLoginRequest",
	"__ver": "sys:6",
	"_class": "BusinessObjectDef",
	"_id": "IfDt7M3yTMOt6D2BkMP66A",
	"abstract": false,
	"class_name": "TwoFactorAuthLoginRequest",
	"definition": {
		"code": {
			"type": "string"
		},
		"created_date": {
			"type": "datetime"
		},
		"ip": {
			"type": "string"
		},
		"modified_date": {
			"type": "datetime"
		},
		"user": {
			"ref_class": "User",
			"type": "reference"
		},
		"validated": {
			"type": "boolean"
		}
	},
	"doc": "Holds the code sent to a user as part of the 2-factor authentication process.",
	"system": true
},
{
	"__disp": "AngularApp",
	"__ver": "sys:11",
	"_class": "BusinessObjectDef",
	"_id": "IhXNqXAyQiqGk28iCotr0Q",
	"abstract": false,
	"class_name": "AngularApp",
	"definition": {
		"body": {
			"language": "html",
			"type": "sourcecode"
		},
		"config_function": {
			"applicable": "clientside",
			"type": "function"
		},
		"css_dependencies": [
			{
				"denormalize_fields": [
					"name",
					"path"
				],
				"ref_class": "CssResource",
				"type": "reference"
			}
		],
		"head": {
			"language": "html",
			"type": "sourcecode"
		},
		"js_dependencies": [
			{
				"denormalize_fields": [
					"name",
					"path"
				],
				"ref_class": "JsResource",
				"type": "reference"
			}
		],
		"module": {
			"denormalize_fields": [
				"name",
				"path"
			],
			"ref_class": "AngularModule",
			"type": "reference"
		}
	},
	"doc": "A WebResource that is an angular \"application\".  When resource is requested, the pieces are pulled together into a full html document and served to the client.",
	"superclass": {
		"_disp": "WebResource",
		"_id": "0TO-sBb1TjeAAzaMgd-8KQ"
	},
	"system": true
},
{
	"__disp": "FileResource",
	"__pkg": "sys",
	"__ver": "sys:3",
	"_class": "BusinessObjectDef",
	"_id": "LHh5ZfA6Swq6cHb3CcmCgA",
	"abstract": false,
	"class_name": "FileResource",
	"definition": {
		"content": {
			"type": "attachment"
		}
	},
	"doc": "A WebResource that is an arbitrary file.  When resource is requested, content is streamed from the {@link attachment} storage (Mongo's fs.files/fs.chunks collections via gridfs-stream) with appropriate ContentType.",
	"superclass": {
		"_disp": "WebResource",
		"_id": "0TO-sBb1TjeAAzaMgd-8KQ"
	},
	"system": true
},
{
	"__disp": "BusinessObjectPackage",
	"__pkg": "sys",
	"__ver": "sys:2",
	"_class": "BusinessObjectDef",
	"_id": "QLN_PHr_Tj6nzgzrHA4XdQ",
	"abstract": false,
	"class_name": "BusinessObjectPackage",
	"definition": {
		"build_config": {
			"type": "object"
		},
		"dependencies": {
			"type": "object"
		},
		"description": {
			"type": "string"
		},
		"enable_building": {
			"type": "boolean"
		},
		"installed_version": {
			"type": "string"
		},
		"key": {
			"seperator": ".",
			"type": "path"
		},
		"major_version": {
			"type": "integer"
		},
		"manifest": {
			"type": "object"
		},
		"minor_version": {
			"type": "integer"
		},
		"name": {
			"type": "string"
		},
		"on_install_fn": {
			"applicable": "serverside",
			"type": "function"
		},
		"package_file": {
			"type": "attachment"
		}
	},
	"doc": "A \"package\" of Business Objects.  Facilitates the grouping of arbitrary business objects into sharable, versionable data packages.",
	"superclass": null,
	"system": true
},
{
	"__disp": "BusinessObjectDef",
	"__pkg": "sys",
	"__ver": "sys:2",
	"_class": "BusinessObjectDef",
	"_id": "R1r6pCVESdma9hj8GrfMaQ",
	"abstract": false,
	"class_name": "BusinessObjectDef",
	"definition": {
		"_disp": "<%= class_name %>",
		"abstract": {
			"type": "boolean"
		},
		"class_name": {
			"type": "string"
		},
		"definition": {
			"type": "object"
		},
		"doc": {
			"type": "jsdoc"
		},
		"superclass": {
			"ref_class": "BusinessObjectDef",
			"type": "reference"
		},
		"system": {
			"type": "boolean"
		}
	},
	"doc": "Defines a class of Business Object by describing its composition.  Definition is a data \"schema\", with a structure similar to that used in the mongoose library {@link http://mongoosejs.com/docs/guide.html}.  The types available for defining fields are not limited to the standard JSON primitives; rather, fields are typed according to {@link FieldType} objects.",
	"system": true
},
{
	"__disp": "ScheduleTrigger",
	"__ver": "sys:3",
	"_class": "BusinessObjectDef",
	"_id": "UfkDq2TKQAm4OWijwTpokQ",
	"abstract": false,
	"class_name": "ScheduleTrigger",
	"definition": {
		"enabled": {
			"type": "boolean"
		},
		"function": {
			"applicable": "serverside",
			"type": "function"
		},
		"key": {
			"type": "path"
		},
		"last_execution": {
			"type": "datetime"
		},
		"schedule": {
			"type": "composite",
			"type_desc_map": {
				"day_of_month": {
					"type": "string"
				},
				"day_of_week": {
					"type": "string"
				},
				"hour": {
					"type": "string"
				},
				"minute": {
					"type": "string"
				},
				"month": {
					"type": "string"
				},
				"second": {
					"type": "string"
				}
			}
		}
	},
	"doc": "A function that is triggered on a schedule.\nSchedule field usees cron format for the values:\n * - wildcard\n*/n - every n seconds/minutes/hours\na-b range of values between a and b\na,b,c discreet values a,b,c (can be combined w/ range)",
	"system": true
},
{
	"__disp": "AngularProvider",
	"__ver": "sys:9",
	"_class": "BusinessObjectDef",
	"_id": "ZWSBEFYOT6WlJG95iIm_rw",
	"abstract": false,
	"class_name": "AngularProvider",
	"definition": {
		"doc": {
			"type": "text"
		},
		"function": {
			"applicable": "clientside",
			"type": "function"
		},
		"module": {
			"ref_class": "AngularModule",
			"type": "reference"
		},
		"name": {
			"type": "string"
		},
		"parameters": [
			{
				"type": "string"
			}
		],
		"path": {
			"type": "path"
		},
		"type": {
			"enum": [
				"service",
				"factory",
				"provider",
				"controller",
				"directive",
				"filter"
			],
			"type": "string"
		}
	},
	"doc": "An Angular service, factory, provider, controller, directive, or filter.\nBelongs to an AngularModule, and has a name, and a function definition w/ a list of injected parameters.\n{@link https://docs.angularjs.org/guide/providers}\n'service' type: function is a constructor; instance is what is injected into other functions\n'factory' type: function returns value that is injected into other functions\n'provider' type: function is a constructor; an instance of which is accessible to module config (w/ \"Provider\" suffix).  must have $get member which is a factory used when injecting into non-config function.",
	"system": true
},
{
	"__disp": "CssResource",
	"__ver": "sys:3",
	"_class": "BusinessObjectDef",
	"_id": "_7EZRGUeRYaiyU-YSZonhQ",
	"abstract": false,
	"class_name": "CssResource",
	"definition": {
		"compiled_content": {
			"language": "css",
			"type": "sourcecode"
		},
		"content": {
			"language": "css",
			"type": "sourcecode"
		},
		"preprocessor": {
			"enum": "CssPreprocessor",
			"type": "enum"
		}
	},
	"doc": "A WebResource containing cascading stylesheet (css) content.",
	"superclass": {
		"_disp": "WebResource",
		"_id": "0TO-sBb1TjeAAzaMgd-8KQ"
	},
	"system": true
},
{
	"__disp": "DataAccessControl",
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "BusinessObjectDef",
	"_id": "_K5c8nuqSHOof2sQkwfYBQ",
	"abstract": false,
	"class_name": "DataAccessControl",
	"definition": {
		"allow_create": {
			"type": "boolean"
		},
		"allow_delete": {
			"type": "boolean"
		},
		"allow_read": {
			"type": "boolean"
		},
		"allow_update": {
			"type": "boolean"
		},
		"business_object": {
			"ref_class": "BusinessObjectDef",
			"type": "reference"
		},
		"condition": {
			"type": "object"
		},
		"field_restrictions": {
			"type": "object"
		},
		"rolespec": {
			"type": "rolespec"
		}
	},
	"doc": "A DataAccessControl is created to permit a particular set of user Roles to perform a set of CRUD operations on a specific class of Business Object.  The \"condition\" field allows for conditional access based on the data itself.  The \"field_restrictions\" field allows finer-grained access control by placing restrictions or conditions on access to specific fields.",
	"superclass": null,
	"system": true
},
{
	"__disp": "DbuiCustomPage",
	"__ver": "sys:4",
	"_class": "BusinessObjectDef",
	"_id": "_kXc9xmXRK25KE0qkjrXVg",
	"abstract": false,
	"class_name": "DbuiCustomPage",
	"definition": {
		"body": {
			"language": "html",
			"type": "sourcecode"
		},
		"controller": {
			"applicable": "clientside",
			"type": "function"
		},
		"doc": {
			"type": "jsdoc"
		},
		"key": {
			"type": "path"
		},
		"rolespec": {
			"type": "rolespec"
		}
	},
	"doc": "A \"custom page\" accessible within the DBUI interface by navigating to the state \"dbui.custompage\", with a \"key\" parameter matching a DbuiCustomPage's key field.",
	"superclass": null,
	"system": true
},
{
	"__disp": "QueryOp",
	"__pkg": "sys",
	"__ver": "sys:2",
	"_class": "BusinessObjectDef",
	"_id": "ddY7PaHnQsGCChSZfL12wg",
	"abstract": false,
	"class_name": "QueryOp",
	"definition": {
		"evaluate": {
			"applicable": "serverside",
			"type": "function"
		},
		"for_array": {
			"type": "boolean"
		},
		"fromMongo": {
			"applicable": "serverside",
			"type": "function"
		},
		"name": {
			"type": "string"
		},
		"stringify": {
			"applicable": "serverside",
			"type": "function"
		},
		"toMongo": {
			"applicable": "serverside",
			"type": "function"
		},
		"types": [
			{
				"ref_class": "FieldType",
				"type": "reference"
			}
		]
	},
	"doc": "Encapsulates the logic of how to handle a particular query operation in the context a specified set of field types.",
	"system": true
},
{
	"__disp": "User",
	"__pkg": "sys",
	"__ver": "sys:2",
	"_class": "BusinessObjectDef",
	"_id": "eTt1sebpTOOicLafo-B1PQ",
	"abstract": false,
	"class_name": "User",
	"definition": {
		"language": {
			"denormalize_fields": [
				"code"
			],
			"ref_class": "Language",
			"type": "reference"
		},
		"name": {
			"type": "string"
		},
		"password": {
			"hash": true,
			"type": "password"
		},
		"roles": [
			{
				"ref_class": "Role",
				"type": "reference"
			}
		]
	},
	"doc": "A user of the system.  Contains login information, language for I18n, and roles.",
	"system": true
},
{
	"__disp": "Config",
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "BusinessObjectDef",
	"_id": "fz7jb19XR5K4aclPQdkjIw",
	"abstract": false,
	"class_name": "Config",
	"definition": {
		"allow_customize": {
			"type": "boolean"
		},
		"key": {
			"seperator": ".",
			"type": "path"
		},
		"rolespec": {
			"type": "rolespec"
		},
		"system": {
			"type": "boolean"
		},
		"user": {
			"ref_class": "User",
			"type": "reference"
		},
		"value": {
			"type": "object"
		}
	},
	"doc": "A configuration value, keyed by a dotted path.  Value can be an arbitrary JSON object, and the \"user\" field allows user-specific customization if desired.",
	"system": true
},
{
	"__disp": "Enumeration",
	"__ver": "sys:1",
	"_class": "BusinessObjectDef",
	"_id": "gzp1tQoUTfek9ib8xQZp7Q",
	"abstract": false,
	"class_name": "Enumeration",
	"definition": {
		"name": {
			"type": "string"
		},
		"values": [
			{
				"type": "string"
			}
		]
	},
	"doc": "An Enumeration lists the possible values for a field of \"enum\" type.",
	"system": true
},
{
	"__disp": "Language",
	"__pkg": "sys",
	"__ver": "sys:2",
	"_class": "BusinessObjectDef",
	"_id": "hEP551o6TQKAtYuN6l2ALw",
	"abstract": false,
	"class_name": "Language",
	"definition": {
		"code": {
			"type": "string"
		},
		"name": {
			"type": "string"
		}
	},
	"doc": "A human language and its corresponding ISO 639 abbreviation. {@link https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes}",
	"system": true
},
{
	"__disp": "MemberFunction",
	"__ver": "sys:2",
	"_class": "BusinessObjectDef",
	"_id": "hlNq-6YtR_mr_AFSaLfcAw",
	"abstract": false,
	"class_name": "MemberFunction",
	"definition": {
		"_disp": "<%= business_object._disp %>.<%= name %>",
		"applies_to": {
			"enum": [
				"client",
				"server",
				"both"
			],
			"type": "string"
		},
		"business_object": {
			"ref_class": "BusinessObjectDef",
			"type": "reference"
		},
		"doc": {
			"type": "jsdoc"
		},
		"function": {
			"type": "function"
		},
		"is_static": {
			"type": "boolean"
		},
		"name": {
			"type": "string"
		},
		"use_injection": {
			"type": "boolean"
		}
	},
	"doc": "Creating one of these effects a \"member\" function of a Business Object.  \nCan be \"static\" (i.e. called like so: db.SomeBo.memberFn(...)), or non-static, callable on instances of the owning business object: (new SomeBo()).memberFn(...)",
	"system": true
},
{
	"__disp": "QueryOpUiSpec",
	"__ver": "sys:4",
	"_class": "BusinessObjectDef",
	"_id": "iAifFeKZRDCpBYTmzTNbXQ",
	"abstract": false,
	"class_name": "QueryOpUiSpec",
	"definition": {
		"editors": {
			"type": "object"
		},
		"fieldtypes": [
			{
				"denormalize_fields": [
					"name"
				],
				"ref_class": "FieldType",
				"type": "reference"
			}
		],
		"for_array": {
			"type": "boolean"
		},
		"key": {
			"type": "path"
		}
	},
	"doc": "A QueryOpUiSpec describes how DBUI's query builder should display query operations for a particular set of field types.",
	"system": true
},
{
	"__disp": "Role",
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "BusinessObjectDef",
	"_id": "iKLd6IaxT5eli2yl0XpEzA",
	"abstract": false,
	"class_name": "Role",
	"definition": {
		"name": {
			"type": "string"
		}
	},
	"doc": "A role that a user may have on the system.",
	"system": true
},
{
	"__disp": "JsonResource",
	"__ver": "sys:1",
	"_class": "BusinessObjectDef",
	"_id": "iLfiQteMQQ-daJIeQ37y5w",
	"abstract": false,
	"class_name": "JsonResource",
	"definition": {
		"content": {
			"type": "object"
		}
	},
	"doc": "A WebResource with JSON content.  When resource is requested, \"content\" is served with ContentType \"application/json\".",
	"superclass": {
		"_disp": "WebResource",
		"_id": "0TO-sBb1TjeAAzaMgd-8KQ"
	},
	"system": true
},
{
	"__disp": "FieldTypeUiSpec",
	"__ver": "sys:6",
	"_class": "BusinessObjectDef",
	"_id": "jYHdzRfHSFaD4X6ACZ-_uQ",
	"abstract": false,
	"class_name": "FieldTypeUiSpec",
	"definition": {
		"controller_fn": {
			"applicable": "clientside",
			"type": "function"
		},
		"doc": {
			"type": "jsdoc"
		},
		"fieldtypes": [
			{
				"denormalize_fields": [
					"name"
				],
				"ref_class": "FieldType",
				"type": "reference"
			}
		],
		"for_editing": {
			"type": "boolean"
		},
		"for_editing_array": {
			"type": "boolean"
		},
		"for_viewing": {
			"type": "boolean"
		},
		"for_viewing_array": {
			"type": "boolean"
		},
		"key": {
			"type": "path"
		},
		"link_fn": {
			"applicable": "clientside",
			"type": "function"
		},
		"template": {
			"language": "html",
			"type": "sourcecode"
		}
	},
	"doc": "A template/function bundle that holds the UI pieces for editing/viewing a field value. A FieldTypeUiSpec applies to a set of FieldTypes based on the value of the fieldtypes array.\nAn empty 'fieldtypes' array implies this UiSpec is applicable universally. (more specific UiSpecs will take precidence)",
	"system": true
},
{
	"__disp": "CodeModule",
	"__pkg": "sys",
	"__ver": "sys:3",
	"_class": "BusinessObjectDef",
	"_id": "oThGB1UxRGiPK6tzu4PUXQ",
	"abstract": false,
	"class_name": "CodeModule",
	"definition": {
		"code": {
			"applicable": "serverside",
			"type": "function"
		},
		"doc": {
			"type": "jsdoc"
		},
		"name": {
			"type": "string"
		},
		"path": {
			"type": "path"
		}
	},
	"doc": "A server-side code module; injectable into data trigger and web service functions.",
	"system": true
},
{
	"__disp": "TwoFactorAuthImplementation",
	"__ver": "sys:3",
	"_class": "BusinessObjectDef",
	"_id": "pQIx0YDZQJSLi1cNHxwKlA",
	"abstract": false,
	"class_name": "TwoFactorAuthImplementation",
	"definition": {
		"doc": {
			"type": "text"
		},
		"factory_fn": {
			"applicable": "serverside",
			"type": "function"
		},
		"name": {
			"type": "string"
		}
	},
	"doc": "Provides a specific implementation for two-factor Auth",
	"system": true
},
{
	"__disp": "AngularTemplate",
	"__ver": "sys:2",
	"_class": "BusinessObjectDef",
	"_id": "pzaSsQYLT7uvOx6Trp1wMw",
	"abstract": false,
	"class_name": "AngularTemplate",
	"definition": {
		"content": {
			"language": "html",
			"type": "sourcecode"
		},
		"module": {
			"ref_class": "AngularModule",
			"type": "reference"
		},
		"provider": {
			"ref_class": "AngularProvider",
			"type": "reference"
		}
	},
	"doc": "An HTML template that can be associated with an AngularModule, and/or an AngularProvider.  \n\nTODO: Currently the references are informational and for organizing code, and do not serve any functional purpose in the serving the content.  (in other words, an AngularTemplate is functionally the same as an HtmlResource).  However, when the \"export to filesystem\" functionality is implemented in the future, the AngularModule reference will be used to determine which templates are exported.",
	"superclass": {
		"_disp": "WebResource",
		"_id": "0TO-sBb1TjeAAzaMgd-8KQ"
	},
	"system": true
},
{
	"__disp": "FieldType",
	"__pkg": "sys",
	"__ver": "sys:4",
	"_class": "BusinessObjectDef",
	"_id": "qZR4N3BFQGuMzjcj17jitg",
	"abstract": false,
	"class_name": "FieldType",
	"definition": {
		"doc": {
			"type": "jsdoc"
		},
		"from_db": {
			"applicable": "serverside",
			"type": "function"
		},
		"get_validator": {
			"type": "function"
		},
		"mongo_type": {
			"enum": [
				"String",
				"Boolean",
				"Number",
				"Date",
				"Mixed",
				"Function",
				"Buffer"
			],
			"type": "string"
		},
		"name": {
			"type": "string"
		},
		"text_index": {
			"type": "boolean"
		},
		"to_db": {
			"applicable": "serverside",
			"type": "function"
		}
	},
	"doc": "A FieldType object defines a valid type for a Business Object field, and provides server-side information/logic for persisting it to MongoDB.  Any time you see \"type\" in a BusinessObjectDef's definition, the value corresponds to one of these.",
	"system": true
},
{
	"__disp": "TestObject",
	"__ver": "sys:1",
	"_class": "BusinessObjectDef",
	"_id": "rVjuQcaKTzi2KV5qbWdP3Q",
	"abstract": false,
	"class_name": "TestObject",
	"definition": {
		"date": {
			"type": "date"
		}
	},
	"doc": "For testing only; shouldn't end up in package",
	"system": false
},
{
	"__disp": "UiAction",
	"__pkg": "sys",
	"__ver": "sys:4",
	"_class": "BusinessObjectDef",
	"_id": "uEaZJyjDQXWMs-vNQrjiyQ",
	"abstract": false,
	"class_name": "UiAction",
	"definition": {
		"doc": {
			"type": "jsdoc"
		},
		"function": {
			"applicable": "clientside",
			"type": "function"
		},
		"key": {
			"seperator": ".",
			"type": "path"
		}
	},
	"doc": "A UiAction is a piece of functionality that can be tied to the click of a menu item or a button.",
	"system": true
},
{
	"__disp": "DataTrigger",
	"__pkg": "sys",
	"__ver": "sys:3",
	"_class": "BusinessObjectDef",
	"_id": "w1FEKYa4SbiVPVqAtEWJyw",
	"abstract": false,
	"class_name": "DataTrigger",
	"definition": {
		"action": {
			"applicable": "serverside",
			"type": "function"
		},
		"before_after": {
			"enum": [
				"before",
				"after"
			],
			"type": "string"
		},
		"business_object": {
			"ref_class": "BusinessObjectDef",
			"type": "reference"
		},
		"doc": {
			"type": "jsdoc"
		},
		"key": {
			"type": "path"
		},
		"on_create": {
			"type": "boolean"
		},
		"on_delete": {
			"type": "boolean"
		},
		"on_update": {
			"type": "boolean"
		}
	},
	"doc": "A DataTrigger is a mechanism that allows attaching logic to data changes of a particular class of Busness Object.  The \"action\" field is an injectable function that gets called upon create, update, and/or delete as specifed by the boolean fields.  The \"before_after\" field dictates whether the action is called before or after the Business Object is persisted to MongoDB.  If the action function returns a promise, the system waits until the promise is fulfilled, or fails if the promise is rejected.",
	"superclass": null,
	"system": true
},
{
	"__t": "AngularApp",
	"__ver": "sys:56",
	"_class": "AngularApp",
	"_id": "HvpsexNtTOyRCzDDd4GNsg",
	"body": " <!-- navbar at the top -->\n<div ui-view=\"navBar\"></div>\n<div style=\"margin-top:-20px;\">\n<breadcrumb-bar ng-show=\"userPrefs.enable_breadcrumb_bar\"></breadcrumb-bar>\n</div>\n<div class=\"container-fluid\">\n    \n    <div class=\"row\">\n        \n        <!-- CSS makes this invisible when smaller than md threshold; replaced w/ navbar button. -->\n        <div class=\"col-md-2 hidden-xs hidden-sm\" ng-hide=\"sidebarCollapsed\"> \n            <div class=\"sidebar_main\" ui-view=\"sideBar\"></div>\n        </div>\n        <div class=\"col-md-1\" ng-show=\"sidebarCollapsed\"></div>\n\n        <div class=\"col-md-10 \">\n            <div ui-view=\"mainContainer\"></div>\n        </div>\n  </div>\n  \n</div>\n\n<div id=\"alerts-queue\"  ng-show=\"alertMenu.showQueue\">\n    <div uib-alert ng-repeat=\"alert in alertMenu.newAlerts\" ng-class=\"'alert-'+alert.type\" ng-click=\"closeDbuiAlert(alert)\" close=\"closeDbuiAlert(alert)\">\n        {{alert.msg}}\n    </div>\n</div>",
	"config_function": "function ($stateProvider, $urlRouterProvider, $locationProvider, $httpProvider, $controllerProvider) {\n    console.log('noonian.dbui config()');\n    var appUrlBase = '/dbui/index';\n    \n    $urlRouterProvider\n      .otherwise(appUrlBase);\n    \n    $locationProvider.html5Mode({enabled:true, requireBase:true});\n\n    // $httpProvider.interceptors.push('NoonAuthInterceptor');\n    \n    //Allow dynamical adding of controllers...\n    //noonianAppModule.registerController = $controllerProvider.register;\n\n    //Function used by DBUI to query for theObject for className/id stateParams\n    var resolveTheObject = function($stateParams, db) {\n        return db.init().then(function() {\n            \n          var className = $stateParams.className;\n          var boId = $stateParams.id;\n          if(className) {\n             var Model = db[className];\n              if(boId && Model) {\n                return Model.findOne({_id:boId}).$promise;\n              }\n              else if(Model) {\n                  if($stateParams.copyObject) {\n                      var templateObj = _.clone($stateParams.copyObject);\n                      delete templateObj._id;\n                      return new Model(templateObj);\n                  }\n                  else {\n                      return new Model({});\n                  }\n              }\n              else {\n                return null;\n              }\n          }\n    \n          return null;\n        });\n      \n    };\n    \n    \n    var resolvePerspectiveObj = function(perspectiveType, $stateParams, Dbui) {\n      var className = $stateParams.className;\n      var perspectiveName = $stateParams.perspective || 'default';\n\n      if(className) {\n        return Dbui.getPerspective(perspectiveName, className, perspectiveType);\n      }\n      else {\n        return null;\n      }\n\n    };\n    \n    $stateProvider\n      .state('dbui', {\n        abstract:true,\n        views: {\n          'navBar' : {\n            templateUrl: 'dbui/core/navbar.html'\n          },\n          'sideBar' : {\n            templateUrl: 'dbui/core/sidebar.html'\n          },\n          'mainContainer' : {\n            template: '<ui-view/>' //Child states populate this\n          }\n        },\n        resolve: {\n            //IF DBUI SILENTLY FAILS TO LOAD:\n            // check these injected providers for errors arising from using identifiers that haven't been declared\n            initApi: function(db, NoonAuth, Dbui) {\n                console.log('Initializing \"dbui\" ui-router state...');\n                return db.init().then(NoonAuth.init).then(Dbui.init);\n            }\n        }\n      })\n      .state('dbui.home', {\n        url:appUrlBase,\n        templateUrl: 'dbui/core/state/home.html',\n        controller:'dbui_HomePageCtrl'\n      })\n    //   .state('dbui.login', {\n    //     url:appUrlBase+'/login',\n    //     templateUrl: 'dbui/core/login.html'\n    //   })\n      .state('dbui.list', {\n        url:appUrlBase+'/list/:className/:perspective',\n        templateUrl: 'dbui/core/state/list.html',\n        controller:'dbui_ListCtrl',\n        resolve: {\n          listPerspective:  function($stateParams, Dbui, DbuiFieldType) {\n            return DbuiFieldType.cacheTypeInfoForClass($stateParams.className, 'view')\n                .then(resolvePerspectiveObj.bind(null,'list', $stateParams, Dbui));\n          }\n        }\n      })\n      .state('dbui.folders', {\n        url:appUrlBase+'/folders/:className/:perspective',\n        templateUrl: 'dbui/core/state/folders.html',\n        controller:'dbui_FoldersCtrl',\n        resolve: {\n          folderPerspective:  function($stateParams, Dbui, DbuiFieldType) {\n            return DbuiFieldType.cacheTypeInfoForClass($stateParams.className, 'view')\n                .then(resolvePerspectiveObj.bind(null,'folder', $stateParams, Dbui));\n          }\n        }\n      })\n      .state('dbui.view', {\n        url:appUrlBase+'/view/:className/:id/:perspective',\n        templateUrl: 'dbui/core/state/view.html',\n        controller:'dbui_ViewCtrl',\n        resolve: {\n          theObject: resolveTheObject,\n          viewPerspective:  function($stateParams, Dbui, DbuiFieldType) {\n            return DbuiFieldType.cacheTypeInfoForClass($stateParams.className, 'view')\n                .then(resolvePerspectiveObj.bind(null,'view', $stateParams, Dbui));\n          }\n        }\n      })\n      .state('dbui.edit', {\n        url:appUrlBase+'/edit/:className/:id/:perspective',\n        templateUrl: 'dbui/core/state/edit.html',\n        controller:'dbui_EditCtrl',\n        resolve: {\n          theObject: resolveTheObject,\n          editPerspective:  function($stateParams, Dbui, DbuiFieldType) {\n            return DbuiFieldType.cacheTypeInfoForClass($stateParams.className, 'edit')\n                .then(resolvePerspectiveObj.bind(null, 'edit', $stateParams, Dbui));\n          }\n        }\n      })\n      .state('dbui.create', {\n        url:appUrlBase+'/create/:className/:perspective',\n        templateUrl: 'dbui/core/state/edit.html',\n        controller:'dbui_EditCtrl',\n        resolve: {\n          theObject: resolveTheObject,\n          editPerspective:  function($stateParams, Dbui, DbuiFieldType) {\n            return DbuiFieldType.cacheTypeInfoForClass($stateParams.className, 'edit')\n                .then(resolvePerspectiveObj.bind(null, 'edit', $stateParams, Dbui));\n          }\n        },\n        params:{\n            copyObject:null\n        }\n      })\n      .state('dbui.custompage', {\n        url:appUrlBase+'/custompage/:key',\n        templateUrl: 'dbui/core/state/custompage.html',\n        params:{\n          id:null,\n          key:null,\n          resourcePath:null,\n          perspective:null,\n          extraParams:null\n        }\n      })\n      ;\n}",
	"css_dependencies": [
		{
			"_disp": "app.css",
			"_id": "mF2-m7xwSv-GOiV7I-YPNg",
			"name": "app.css",
			"path": "dbui/css"
		}
	],
	"head": "<meta charset=\"utf-8\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n<title ng-bind=\"fullPageTitle\"></title>\n<meta name=\"description\" content=\"\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">",
	"js_dependencies": [
	],
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q",
		"name": "noonian.dbui",
		"path": "noonian/dbui"
	},
	"name": "index",
	"path": "dbui",
	"rolespec": [
	]
},
{
	"__t": "AngularApp",
	"__ver": "sys:27",
	"_class": "AngularApp",
	"_id": "kRd_Ft64QFey_at4tgphXA",
	"body": "<div class=\"container\" ng-controller=\"LoginController\">\n      <div class=\"row\">\n        <div class=\"col-sm-6\">{{message}}</div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-sm-6\">\n          <form class=\"form-horizontal\" ng-submit=\"submit()\">\n            <div class=\"form-group\" ng-hide=\"twoFactor\">\n              <label for=\"username\" class=\"control-label\">Username</label>\n              <input type=\"text\" class=\"form-control\" ng-model=\"postData.username\"/>\n            </div>\n            <div class=\"form-group\" ng-hide=\"twoFactor\">\n              <label for=\"password\" class=\"control-label\">Password</label>\n              <input name=\"password\" type=\"password\" class=\"form-control\" ng-model=\"postData.password\" />\n            </div>\n            \n            <div class=\"form-group\" ng-show=\"twoFactor\">\n                <label for=\"verifycode\" class=\"control-label\">Verification code</label>\n                <input name=\"verifycode\" type=\"text\" class=\"form-control\" ng-model=\"postData.second_factor_code\" />\n            </div>\n            \n            <input type=\"submit\" class=\"btn btn-default\" value=\"Login\" />\n          </form>\n        </div>\n      </div>\n  </div>",
	"config_function": "function ($controllerProvider, $locationProvider) {\n    \n    $locationProvider.html5Mode(true);\n    \n    $controllerProvider.register('LoginController', function($scope, $http, $location, $window) {\n        console.log('LoginController');\n        \n        document.cookie = 'access_token=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n        \n        $scope.message = \"Please enter username and password below\";\n        $scope.postData = {};\n        \n        var urlParams = $location.search();\n        \n        \n        $scope.submit = function() {\n            \n            $http({\n                method:'POST',\n                url:'auth/login',\n                data:$scope.postData\n            }).then(\n                //Success:\n                function(resp) {\n                    console.log('Login response: ', resp);\n                    var redirectLink = (urlParams && urlParams.originalUrl) || '.';\n                    $window.location.href = redirectLink;\n                },\n                //ERROR\n                function(resp) {\n                    console.log('ERROR', resp);\n                    if(resp.data && resp.data.error === '$invalid_credentials') {\n                        $scope.message = 'Invalid login credentials.  Please try again.';\n                    }\n                    else if(resp.data && resp.data.error === '$missing_phone') {\n                        $scope.message = 'Two-factor authentication is required, but your user account is missing a phone number.  Please contact an administrator to resolve the issue.';\n                    }\n                    else if(resp.data && resp.data.twoFactorRequired) {\n                        $scope.twoFactor = true;\n                        $scope.message = 'Two-factor authentication required.  Please type in code sent to your phone.';\n                    }\n                    else {\n                        $scope.message = (resp.data && resp.data.error) || resp.statusText\n                    }\n                }\n            );\n            \n        }\n    })\n}",
	"css_dependencies": [
		{
			"_disp": "bootstrap.min.css",
			"_id": "o4W541R8SOaAsLdTAFRwBw",
			"name": "bootstrap.min.css",
			"path": "bower_components/bootstrap/dist/css"
		}
	],
	"head": "<title>Please Log In...</title>",
	"js_dependencies": [
		{
			"_disp": "angular.min.js",
			"_id": "YHk7GG6fQIKjEFXm7zTmFg",
			"name": "angular.min.js",
			"path": "bower_components/angular"
		}
	],
	"name": "login.html",
	"path": "/",
	"rolespec": [
	]
},
{
	"__t": "AngularModule",
	"__ver": "sys:8",
	"_class": "AngularModule",
	"_id": "NJnfAVnFSmuMcv9voRnaJQ",
	"css_dependencies": [
	],
	"doc": "Module containing the API's for interacting with Noonian server-side, independent of DBUI. If you want to create an angular application that is not an extension or customization of DBUI, you can still leverage the Noonian system by utilizing this module.",
	"external_mod_dependencies": [
	],
	"js_dependencies": [
		{
			"_disp": "jquery.min.js",
			"_id": "QJ9VrGUoQya0fyEGoww65A",
			"name": "jquery.min.js",
			"path": "bower_components/jquery/dist"
		},
		{
			"_disp": "angular.min.js",
			"_id": "YHk7GG6fQIKjEFXm7zTmFg",
			"name": "angular.min.js",
			"path": "bower_components/angular"
		},
		{
			"_disp": "lodash.min.js",
			"_id": "2TDnTPuBRLCu1-DgDQdmKA",
			"name": "lodash.min.js",
			"path": "bower_components/lodash"
		},
		{
			"_disp": "moment.min.js",
			"_id": "omuJBnPOSYC6z4RH26g_xA",
			"name": "moment.min.js",
			"path": "bower_components/moment/min"
		}
	],
	"mod_dependencies": [
	],
	"name": "noonian.api",
	"path": "noonian/api"
},
{
	"__t": "AngularModule",
	"__ver": "sys:68",
	"_class": "AngularModule",
	"_id": "myP57XGhSNyDKrrcJFvO0Q",
	"config_function": null,
	"css_dependencies": [
		{
			"_disp": "bootstrap.min.css",
			"_id": "o4W541R8SOaAsLdTAFRwBw",
			"name": "bootstrap.min.css",
			"path": "bower_components/bootstrap/dist/css",
			"ref_class": null
		},
		{
			"_disp": "font-awesome.min.css",
			"_id": "rTEg0q5bQbiYsTXNOFCBvQ",
			"name": "font-awesome.min.css",
			"path": "bower_components/font-awesome/css",
			"ref_class": null
		}
	],
	"doc": "Module containing all services, controllers, directives for serving up the Noonian DBUI.",
	"external_mod_dependencies": [
		"ngCookies",
		"ui.router",
		"ui.bootstrap",
		"ui.bootstrap.modal",
		"ui.ace"
	],
	"js_dependencies": [
		{
			"_disp": "ace.js",
			"_id": "GUOAqvm-T0K8quHjSH-P8w",
			"name": "ace.js",
			"path": "bower_components/ace-builds/src-min-noconflict",
			"ref_class": null
		},
		{
			"_disp": "angular-cookies.min.js",
			"_id": "obYp82hZTaWS6ABYtZ2eJA",
			"name": "angular-cookies.min.js",
			"path": "bower_components/angular-cookies",
			"ref_class": null
		},
		{
			"_disp": "ui-bootstrap-tpls.js",
			"_id": "GABEyCzfTNSuQeo0b1H6TA",
			"name": "ui-bootstrap-tpls.js",
			"path": "bower_components/angular-bootstrap",
			"ref_class": null
		},
		{
			"_disp": "angular-ui-router.min.js",
			"_id": "mmYBlEfVRi2WM5nGcfm0VA",
			"name": "angular-ui-router.min.js",
			"path": "bower_components/angular-ui-router/release",
			"ref_class": null
		},
		{
			"_disp": "ui-ace.min.js",
			"_id": "WGmUTuiGS5KfXGYV_sUHeQ",
			"name": "ui-ace.min.js",
			"path": "bower_components/angular-ui-ace",
			"ref_class": null
		},
		{
			"_disp": "ext-language_tools.js",
			"_id": "cevOr03VSL6fKgpPRnXYVQ",
			"name": "ext-language_tools.js",
			"path": "bower_components/ace-builds/src-min-noconflict",
			"ref_class": null
		}
	],
	"mod_dependencies": [
		{
			"_disp": "noonian.api",
			"_id": "NJnfAVnFSmuMcv9voRnaJQ",
			"name": "noonian.api",
			"ref_class": null
		}
	],
	"name": "noonian.dbui",
	"path": "noonian/dbui"
},
{
	"__ver": "sys:11",
	"_class": "AngularProvider",
	"_id": "-WzjxRZhT-CoPcBycQAiOg",
	"doc": "The controller for ui-router state dbui.view",
	"function": "function ($stateParams, $scope, DbuiAction, NoonI18n, theObject, viewPerspective) {\n\n    \n    var className = $scope.boClass;\n    \n    if(!className) {\n        className = $scope.boClass = $stateParams.className;\n    }\n    \n    $scope.theObject = theObject;\n    $scope.viewPerspective = viewPerspective;\n\n\n    $scope.labels = NoonI18n.getBoLabelGroup(className);\n    \n    \n    // function(perspectiveObj, contextBo, actionObj, argsObj)\n    $scope.invokeAction = DbuiAction.invokeAction.bind(DbuiAction, viewPerspective, theObject);\n    \n    if(viewPerspective.actions) {\n        $scope.actionList = DbuiAction.unaliasActionList(viewPerspective.actions);\n    }\n    \n    if(viewPerspective.recordActions) {\n        $scope.recordActionList = DbuiAction.unaliasActionList(viewPerspective.recordActions);\n    }\n    \n    if($scope.setPageTitle)\n        $scope.setPageTitle('View '+theObject._disp);\n\n}",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "dbui_ViewCtrl",
	"parameters": [
		"$stateParams",
		"$scope",
		"DbuiAction",
		"NoonI18n",
		"theObject",
		"viewPerspective"
	],
	"path": "dbui/core/state",
	"type": "controller"
},
{
	"__ver": "sys:25",
	"_class": "AngularProvider",
	"_id": "1DR9d4BTQtafOsD03s3kPg",
	"doc": "A piece of queryBuilder - a directive for editing an individual term of a query  (a field+op+value chunk: e.g. {\"some_field\":{$eq:\"some value\"}})",
	"function": "function (DbuiFieldType, db, $timeout) {\n    return {\n      templateUrl: 'dbui/core/helper/querybuilder_term.html',\n      restrict: 'E',\n      scope: {\n        fieldList: '<' //the augmented field list from Dbui.getAugmentedFieldList\n      },\n      require: 'ngModel',\n\n      link: function(scope, element, attrs, ngModel) {\n\n        //viewValue: {field:'name_of_field.possiblydotted', op:{op:'$someOp', ...}, value:'value from fieldeditor'}\n        //modelValue: a valid mongo query term, e.g.\n        //  {'field':{$op:'value'}}  <-- returned from DbuiTypeService\n\n        var retainHashKey = function(src, dest) {\n          //WTF: Retain $$hashKey so iteration in QueryBuilder template doesn't throw into an infinite format/parse loop!\n          if(src && src.$$hashKey)\n            dest.$$hashKey = src.$$hashKey;\n        };\n\n\n        //Turn a {'field':{'$op':'value'}} \"queryClause\" into a {fieldInfo:..., opInfo:..., value:'value'} \"flattened\" clause\n        var flattenQueryClause = function(queryClause) {\n            \n            var fieldList = scope.fieldList;\n            \n            var term = {};\n            \n            for(var fieldSelector in queryClause) {\n                //Scan past any junk:\n                if(fieldSelector.indexOf('$$') === 0) { //if the incoming query is on a $scope, it gets a $$hashkey key.\n                    continue;\n                }\n                \n                var dotPos = fieldSelector.indexOf('.');\n                var fieldBase = false;\n                if(dotPos > -1) {\n                    fieldBase = fieldSelector.substring(0, dotPos+1);\n                }\n                \n                //Scan through fieldList to find matching fieldInfo\n                for(var i=0; i < scope.fieldList.length; i++) {\n                    var fi = scope.fieldList[i];\n                    if(fi.fieldName === fieldSelector) {\n                        term.fieldInfo = fi;\n                    }\n                    else if(fieldBase && fi.refPlaceholder && fi.fieldName === fieldBase) {\n                        fi.expand();\n                        i--;\n                    }\n                }\n                \n                //In case query is the shorthand equals, \n                // convert {field:\"value\"} -> {field:{$eq:\"value\"}}\n                var opClause = queryClause[fieldSelector];\n                \n                if(!(opClause instanceof Object)) {\n                    queryClause[fieldSelector] = opClause = {$eq:opClause};\n                }\n                \n                var opArray = Object.keys(opClause);\n                \n                if(opArray.length > 1)\n                    console.log(\"WARNING: multi-condition clause being linked to a single queryTermBuilder!!!\");\n                    \n                    if(opArray.length > 0) {\n                        term.opInfo = DbuiFieldType.getOpInfo(term.fieldInfo.td, opArray[0]);\n                        term.value = queryClause[fieldSelector][opArray[0]];\n                    }\n                    \n                    break;\n            }\n            \n            return term;\n        };\n\n        //$formatter: query term -> $viewValue\n        ngModel.$formatters.push(function(queryClause) {\n          // console.log('TB: formatting this clause to viewValue:', queryClause);\n\n\n          var newViewValue = queryClause ? flattenQueryClause(queryClause) : {};\n          // console.log('TB: heres what it came up with: ', newViewValue);\n\n          retainHashKey(queryClause, newViewValue);\n\n          return newViewValue;\n\n        });\n\n        //$parser: $viewValue -> query term\n        ngModel.$parsers.push(function(viewValue) {\n          // console.log('TB: parsing this viewValue into a clause:', viewValue);\n\n          if(!viewValue || !viewValue.fieldInfo || !viewValue.opInfo)\n            return null;\n\n          var fieldName = viewValue.fieldInfo.fieldName;\n          var op = viewValue.opInfo.op;\n          var value = viewValue.value;\n\n          //Unflatten viewValue: {'field':{'$op':'the value'}}\n          var queryClause = {};\n          queryClause[fieldName] = {};\n          queryClause[fieldName][op] = value !== undefined ? value : true;\n\n\n          retainHashKey(viewValue, queryClause);\n\n          return queryClause;\n\n        });\n\n        //$watch: our scope -> $viewValue\n        // ***it's important to watch ALL of scope that affects ngModel in a single expression;\n        //  otherwise, you may get competing $setViewValue calls that stomp on one another\n        // ***also important: don't assign the scope object directly as the view value!\n        scope.$watch('term', function() {\n          //When any part of the term changes ('true' param below is deep watch)\n          //  replace the viewValue object with a new object\n          var term = scope.term;\n          var newViewValue = {fieldInfo:term.fieldInfo, opInfo:term.opInfo, value:term.value};\n          retainHashKey(term, newViewValue);\n          // console.log('TB: scope watch invoked -> setting view value: ', newViewValue);\n\n          ngModel.$setViewValue(newViewValue);\n        }, true );\n\n        //$render: $viewValue -> our scope\n        ngModel.$render = function() {\n          // console.log('TB: rendering this viewValue to scope:', ngModel.$viewValue);\n          //scope object can refer directly to the ngModel viewValue (just not the other way around!)\n\n          var term = scope.term = ngModel.$viewValue;\n          // console.log(\"rendering \", term);\n          //Make sure UI elements are synced up to this view value:\n          scope.fieldChanged(term.fieldInfo, false);\n        };\n\n      },\n\n      controller:function($scope) {\n        \n        $scope.fieldChanged = function(fieldInfo, resetValue) {\n            // console.log('fieldChanged', fieldInfo, resetValue);\n            \n          if(fieldInfo.refPlaceholder) {\n            return fieldInfo.expand();\n          }\n\n          $scope.fieldSelectorOpen = false;\n\n          var term = $scope.term;\n          term.fieldInfo = fieldInfo;\n\n          //Update the OpList so that the op selector shows the appropriate ops for this field type:\n          if(fieldInfo && fieldInfo.td) {\n            var opList = $scope.opList = DbuiFieldType.getOpList(fieldInfo.td);\n            \n            //Make sure the term.opInfo is valid...\n            var foundIt = false;\n            var currOp = term.opInfo ? term.opInfo.op : null;\n            for(var i=0; i < opList.length; i++) {\n              if(opList[i].op === currOp) {\n                foundIt = true;\n                term.opInfo = opList[i];\n                break;\n              }\n            }\n            if(!foundIt) {\n              term.opInfo = opList[0];\n            }\n            $scope.opChanged(resetValue);\n          }\n\n          if(resetValue)\n            $scope.term.value = undefined;\n        };\n\n        var fundamentalTypeDesc = function(td) {\n          return td instanceof Array ? td[0] : td;\n        };\n\n        $scope.opChanged = function(resetValue) {\n        //   console.log('opChanged invoked', resetValue);\n          var term = $scope.term;\n          var opInfo = term.opInfo;\n\n          if(opInfo) {\n\n            var currType = $scope.fieldEditorTypeDesc ? $scope.fieldEditorTypeDesc.type : false;\n            \n            \n            //If the op requires a specific editor, set the scope's typeDesc so that it is used...\n            if(typeof opInfo.editor === 'boolean')\n              $scope.fieldEditorTypeDesc = fundamentalTypeDesc(term.fieldInfo.td);\n            else //editor is a typedesc object\n              $scope.fieldEditorTypeDesc = opInfo.editor;\n            \n            // if(currType !== $scope.fieldEditorTypeDesc.type) {\n                // $scope.fieldEditorVisible = false;\n            // }\n              \n\n            //Nullify term value if type changed\n            if(resetValue && ($scope.fieldEditorTypeDesc.type !== currType || !opInfo.editor)) {\n              $scope.term.value = undefined;\n            }\n            \n            //Coax angular into destroying the fieldEditor directive so it can be rebuilt using the new fieldEditorTypeDesc\n            $scope.fieldEditorVisible = false;\n            $timeout(function() {\n                $scope.fieldEditorVisible = $scope.fieldEditorTypeDesc && $scope.term.opInfo && $scope.term.opInfo.editor;\n            });\n          }\n        }\n\n\n\n      }\n    };\n  }",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "queryTermBuilder",
	"parameters": [
		"DbuiFieldType",
		"db",
		"$timeout"
	],
	"path": "dbui/core/helper",
	"type": "directive"
},
{
	"__ver": "sys:26",
	"_class": "AngularProvider",
	"_id": "1KOgLhmgQj2AUKYIxflYqA",
	"doc": "Directive to render a \"displayValue\" to dom; utilizes {@link TypeDescriptor| type descriptor} to dynamically choose which FieldTypeUiSpec to render with.\n@param displayValue value being rendered\n@param typeDesc type descriptor for the value being rendered\n@param {boolean} abbreviated show an 'abbreviated' view of the value (if applicable - depends upon specific type)\n@param fieldCustomizations type-specific {@link FieldCustomizations|field customizations} to apply",
	"function": "function ($compile,  DbuiFieldType, $injector) {\n    return {\n      template: '<div></div>',\n      restrict: 'E',\n      \n      scope: {\n        displayValue: '=',\n        typeDesc: '<',\n        abbreviated: '<?',\n        fieldCustomizations: '<?', //From perspective.field_customizations\n        contextObject: '<?'\n      },\n      \n      link: function (scope, element, attrs, ngModel) {\n          var td = scope.typeDesc;\n          if(!td) {\n              console.error('Missing typeDesc in dbuiFieldEditor directive');\n              return;\n          }\n          \n          DbuiFieldType.getSpec(td, 'view', scope.fieldCustomizations).then(function(specObj){\n                            var templateHtml = specObj.template;\n              var compiledTemplate = $compile(templateHtml);\n              \n              element.append(compiledTemplate(scope));\n          });\n\n      },\n       \n      controller: function($scope) {\n          DbuiFieldType.getSpec($scope.typeDesc, 'view', $scope.fieldCustomizations).then(function(specObj){\n              \n              if(specObj && specObj.controller_fn) {\n                  var fnString = specObj.controller_fn;\n                  try {\n                      var toCall;\n                      eval(\"toCall = \"+fnString);\n                      if(typeof toCall === 'function') {\n                          return $injector.invoke(toCall, this, {$scope:$scope});\n                      }\n                      else {\n                          console.error('bad controller function for typeDesc', $scope.typeDesc);\n                      }\n                  }\n                  catch(err) {\n                      console.error('bad controller function for typeDesc', $scope.typeDesc, err);\n                  }\n              }\n          \n          });\n      }\n      \n    };\n  }",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "dbuiFieldViewer",
	"parameters": [
		"$compile",
		"DbuiFieldType",
		"$injector"
	],
	"path": "dbui/reusable/core",
	"type": "directive"
},
{
	"__ver": "sys:41",
	"_class": "AngularProvider",
	"_id": "2UpyXO5lR3qV-oce53G_7A",
	"doc": "An input for a \"date\" value, binding to simple yyyy-mm-dd string, rather than a js Date object/headache.",
	"function": "function () {\n    return {\n        templateUrl:'dbui/core/helper/date_string_editor.html',\n        \n        restrict: 'E',\n        \n        require:'ngModel',\n        \n        scope: {\n            displayFormat: '@',\n            elemId:'@'\n        },\n        \n        \n        link: function(scope, iElement, iAttributes, ngModel) {\n    \n            //Add listener to clear text box when it contains invalid date\n            var textBox = iElement.find('input');\n            textBox.on('blur', function() {\n                if(textBox.val() && (!scope.binding || !scope.binding.value)) {\n                    textBox.css('background-color','red');\n                }\n                else {\n                    textBox.css('background-color','');\n                }\n            });\n            \n            //1. Wire up converter for ng-model object (string)--> internal $viewValue representation (date)\n            ngModel.$formatters.push(function(modelValue) {\n                if(modelValue) {\n                    return {value:new Date(moment(modelValue).format())};\n                }\n                return {value:null};\n            });\n            \n            //2. Wire up converter for internal $viewValue representation (date) --> ng-model object (string)\n            ngModel.$parsers.push(function(viewValue) {\n                if(viewValue && viewValue.value instanceof Date) {\n                    return moment(viewValue.value).format('YYYY-MM-DD');\n                }\n                \n                return null;\n            });\n            \n            //3. Wire up trigger for scope object --> $viewValue\n            scope.$watch('binding', function() {\n                //must *replace* the viewValue object in order for change to propogate to ng-model!\n                if(scope.binding && !angular.equals(ngModel.$viewValue, scope.binding)) {\n                    ngModel.$setViewValue({value:scope.binding.value});\n                    if(scope.binding.value) {\n                        textBox.css('background-color','');\n                    }\n                }\n                \n            }, \n            true); \n            \n            //4. Wire up callback for $viewValue update --> scope object\n            ngModel.$render = function() {\n                if(!scope.binding) {\n                    scope.binding = {};\n                }\n                if(!angular.equals(ngModel.$viewValue, scope.binding)) {\n                    scope.binding.value = ngModel.$viewValue.value;\n                }\n            };\n            \n            \n        },\n        \n      \n      controller: function($scope) {\n          \n        $scope.dateOptions = {\n          formatYear: 'yyyy'\n        };\n        \n        \n        if(!$scope.displayFormat) {\n            $scope.displayFormat = 'MMMM dd, yyyy'; \n        }\n        \n        $scope.altFormats = [\n            'MMM d, yyyy',\n            'MMM dd, yyyy',\n            'M/d/yy',\n            'MM/dd/yy',\n            'M/d/yyyy',\n            'MM/dd/yyyy',\n            'M-d-yy',\n            'MM-dd-yy',\n            'M-d-yyyy',\n            'MM-dd-yyyy',\n        ];\n        \n        $scope.pickerOpen = false;\n    \n        $scope.togglePicker = function() {\n            $scope.pickerOpen = !$scope.pickerOpen;\n        };\n          \n          \n      }\n      \n    };\n  }",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "dateStringEditor",
	"parameters": [
	],
	"path": "dbui/core/helper",
	"type": "directive"
},
{
	"__ver": "sys:7",
	"_class": "AngularProvider",
	"_id": "3Viz_TmyQRqPGTDKMEhv2A",
	"doc": "Provides interface for retrieving configuration parameters.",
	"function": "function ($http, $q) {\n\n\treturn {\n\t\tgetParameter: function(paramKey) {\n\t\t\tvar deferred = $q.defer();\n\n\t\t\t$http.get('config/param/'+paramKey)\n\t\t\t\t.success(function(data) {\n\t\t\t\t\tvar responseObj = angular.fromJson(data);\n\t\t\t\t\tif(responseObj.error) {\n\t\t\t\t\t\tdeferred.reject(responseObj.error);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tdeferred.resolve(responseObj.result);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.error(function(err) {\n\t\t\t\t\tdeferred.reject(err);\n\t\t\t\t});\n\n\t\t\treturn deferred.promise;\n\t\t},\n\t\t\n\t\tcustomizeParameter: function(paramKey, value) {\n\t\t    var deferred = $q.defer();\n\n\t\t\t$http.post('config/customizeParam/'+paramKey, {value:value})\n\t\t\t\t.success(function(data) {\n\t\t\t\t    // console.log('customizeParam result', data);\n\t\t\t\t\tvar responseObj = angular.fromJson(data);\n\t\t\t\t\tif(responseObj.error) {\n\t\t\t\t\t\tdeferred.reject(responseObj.error);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tdeferred.resolve(responseObj.result);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.error(function(err) {\n\t\t\t\t\tdeferred.reject(err);\n\t\t\t\t});\n\n\t\t\treturn deferred.promise;\n\t\t    \n\t\t}\n\n\t};\n\n}",
	"module": {
		"_disp": "noonian.api",
		"_id": "NJnfAVnFSmuMcv9voRnaJQ"
	},
	"name": "NoonConfig",
	"parameters": [
		"$http",
		"$q"
	],
	"path": "noonian/api",
	"type": "factory"
},
{
	"__ver": "sys:20",
	"_class": "AngularProvider",
	"_id": "3ap2IrTbTkOORGV3Ra5Fjg",
	"doc": "An editor for a \"time string\", bound via ngModel.",
	"function": "function (uibDateParser, $filter) {\n    \n    return {\n        templateUrl:'dbui/core/helper/time_string_editor.html',\n        restrict: 'E',\n        \n        scope: {\n            elemId: '@',\n            displayFormat: '@'\n        },\n        \n        require: 'ngModel', \n        \n        link: function(scope, iElement, iAttributes, ngModel) {\n            \n            var displayFormat = scope.displayFormat;\n            \n            var dateFormatter = $filter('date');\n            \n            var stringToDate = function(stringDate) {\n                //14:48:00.000\n                var parsed = /(\\d{2}):(\\d{2}):(\\d{2}).(\\d{3})/.exec(stringDate);\n                var h = +parsed[1];\n                var m = +parsed[2];\n                \n                //seconds/millis optional\n                var s = parsed.length >= 4 ? +parsed[3] : 0;\n                var ms = parsed.length >= 5 ? +parsed[4] : 0;\n                \n                //construct in **local time zone**\n                return new Date(1900, 0, 1, h, m, s, ms);\n                \n            };\n            \n            //1. Wire up converter for ng-model object (ISO string segment)--> internal $viewValue representation (formatted string)\n            ngModel.$formatters.push(function(modelValue) {\n                if(modelValue) {\n                    //modelValue is the time portion of an ISO String (the stuff after T, not including timezone)\n                    var d =  stringToDate(modelValue);\n                    return {value: dateFormatter(d, displayFormat)};  //format in **local time zone**\n                }\n                return {value:null};\n            });\n            \n            //2. Wire up converter for internal $viewValue representation (formatted string) --> ng-model object (ISO string segment)\n            ngModel.$parsers.push(function(viewValue) {\n                if(viewValue && viewValue.value) {\n                    try {\n                        var dateObj = uibDateParser.parse(viewValue.value, displayFormat); //parsed to **local time zone**\n                        if(dateObj instanceof Date && !isNaN(dateObj.getTime())) {\n                            var h = dateObj.getHours();\n                            var m = dateObj.getMinutes();\n                            var s = dateObj.getSeconds();\n                            var ms = dateObj.getMilliseconds();\n                            \n                            h = (h < 10) ? '0'+h : ''+h;\n                            m = (m < 10) ? '0'+m : ''+m;\n                            s = (s < 10) ? '0'+s : ''+s;\n                            ms = (ms < 10) ? '00'+ms : ( (ms < 100) ? '0'+ms : ''+ms);\n                            return h+':'+m+':'+s+'.'+ms;\n                        }\n                    } catch(e) {}\n                }\n                \n                return null;\n            });\n            \n            //3. Wire up trigger for scope object --> $viewValue\n            scope.$watch('binding', function() {\n                //must *replace* the viewValue object in order for change to propogate to ng-model!\n                if(scope.binding &&  !angular.equals(ngModel.$viewValue, scope.binding)) {\n                    ngModel.$setViewValue({value:scope.binding.value});\n                }\n            }, \n            true); \n            \n            //4. Wire up callback for $viewValue update --> scope object\n            ngModel.$render = function() {\n                if(!scope.binding) {\n                    scope.binding = {};\n                }\n                if(!angular.equals(ngModel.$viewValue, scope.binding)) {\n                    scope.binding.value = ngModel.$viewValue.value;\n                }\n                \n            };\n            \n            //For a cleaner interface, hightlight something helpful on focus:\n            scope.onFocus = function($event) {\n                var domElem = $event.target;\n                if(domElem.value) {\n                    var rMatch = /(:\\d+)[: ]/.exec(domElem.value);\n                    \n                    if(rMatch) {\n                        var selStart = rMatch.index+1; //just past first colon\n                        var selEnd = rMatch.index + rMatch[1].length;\n                        domElem.setSelectionRange(selStart, selEnd);   \n                    }\n                }\n            };\n        },\n        \n        controller: function($scope) {\n            \n            var displayFormat = $scope.displayFormat;\n            if(!displayFormat) {\n                displayFormat = $scope.displayFormat = 'h:mm a';\n            }\n            \n            var dateFormatter = $filter('date');\n            var iterDate = new Date(1900, 0, 1, 0, 0, 0, 0);\n            \n            $scope.times = [];\n            for(var i=0; i < 24; i++) {\n                $scope.times.push(dateFormatter(iterDate, displayFormat));\n                iterDate.setHours(iterDate.getHours()+1);\n            }\n            \n            \n            \n            $scope.selectTime = function(time) {\n                if(!$scope.binding) {\n                    $scope.binding = {};\n                }\n                $scope.binding.value = time;\n            }\n        }\n    };\n}",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "timeStringEditor",
	"parameters": [
		"uibDateParser",
		"$filter"
	],
	"path": "dbui/core/helper",
	"type": "directive"
},
{
	"__ver": "sys:5",
	"_class": "AngularProvider",
	"_id": "3j9njXR_Qri6Ce8kubk9nw",
	"doc": "\"Helper\" attribute for the image fieldtype editor.  Attaches to a \"file\" html input tag, and converts selected image files to expected json object format (name, type, data, thumbdata), generating the thumbnail and data URL's.",
	"function": "function () {\n\n      var URL = window.URL || window.webkitURL;\n\n      var getResizeArea = function () {\n          var resizeAreaId = 'fileupload-resize-area';\n\n          var resizeArea = document.getElementById(resizeAreaId);\n\n          if (!resizeArea) {\n              resizeArea = document.createElement('canvas');\n              resizeArea.id = resizeAreaId;\n              resizeArea.style.visibility = 'hidden';\n              document.body.appendChild(resizeArea);\n          }\n\n          return resizeArea;\n      };\n\n      var resizeImage = function (origImage) {\n          var maxHeight = 300;\n          var maxWidth = 250;\n\n          var canvas = getResizeArea();\n\n          var height = origImage.height;\n          var width = origImage.width;\n\n          // calculate the width and height, constraining the proportions\n          if (width > height) {\n              if (width > maxWidth) {\n                  height = Math.round(height *= maxWidth / width);\n                  width = maxWidth;\n              }\n          } else {\n              if (height > maxHeight) {\n                  width = Math.round(width *= maxHeight / height);\n                  height = maxHeight;\n              }\n          }\n\n          canvas.width = width;\n          canvas.height = height;\n\n          //draw image on canvas\n          var ctx = canvas.getContext('2d');\n          ctx.drawImage(origImage, 0, 0, width, height);\n\n          return canvas.toDataURL('image/jpg', 0.7);\n      };\n\n      return {\n          restrict: 'A',\n          scope: {\n              imageData: '=',\n              resizeMaxHeight: '@?',\n              resizeMaxWidth: '@?',\n              resizeQuality: '@?',\n              resizeType: '@?',\n          },\n          link: function postLink(scope, element, attrs, ctrl) {\n\n              element.bind('change', function (evt) {\n                //'change' event triggered when a file is selected.\n\n                  var files = evt.target.files;\n                  if(files.length > 0) {\n                    var theFile = scope.file = files[0];\n\n                    var imgObj = {\n                      name: theFile.name,\n                      type: theFile.type\n                    };\n\n                    //Transform it to data url; put it into our imgObj\n                    var reader = new FileReader();\n                    reader.onload = function (e) {\n                        imgObj.data = e.target.result;\n                    };\n                    reader.readAsDataURL(theFile);\n\n                    //Create the thumbnail\n                    var image = new Image();\n\n                    image.onload = function() {\n                        var dataURL = resizeImage(image);\n                        imgObj.thumbData = dataURL;\n                        scope.$apply(function(){\n                          scope.imageData = imgObj;\n                        });\n                    };\n                    image.src = URL.createObjectURL(theFile); //Special way of addressing in-memory objects\n                  }\n              });\n          }\n      };\n  }",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "imageData",
	"parameters": [
	],
	"path": "dbui/core/helper",
	"type": "directive"
},
{
	"__ver": "sys:37",
	"_class": "AngularProvider",
	"_id": "5W1f4vxWTte-kQvjjgpyLA",
	"doc": "Renders a full-featured list of 1st class BusinessObjects, complete w/ pagination and optional search/query.\n@param {string} boClass - class name of BusinessObject's to display\n@param {Perspective} perspective - \"list\" perspective object driving the display\n@param {boolean) enableSearch - if true, a textbox is displayed to allow full text search against displayed data\n@param {boolean} enableQuery - if true, a dbui-query-builder is accessible to provide advanced querying against displayed data (forces enableSearch=true)",
	"function": "function ($timeout, $q, db, NoonI18n, DbuiAction, Config,  Dbui, DbuiPerspectiveEditor, $stateParams, DbuiFieldType, DbuiAlert) {\n  return {\n    templateUrl: 'dbui/reusable/core/object_browser.html',\n    restrict: 'E',\n    scope: {\n      boClass: '<',\n      perspective: '<',\n      enableSearch: '<?',\n      enableQuery: '<?'\n    },\n    \n    \n    controller:function($scope, NoonWebService) {\n        \n        var specialTableActions = {\n            edit_perspective:{\n                label:'Edit Perspective',\n                icon:'fa-list-alt',\n                fn: function(args) {\n                    return DbuiPerspectiveEditor.showEditorDialog($scope.boClass, $scope.perspective, 'list').then($scope.loadData);\n                }\n            },\n            refresh_data:{\n                label:'Refresh Data',\n                icon:'fa-refresh',\n                fn: function(args) {\n                    $scope.loadData();\n                }\n            }\n        };\n        \n        /**\n         * @private\n         * Create a \"stub\" query for typeDescMap\n         */\n        var createStubQuery = function() {\n            var typeDescMap = $scope.typeDescMap;\n            var fieldName = $scope.perspective.fields[0];\n            var td = $scope.typeDescMap[fieldName];\n            \n            \n            var stub = {};\n            \n            var opList = DbuiFieldType.getOpList(td);\n            if(opList && opList.length) {\n                stub[fieldName] = {};\n                stub[fieldName][opList[0].op] = '';\n                return stub;\n            }\n            else {\n                //The passed-in field isn't searchable; so we'll pick another:\n                for(var field in typeDescMap) {\n                    td = typeDescMap[field];\n                    opList = DbuiFieldType.getOpList(td);\n                    if(opList && opList.length) {\n                        stub[field] = {};\n                        stub[field][opList[0].op] = '';\n                        return stub;   \n                    }\n                }\n            }\n        };\n        \n        var className = $scope.boClass;\n        var perspective = $scope.perspective;\n        \n        var BoModel = db[className];\n        $scope.objectMetaData = BoModel._bo_meta_data;\n        $scope.typeDescMap = BoModel._bo_meta_data.type_desc_map;\n        $scope.labels = NoonI18n.getBoLabelGroup(className);\n        \n        \n        $scope.dataArray = [];\n        \n        \n        if(!perspective.sort) {\n            perspective.sort = {};\n        }\n        \n        if(!perspective.pageState) {\n            \n            perspective.pageState = {\n                current:1,\n                pageSize:10,\n                totalRecords:0\n            };\n            \n            Config.getParameter('sys.dbui.defaultPageSize').then(function(defaultPageSize) {\n                perspective.pageState.pageSize = defaultPageSize;\n            });\n            \n        }\n        \n        $scope.pageState = perspective.pageState;\n        \n        \n        var searchPromise = null;\n        var loadData = $scope.loadData = function() {\n            \n            if(searchPromise) {\n                $timeout.cancel(searchPromise);\n                searchPromise = null;\n            }\n            \n            var pageSize = perspective.pageState.pageSize;\n            var currPage = perspective.pageState.current;  //Bound to paginator\n        \n            var sort = perspective.sort;\n            \n            var queryDef = perspective.getEffectiveQuery();\n            var selectObj = {}; //aka projection\n            \n            //Ask only for the fields we're showing\n            for(var i=0; i <  perspective.fields.length; i++) {\n                var f = perspective.fields[i];\n                selectObj[f] = 1;\n            }\n        \n            //Query options: limit, skip, sort, group-by\n            var queryOpts = {limit:pageSize};\n            if(currPage > 1) {\n                queryOpts.skip = (currPage-1)*pageSize;\n            }\n            \n            if(sort) {\n                queryOpts.sort = sort;\n            }\n            \n            if(perspective.groupBy) {\n                queryOpts.groupBy = perspective.groupBy;\n            }\n            \n            var stringifyPromise = queryDef ? Dbui.stringifyQueryClause(queryDef, className) : $q.resolve('');\n            \n            //Do the query!\n            $scope.dataLoading = true;\n            var resultList = BoModel.find(queryDef, selectObj, queryOpts);\n            \n            $scope.dataArray = resultList;\n            $q.all([resultList.$promise, $scope.labels.$promise, stringifyPromise])\n            .then( function(resultArr) {\n                $scope.dataLoading = false;\n                \n                var result = resultArr[0];\n                if(perspective.groupBy) {\n                    var groupByField = perspective.groupBy;\n                    var dataArray = [];\n                    for(var i =0; i < result.length; i++) {\n                        result[i].__group_header = true;\n                        result[i][groupByField] = result[i].group[0][groupByField]; //copy the full value from the first member of the group\n                        dataArray.push(result[i]);\n                        \n                        for(var j=0; j < result[i].group.length; j++) {\n                            dataArray.push(result[i].group[j]);\n                        }\n                    }\n                    \n                    $scope.dataArray = dataArray;\n                }\n                \n                $scope.filterDescription = resultArr[2];\n                \n                var pageState = perspective.pageState;\n                pageState.totalRecords = result.nMatched; //result._meta.nMatched;\n                pageState.totalPages = Math.ceil(pageState.totalRecords/pageState.pageSize);\n                pageState.rangeStart = pageState.pageSize * (pageState.current - 1) + 1;\n                \n                var rangeEnd = pageState.rangeStart + pageState.pageSize - 1;\n                if(rangeEnd > pageState.totalRecords) {\n                    pageState.rangeEnd = pageState.totalRecords;\n                }\n                else {\n                    pageState.rangeEnd = rangeEnd;\n                }\n            },\n            function(err) {\n                $scope.dataLoading=false;\n                console.error('DATA RETRIEVE ERROR:', err);\n                DbuiAlert.danger('Error retrieving data (see log) ');\n            });\n        };\n        \n        $scope.pageChanged = loadData; //Called by paginator event\n        \n        $scope.searchStringChanged = function() {\n            if(searchPromise) {\n                $timeout.cancel(searchPromise);\n            }\n            \n            //execute search half a second after search string stops changing\n            var ss = perspective.searchString;\n            \n            if(ss != null && (ss.length >= 3 || ss === '')) {\n                searchPromise = $timeout(loadData, 500);\n            } \n        };\n        \n        $scope.advancedSearch = function(enable) {\n            perspective.isAdvancedSearch = enable;\n            \n            //If we switch to advanced search, and we don't have a searchQuery already on the scope,\n            // initialize with a stub query\n            if(enable) {\n                if(!perspective.filter) {\n                    perspective.filter = createStubQuery();\n                }\n                \n                perspective.searchString = '';\n            }\n            \n            if(!enable) {\n                perspective.filter = null;\n                loadData();\n            }\n        };\n        \n        $scope.execSearch = function() {\n            loadData();\n        };\n        \n        //The config object for the dbui-object-table:\n        $scope.objectTableConfig = {\n            cellEdit: false,\n            onSort: loadData,\n            aliasActions:specialTableActions\n        };\n        \n        //Do the initial data load:\n        loadData();\n        \n        $scope.saveQuery = function() {\n            //Get a name for the query\n            //is it for me or for everyone?\n            //append it to perspective.savedQueries\n            //save the perspective\n            Dbui.showDialog(\n                'Save Query', \n                'Please provide a description for the saved query.', \n                {name:{type:'string'}}, \n                {layout:['name']}\n            ).then(function(result) {\n                \n                var wsParams = {\n                    title:result.name,\n                    theQuery:perspective.filter,\n                    perspective:perspective.name,\n                    class_name:className\n                };\n                \n                NoonWebService.call('dbui/saveQuery', wsParams).then(function(result) {\n                    // console.log(result);\n                    perspective.savedQueries = result.queryList;\n                });\n            });\n        };\n        \n        $scope.loadQuery = function(q) {\n            perspective.filter = _.cloneDeep(q);\n            loadData();\n        };\n\n    } // end controller definition\n  }\n}",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "dbuiBusinessObjectBrowser",
	"parameters": [
		"$timeout",
		"$q",
		"db",
		"NoonI18n",
		"DbuiAction",
		"NoonConfig",
		"Dbui",
		"DbuiPerspectiveEditor",
		"$stateParams",
		"DbuiFieldType",
		"DbuiAlert"
	],
	"path": "dbui/reusable/core",
	"type": "directive"
},
{
	"__ver": "sys:28",
	"_class": "AngularProvider",
	"_id": "5dJkEI1PRmK41Hh2lw2y_w",
	"doc": "Database access interface.",
	"function": "function ($http, $q, $injector, BusinessObjectModelFactory, TypeDescMap,BusinessObjectLabelGroup) {\n\n  var initPromise = false; //Fulfilled when this factory is fully initialized\n  var modelCache = {};  //Maps both BusinessObjectDef id AND classname to Model object\n  var modelArr = [];\n\n\n  /**\n   * Convience to check/handle errors returned by webservice.\n   * @private\n   **/\n  var handleWsCallError = function(method, md, response) {\n    //An http error code was returned...\n    console.log('ERROR response in ws call '+method, md, response);\n    if(response.data.error)\n      this.reject(response.data.error);\n    else\n      this.reject(response);\n  };\n\n\n  //modelStaticFunctions collection-level data access: find, count, batch update & remove.\n  //  *these functions must be called w/ a this = _bo_meta_data\n  var modelStaticFunctions = {\n\n    /**\n     * @function db.BusinessObjectModel.find\n     * find a set of BusinessObjects\n     *\n     * @param {Object} conditions - query conditions (MongoDb style)\n     * @param {?Object} projection - to include/exclude specific fields (MongoDb style)\n     * @param {?Object} options - sort, limit, skip, group-by\n     * @return {Array} A placeholder array that will be populated by the result objects on completion of call.\n     *                 Contains $promise property that is fulfilled once webservice call is completed.\n     */\n    find:function(conditions, projection, options) {\n      var deferred = $q.defer();\n\n      var returnArr = [];\n      returnArr.$promise = deferred.promise;\n\n      var boMetaData = this._bo_meta_data;\n      // console.log('Executing find: ', boMetaData, conditions, projection, options);\n\n      var wsParams = {\n        where:conditions,\n        select:projection\n      };\n      _.assign(wsParams, options);\n\n      $http({\n        method:'GET',\n        url:'db/'+boMetaData.class_name,\n        params:wsParams\n      }).then(\n\n        function(response) {\n          var responseData = response.data;\n\n          if(responseData.error) {\n            deferred.reject(responseData.error);\n            return;\n          }\n\n          returnArr.nMatched = responseData.nMatched;\n          returnArr._bo_meta_data = boMetaData;\n\n          var MyModel = modelCache[boMetaData.class_name];\n\n          _.forEach(responseData.result || [], function(resultObj) {\n            if(!resultObj.group) {\n                if(resultObj.__t) {\n                    returnArr.push(new modelCache[resultObj.__t](resultObj));\n                }\n                else {\n                    returnArr.push(new MyModel(resultObj));\n                }\n            }\n            else {\n              //Handle group-by\n              var groupObj = {\n                _id: resultObj._id,\n                count: resultObj.count,\n                group:[]\n              };\n              returnArr.push(groupObj);\n              _.forEach(resultObj.group, function(obj) {\n                groupObj.group.push(new MyModel(obj));\n              });\n            }\n          });\n\n          deferred.resolve(returnArr);\n        },\n        handleWsCallError.bind(deferred, 'db.find()', boMetaData)\n      );\n\n      return returnArr;\n    },\n\n    /**\n     * @function db.BusinessObjectModel.findOne\n     * find a single BusinessObject\n     *\n     * @param {Object} conditions - query conditions (MongoDb style)\n     * @param {?Object} projection - to include/exclude specific fields (MongoDb style)\n     * @param {?Object} options - sort, limit, skip, group-by\n     * @return {BusinessObjectModel} A placeholder BusinessObjectModel instance that will be populated by the result object on completion of call.\n     *                 Contains $promise property that is fulfilled once webservice call is completed.\n     */\n    findOne: function(conditions, projection, options) {\n      // console.log('findOne', this, conditions);\n      var deferred = $q.defer();\n\n      var boMetaData = this._bo_meta_data;\n      var MyModel = modelCache[boMetaData.class_name];\n\n      var returnObj = new MyModel();\n      returnObj.$promise = deferred.promise;\n\n      var wsParams = {\n        where:conditions\n      };\n\n      if(projection)\n        wsParams.select = projection;\n      if(options)\n        _.assign(wsParams, options);\n\n      wsParams.limit = 1;\n\n      // console.log('Executing findOne: ', boMetaData, wsParams);\n      $http({\n        method:'GET',\n        url:'db/'+boMetaData.class_name,\n        params:wsParams\n      }).then(\n\n        function(response) {\n          var responseData = response.data;\n\n          if(responseData.error) {\n            deferred.reject(responseData.error);\n            return;\n          }\n\n          if(responseData.result && responseData.result.length > 0) {\n            // _.assign(returnObj, responseData.result[0]);\n            returnObj.initialize(responseData.result[0]);\n            deferred.resolve(returnObj);\n          }\n          else {\n            deferred.resolve(null);\n          }\n        },\n\n        handleWsCallError.bind(deferred, 'db.findOne()', boMetaData)\n      );\n\n      return returnObj;\n    },\n\n    /**\n     * @function db.BusinessObjectModel.count\n     * count a set of BusinessObjects\n     *\n     * @param {Object} conditions - query conditions (MongoDb style)\n     * @return {promise} fulfilled once webservice call is completed; resolves to a number representing count of matching objects.\n     */\n    count: function(conditions) {\n\n    }\n\n  };\n\n  //modelInstanceFunctions - object-level db access: save, remove\n  // called w/ this containing properties\n  var modelInstanceFunctions = {\n    /**\n     * @function db.BusinessObjectModel#save\n     * Create or update 'this' BO\n     * @return {promise} fulfilled once webservice call is completed; resolves to 'this'\n     */\n    save:function() {\n      var deferred = $q.defer();\n      var boMetaData = this._bo_meta_data;\n      var theObject = this;\n      var copyObj = {};\n\n      for(var f in boMetaData.type_desc_map) {\n        copyObj[f] = this[f];\n      }\n      if(this._id) {\n        copyObj._id = this._id;\n      }\n\n\n      $http({\n        method:'POST',\n        url:'db/'+boMetaData.class_name,\n        data:copyObj\n      }).then(\n        function(response) {\n          var responseData = response.data;\n\n          if(responseData.error || !responseData.result) {\n              deferred.reject(responseData.error || 'Object update failed; no result returned');\n              return;\n          }\n\n          _.assign(theObject, responseData.result);\n\n          deferred.resolve(theObject);\n        },\n        handleWsCallError.bind(deferred, 'db.save()', boMetaData)\n      );\n      return deferred.promise;\n    },\n\n    /**\n     * @function db.BusinessObjectModel#remove\n     * delete 'this' BO\n     * @return {promise} fulfilled once webservice call is completed; resolves to ws response result\n     */\n    remove:function() {\n      var deferred = $q.defer();\n      var boMetaData = this._bo_meta_data;\n      var theObject = this;\n\n      if(!theObject._id) {\n        deferred.reject('Unable to delete BusinessObject; missing _id');\n        return deferred.promise;\n      }\n\n      $http({\n        method:'DELETE',\n        url:'db/'+boMetaData.class_name+'/'+theObject._id\n      }).then(\n        function(response) {\n          var responseData = response.data;\n\n          if(responseData.error || !responseData.result) {\n            deferred.reject(responseData.error || 'Object update failed; no result returned');\n            return;\n          }\n\n          deferred.resolve(responseData.result);\n        },\n        handleWsCallError.bind(deferred, 'db.remove()', boMetaData)\n      );\n      return deferred.promise;\n    }\n  };\n\n\n\n  /**\n   * Create the DB Model object for a particular business object definition:\n   * the DB Model is akin to a mongoose model, used to query a particular class of BusinessObject's, and to update/delete objects\n   * @private\n   **/\n  var createAndCacheModel = function(bod) {\n      \n      var instanceMemberFunctions = {};\n      _.assign(instanceMemberFunctions, modelInstanceFunctions);\n      \n      var staticMemberFunctions = {};\n      _.assign(staticMemberFunctions, modelStaticFunctions);\n      \n      if(bod._member_functions) {\n          _.forEach(bod._member_functions, function(mf) {\n              \n              var fnString = mf.function;\n              try {\n                  var parsedFn;\n                  eval(\"parsedFn = \"+fnString);\n                  if(typeof parsedFn !== 'function') {\n                      throw new Error('eval resulted in non-function');\n                  }\n                  \n                  var toAssign;\n                  \n                  if(mf.use_injection) {\n                      toAssign = $injector.invoke(parsedFn);\n                  }\n                  else { \n                      toAssign = parsedFn;\n                  }\n                  \n                  if(mf.is_static) {\n                      staticMemberFunctions[mf.name] = toAssign;\n                  }\n                  else {\n                      instanceMemberFunctions[mf.name] = toAssign;   \n                  }   \n              }\n              catch(err) {\n                  console.error(\"function parse failed\", err);\n              }\n          });\n      }\n      \n      var superModel = null;\n      \n      if(bod.superclass) {\n          superModel = modelCache[bod.superclass._id];\n      }\n      \n      var NewModel = BusinessObjectModelFactory.getConstructor(\n          bod.definition, \n          bod.class_name, \n          bod._field_labels, \n          bod._id, \n          superModel, \n          instanceMemberFunctions, \n          staticMemberFunctions\n      );\n      \n      modelCache[bod._id] = modelCache[bod.class_name] = NewModel;\n      modelArr.push(NewModel);\n  };\n\n\n  modelCache.getModelArr = function() {\n      return modelArr;\n  }\n\n  /**\n   * @function db.init\n   *  Initialize db layer on start-up; calls web service to obtain system metadata, populates the api model objects\n   * @return {promise} fulfilled on completion\n   */\n  modelCache.init = function() {\n\n    if(!initPromise) {\n      console.log('initializing db factory');\n\n      initPromise =\n        $http({\n          method:'GET',\n          url:'ws/dbui/getSysMetadata'\n        }).then(\n\n          function(response) {\n            var responseData = response.data || {};\n\n            if(responseData.error) {\n              throw responseData.error;\n            }\n\n            var bodArray = responseData.result;\n\n            //Get superclasses first on the list\n            bodArray.sort(function(x,y) {\n              if(!y.abstract === !x.abstract) return 0;\n              else if(y.abstract && !x.abstract) return 1;\n              else return -1;\n            });\n\n            _.forEach(bodArray, function(bod) {\n              createAndCacheModel(bod);\n            });\n            \n            TypeDescMap._init(modelCache);\n            BusinessObjectLabelGroup._init(modelCache);\n\n          }\n        );\n\n\n    }\n    return initPromise;\n  };\n  \n  //Return the API for the db layer:\n  return modelCache;\n\n}",
	"module": {
		"_disp": "noonian.api",
		"_id": "NJnfAVnFSmuMcv9voRnaJQ"
	},
	"name": "db",
	"parameters": [
		"$http",
		"$q",
		"$injector",
		"BusinessObjectModelFactory",
		"TypeDescMap",
		"BusinessObjectLabelGroup"
	],
	"path": "noonian/api",
	"type": "factory"
},
{
	"__ver": "sys:3",
	"_class": "AngularProvider",
	"_id": "78XYGLNnRmC6RFphsvfNbw",
	"function": "function (TypeDescMap,BusinessObjectLabelGroup) {\n    \n    var BusinessObjectModelFactory = {};\n    \n    \n    /**\n     * Factory for building a business object model\n     * @param definition\n     * @param name \n     * @param fieldLabels\n     * @param id\n     * @param superModel\n     * @param instanceFunctions\n     * @param modelFunctions\n     */\n    BusinessObjectModelFactory.getConstructor = function(definition, name, fieldLabels, id, superModel, instanceFunctions, modelFunctions) {\n        \n        \n        /**\n         * BusinessObjectModel constructor\n         * This is what will ultimately accessed via the db.XyzBusinessObject API.\n         * @constructor\n         */\n        var BusinessObjectModel = function(initObj) {\n            if(!this || !(this instanceof BusinessObjectModel)) {\n                return new BusinessObjectModel(initObj);\n            }\n            this.initialize(initObj);\n        };\n        \n        //Separate out initialize function to allow constructing a stub that is \n        // populated asynchronously on response from web service\n        Object.defineProperty(BusinessObjectModel.prototype, 'initialize', {\n            enumerable:false,writable:false,\n            value:function(initObj) {\n                var THIS = this;\n                if(initObj) {\n                  this._id = initObj._id;\n                  this.__ver = initObj.__ver;\n                  this.__t = initObj.__t;\n                  \n                  _.forEach(this._bo_meta_data.type_desc_map, function(td, fieldName) {\n                    if(td.construct) {\n                      THIS[fieldName] = td.construct(initObj[fieldName]);\n                    }\n                    else if(initObj.hasOwnProperty(fieldName)) {\n                      THIS[fieldName] = initObj[fieldName];\n                    }\n                  });\n                }\n            }\n        });\n        \n        \n        \n        //Create the _bo_meta_data object\n        var boMetaData = {\n            type_desc_map: new TypeDescMap(definition)\n        };\n        \n        id && (boMetaData.bod_id = id);\n        name && (boMetaData.class_name = name);\n        fieldLabels && (boMetaData.field_labels = new BusinessObjectLabelGroup(boMetaData.type_desc_map, fieldLabels));\n        \n        //Merge in superclass type descriptors\n        if(superModel) {\n            _.merge(boMetaData.type_desc_map, superModel._bo_meta_data.type_desc_map);\n        }\n        \n        \n        var propertyConfig = { enumerable:false, writable:false, value:boMetaData };\n        Object.defineProperty(BusinessObjectModel, '_bo_meta_data', propertyConfig);\n        Object.defineProperty(BusinessObjectModel.prototype, '_bo_meta_data', propertyConfig);\n        \n        \n        //Assign the \"static\" member functions to the constructor\n        if(modelFunctions) {\n            _.forEach(modelFunctions, function(fn, propertyName) {\n                Object.defineProperty(BusinessObjectModel, propertyName, {\n                    enumerable:false, writable:false,\n                    value: fn\n                });\n            });\n        }\n        \n        //Assign \"instance\" member functions to the prototype\n        if(instanceFunctions) {\n            _.forEach(instanceFunctions, function(fn, propertyName) {\n                Object.defineProperty(BusinessObjectModel.prototype, propertyName, {\n                    enumerable:false, writable:false,\n                    value: fn\n                });\n            });\n        }\n        \n        \n        //Wire up _disp getter\n        if(definition._disp) {\n            try {\n                BusinessObjectModel.prototype._disp_template = _.template(definition._disp);\n            }\n            catch(err) {\n                console.error('ERROR COMPILING _disp TEMPLATE for '+name, definition._disp, err);\n            }\n        }\n        \n        Object.defineProperty(BusinessObjectModel.prototype, '_disp', {\n            get: function() {\n                var td = this._bo_meta_data.type_desc_map || {};\n                \n                if(this._disp_template) {\n                    try {\n                        return this._disp_template(this);\n                    }\n                    catch(err) {}\n                }\n                else if(td.name) {\n                    if(this.name) return ''+this.name;\n                }\n                else if(td.key) {\n                    if(this.key) return ''+this.key;\n                }\n                else if(td.title) {\n                    if(this.title) return ''+this.title;\n                }\n                \n                return this._bo_meta_data.class_name+'['+this._id+']';\n            }\n        });\n        \n        \n        //Process composite field types as special subtypes.  To set a composite field value, you must instantiate a special \"sub-model\"\n        _.forEach(boMetaData.type_desc_map, function(td, fieldName) {\n            if(td.type === 'composite' || (td instanceof Array && td[0].type === 'composite') ) {\n                \n                var myTd = td instanceof Array ? td[0] : td;\n                \n                //Define \"sub-model\" constructor to allow for creation of objects that can be assigned to this field\n                BusinessObjectModel[fieldName] = BusinessObjectModelFactory.getConstructor(\n                        myTd.type_desc_map,\n                        name+'#'+fieldName, \n                        fieldLabels ? fieldLabels['#'+fieldName] : null\n                );\n                \n                //TODO: deprecate these construct() functions somehow... \n                //Make constructor accessible via the type descriptor\n                Object.defineProperty(myTd, 'construct', {\n                    enumerable:false, writable:false, value:BusinessObjectModel[fieldName]\n                });\n                \n    \n                if(td instanceof Array) {\n                    Object.defineProperty(td, 'construct', {\n                        enumerable:false, writable:false,\n                        value:function(initArr) {\n                            var thisTd = this[0];\n                            var ret = [];\n                            _.forEach(initArr, function(initObj) {\n                                ret.push(thisTd.construct(initObj));\n                            });\n                            \n                            return ret;\n                        }\n                    });\n                }\n            }\n        });//end type_desc_map iteration\n        \n        Object.freeze(BusinessObjectModel);\n        \n        \n        return BusinessObjectModel;\n    }; //end getConstructor definition\n    \n    \n      \n      \n    return BusinessObjectModelFactory;\n}",
	"module": {
		"_disp": "noonian.api",
		"_id": "NJnfAVnFSmuMcv9voRnaJQ"
	},
	"name": "BusinessObjectModelFactory",
	"parameters": [
		"TypeDescMap",
		"BusinessObjectLabelGroup"
	],
	"path": "noonian/api/internal",
	"type": "factory"
},
{
	"__ver": "sys:31",
	"_class": "AngularProvider",
	"_id": "7UVBjiqKRueVphLN5EtfLg",
	"doc": "Extends the NoonAction service to add DBUI specifics\n1) invokeAction is called w/ perspective and context bo, in addition to actionObj and argsObj.  Parameters are added depending on action type and provided perspective and context bo\n2) when any action returns object w/ 'message', 'error' or 'warning' properties, alert is rendered in UI via DbuiAlert service\n3) when any action returns object w/ 'action' property, action object is invoked, allowing for chaining behavior (e.g. webservice responding w/ re-direct)",
	"function": "function (NoonAction, DbuiAlert, $q, $stateParams, $rootScope, $uibModal, $state, db) {\n\n    var derivedService = Object.create(NoonAction);\n    \n    var dbuiCoreActions = {\n      'new':{\n        label:'New',\n        state:'dbui.create',\n        icon:'fa-plus-square'\n      },\n      'duplicate':{\n        label:'Duplicate',\n        icon:'fa-copy',\n        fn: function(args) {\n            $state.go('dbui.create', {className:args.className, perspective:args.perspective, copyObject:args.targetObj});\n        }\n      },\n      'list':{\n        label:'List',\n        state:'dbui.list',\n        icon:'fa-list'\n      },\n      'folder_list':{\n        label:'List',\n        state:'dbui.folders',\n        icon:'fa-folder-o'\n      },\n      'view':{\n        label:'View',\n        state:'dbui.view',\n        icon:'fa-eye'\n      },\n      'edit':{\n        label:'Edit',\n        state:'dbui.edit',\n        icon:'fa-pencil-square-o'\n      },\n      'delete':{\n        label:'Delete',\n        icon:'fa-times-circle',\n        fn: function(args) {\n          if(window.confirm('Are you sure you wish to delete this record?')) {\n            return args.targetObj.remove().then(function() {\n              $state.go('dbui.list', {className:args.className, perspective:args.perspective});\n            },\n            function(err) {\n              alert('error deleting: '+err);\n            });\n          }\n\n          return null;\n        }\n      },\n      'dialog-view': {\n        label:'View',\n        icon:'fa-eye',\n        fn: function(args) {\n\n          var modalInstance;\n          var scope = $rootScope.$new(true);\n\n          var className = scope.boClass = args.className;\n          var perspectiveName = scope.perspectiveName = args.perspective;\n          var boId = scope.boId = args.targetObj._id || args.targetObj;\n\n          modalInstance = $uibModal.open({\n            templateUrl:'dbui/core/view-dialog.html',\n            controller:'dbui_ViewCtrl',\n            size:'lg',\n            scope: scope,\n            resolve: {\n              theObject: function() {\n                return db[className].findOne({_id:boId}).$promise;\n              },\n              viewPerspective:  function(Dbui) {\n                return Dbui.getPerspective(perspectiveName, className, 'dialog-view');\n              }\n            }\n          });\n        }\n      }\n\n    };\n    \n    /**\n     * DbuiAction.init\n     */\n    derivedService.init = function() {\n        NoonAction.registerAliases(dbuiCoreActions);\n        \n    };\n    \n    \n    \n    /**\n     * DbuiAction.invokeAction\n     * Invokes actionObj, adding in parameters from $stateParams and contextBo.\n     * How contextBo is added to params is dependent on the type of action:\n     *   state and ws actions -> \"id\" is populated w/ contextBo._id \n     *   fn and UiAction actions -> \"targetObj\" is populated w/ contextBo\n     */\n    derivedService.invokeAction = function(perspectiveObj, contextBo, actionObj, argsObj) {\n        \n        // console.log('DbuiAction.invokeAction', perspectiveObj, actionObj, contextBo);\n        if(!actionObj) {\n            throw new Error('null actionObj not allowed');\n        }\n        \n      //Append the standard DBUI params to the action object\n      var params = actionObj.params ? _.clone(actionObj.params) : {};\n      \n      //Always pass className and perspective:\n      if(!params.className) {\n          params.className = $stateParams.className;\n      }\n      if(!params.perspective) {\n          if(perspectiveObj) {\n              params.perspective = perspectiveObj.name;\n          }\n          else {\n              params.perspective = $stateParams.perspective || 'default';  \n          }\n      }\n      \n      \n      //depending on type of action, we add either targetId or targetObj\n      if(actionObj.state || actionObj.ws) {\n          if(contextBo && contextBo._id)\n            params.id = contextBo._id;\n          else\n            params.id = contextBo;\n      }\n      else if(actionObj.fn || actionObj.ui_action) {\n          params.targetObj = contextBo;\n          params.perspectiveObj = perspectiveObj;\n      }\n      \n      \n      //Anything in argsObj supercedes the actionObj.params\n      if(argsObj) {\n          _.assign(params, argsObj);\n      }\n      \n      return NoonAction.invoke(actionObj, params).then(\n          function(result) {\n            if(result) {\n              if(result.error) {\n                // alert(result.error);\n                DbuiAlert.danger(result.error);\n              }\n              \n              if(result.message) {\n                // alert(result.message);\n                DbuiAlert.success(result.message);\n              }\n              \n              if(result.warning) {\n                  DbuiAlert.warning(result.warning);\n              }\n              \n              if(result.action) {\n                  console.log('Chaining action: ', result.action);\n                  return NoonAction.invoke(result.action);\n              }\n            }\n            \n            return result;\n          },\n          function(err) {\n              var msg = 'Error invoking action';\n              console.log('DbuiAction: '+msg, actionObj, err);\n              DbuiAlert.danger(msg+' '+err);\n          }\n\n        );\n    };\n    \n    return derivedService;\n}",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "DbuiAction",
	"parameters": [
		"NoonAction",
		"DbuiAlert",
		"$q",
		"$stateParams",
		"$rootScope",
		"$uibModal",
		"$state",
		"db"
	],
	"path": "dbui/api",
	"type": "factory"
},
{
	"__ver": "sys:15",
	"_class": "AngularProvider",
	"_id": "7jHQrtYKQxSzW_pRHAd9RA",
	"doc": "Controller for sidebar region of DBUI.  Renders menu obtained from Dbui.getSidebarMenu().",
	"function": "function ($scope, NoonAction) {\n\n    $scope.invokeAction = function(actionObj) {\n      NoonAction.invoke(actionObj);\n    };\n}",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "dbui_SidebarCtrl",
	"parameters": [
		"$scope",
		"NoonAction"
	],
	"path": "dbui/core",
	"type": "controller"
},
{
	"__ver": "sys:36",
	"_class": "AngularProvider",
	"_id": "9en21yAeQAOdV_Uxm_C9sQ",
	"doc": "Renders a table of \"BusinessObject-like\" objects\n@param {BusinessObjectLike[]} ngModel - data array that table is bound to\n@param {Perspective} perspective - perspective object driving layout of table and available actions\n@param {Object} objectMetaData - _bo_meta_data describing the objects being displayed\n@param {Object} [config] - extra configuration for driving display and action invocation \n@param {Object} config.aliasActions - map of action aliases to action objects \n@param {Object} config.recordActions - set of actions to make available for each displayed object; these actions are displayed after perspective's recordActions\n@param {Object} config.tableActions - set of actions to make available in the gear menu; these actions are displayed after perspective's tableActions\n@param {boolean|Object} config.cellEdit - if boolean, allow/disallow global cell edit of field values in table.  if Object, maps field name to boolean value (or function)\n@param {Function} [config.onSort] - function called when sorting changes via column header click, after perspective.sort is updated to reflect sort status. if null, sorting is disabled.",
	"function": "function (DbuiAction, NoonI18n) {\n  return {\n    templateUrl: 'dbui/reusable/core/object_table.html',\n    restrict: 'E',\n    scope: {\n      perspective: '<',\n      objectMetaData: '<',\n      config: '<?'\n    },\n    require: 'ngModel',\n\n\n    link: function(scope, element, attrs, ngModelCtrl) {\n\n      //Sync up an objectArray on the scope with ng-model binding.\n\n      //$formatter: formats ng-model value -> $viewValue\n      ngModelCtrl.$formatters.push(function(modelValue){\n        // console.log('ObjectTable: formatting viewValue',modelValue);\n        //We can transform the ng-model value to something we use internally\n        return {vv:modelValue};\n      });\n\n      //$parser: parses $viewValue -> ng-model value\n      ngModelCtrl.$parsers.push(function(viewValue){\n        // console.log('ObjectTable: parsing viewValue', viewValue);\n        //Transform internal value to what ultimately gets assigned to the ng-model value\n        return viewValue.vv;\n      });\n\n      //$watch: our scope -> $viewValue\n      scope.$watch('objectArray', function() {\n        //replace the viewValue object:\n        var newVv = {vv:scope.objectArray};\n        if(!angular.equals(newVv, ngModelCtrl.$viewValue)) {\n            ngModelCtrl.$setViewValue(newVv);\n        }\n      }, true); //deep watch\n\n      //$render: $viewValue -> our scope\n      ngModelCtrl.$render = function() {\n        // console.log('ObjectTable: rendering viewValue to scope:', ngModelCtrl.$viewValue);\n        //scope object can refer directly to the ngModel viewValue (just not the other way around!)\n        scope.objectArray = ngModelCtrl.$viewValue.vv;\n      };\n    },\n    \n    \n    controller: function ($scope) {\n        \n        var perspective = $scope.perspective;\n        var objectMetaData = $scope.objectMetaData;\n        var config = $scope.config || {};\n        \n        $scope.labels = NoonI18n.getBoLabelGroup(objectMetaData.class_name);\n        \n        \n        \n        \n        //////////////////////////////////////////\n        //Data Accessors\n        //////////////////////////////////////////\n        \n        $scope.getValue = function(dataObj, field) {\n            return _.get(dataObj, field);\n        };\n        \n        $scope.getTypeDesc = function(field) {\n            return objectMetaData.type_desc_map.getTypeDescriptor(field);\n        };\n        \n        $scope.getFieldLabel = function(field) {\n            var labels = $scope.labels;\n            \n            if(labels) {\n                return (labels._abbreviated && labels._abbreviated[field]) || labels[field] || field;\n            }\n        \n            return fieldName;\n        };\n        \n        //////////////////////////////////////////\n        // Column Sort/Group\n        //////////////////////////////////////////\n        //TODO sync up to the inital sort definition...\n        \n        $scope.allowSort = !!config.onSort;\n        var columnDecorations = $scope.columnDecorations = {};\n        \n        var sortSeq = {\n            asc:'desc',\n            desc:'none',\n            none:'asc'\n        };\n        \n        var decorationMap = {\n            asc:'fa-chevron-circle-down',\n            desc:'fa-chevron-circle-up',\n            none:''\n        }\n        \n        if(perspective.sort) {\n            var sd = perspective.sort;\n            var sortFields = Object.keys(sd);\n            for(var i=0; i < sortFields.length; i++) {\n                var f = sortFields[i];\n                columnDecorations[f] = decorationMap[sd[f]];\n            }\n        }\n        \n        if(config.onSort && !perspective.sort) {\n            perspective.sort = {};\n        }\n        \n        \n        $scope.colHeaderClick = function($event, field) {\n            var appendTerm = $event.shiftKey;\n            var sd = perspective.sort;\n            var currSortField = sd[field];\n        \n            if(!appendTerm) {\n                var sortFields = Object.keys(sd);\n                for(var i=0; i < sortFields.length; i++) {\n                    var f = sortFields[i];\n                    delete sd[f];\n                    delete columnDecorations[f];\n                }\n            }\n            \n            if(currSortField) {\n                sd[field] = sortSeq[currSortField];\n            }\n            else {\n                sd[field] = sortSeq.none;\n            }\n            \n            columnDecorations[field] = decorationMap[sd[field]];\n        \n            if(sd[field] === 'none') {\n                delete sd[field];\n            }\n        \n            if($scope.perspective.groupBy === field) {\n                $scope.perspective.groupBy = null;\n            }\n            \n            config.onSort();\n        };\n        \n        \n        $scope.colHeaderRightClick = function($event, field) {\n            if(perspective.groupBy === field) {\n                perspective.groupBy = null;\n                columnDecorations[field] = '';\n            }\n            else {\n                perspective.groupBy = field;\n                columnDecorations[field] = 'fa-clone';\n            }\n            \n            config.onSort();\n        };\n        \n        \n        \n        //////////////////////////////////////////\n        // Cell edit\n        //////////////////////////////////////////\n        \n        var globalCellEdit = (config.cellEdit === true);\n        var fieldSpecificEdit = config.cellEdit || {};\n        \n        var allowEdit = $scope.allowEdit = function(field) {\n            return globalCellEdit || fieldSpecificEdit[field];\n        };\n        \n        var editing = {};\n        $scope.editing = function(obj, field) {\n            return obj.$$hashKey === editing.item && field === editing.field;\n        };\n        \n        $scope.cellClicked = function(obj, field) {\n            if(allowEdit(field)) {\n                editing = {\n                    item:obj.$$hashKey,\n                    field:field\n                };\n            }\n        };\n        \n        \n        //////////////////////////////////////////\n        // Action invocatation: used for tableActions, recordActions\n        //////////////////////////////////////////\n        \n        //Pull together recordActions and tableActions\n        var specialActions = config.aliasActions || {};\n        \n        $scope.recordActions = config.recordActions || [];\n        if(perspective.recordActions) {\n            $scope.recordActions = DbuiAction.unaliasActionList($scope.recordActions.concat(perspective.recordActions), specialActions);\n        }\n        \n        $scope.tableActions = config.tableActions || [];\n        if(perspective.tableActions) {\n            $scope.tableActions = DbuiAction.unaliasActionList($scope.tableActions.concat(perspective.tableActions), specialActions);\n        }\n        \n        $scope.invokeRecordAction = function(dataObj, action, index) {\n            //attach extra action \"base parameters\" from actionConfig \n            var params = {index:index, className:objectMetaData.class_name};\n            if(config.baseParams) {\n                _.assign(params, config.baseParams);\n            }\n            \n            \n            //Invoke via DbuiAction, including 'index' parameter\n            return DbuiAction.invokeAction(perspective, dataObj, action, params);\n        };\n        \n        $scope.invokeTableAction = $scope.invokeRecordAction.bind(null, null);\n        \n    }\n  }\n}",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "dbuiObjectTable",
	"parameters": [
		"DbuiAction",
		"NoonI18n"
	],
	"path": "dbui/reusable/core",
	"type": "directive"
},
{
	"__ver": "sys:12",
	"_class": "AngularProvider",
	"_id": "Gh1s8LuGThywzsMA7BIMjg",
	"doc": "The controller for ui-router state dbui.list.",
	"function": "function ($scope, $stateParams, NoonI18n, DbuiAction, listPerspective) {\n    \n    var className = $scope.boClass = $stateParams.className;\n    \n    //Load the labels for this class's fields\n    $scope.labels = NoonI18n.getBoLabelGroup(className);\n    \n    //Put listPerspective (populated in $state object's \"resolve\" block) into scope\n    $scope.listPerspective = listPerspective;\n    \n    // function(perspectiveObj, contextBo, actionObj, argsObj)\n    $scope.invokeAction = DbuiAction.invokeAction.bind(DbuiAction, listPerspective, null);\n    \n    if(listPerspective.actions) {\n        $scope.actionList = DbuiAction.unaliasActionList(listPerspective.actions);\n    }\n    \n    if(listPerspective.title) {\n        $scope.setPageTitle(listPerspective.title);\n    }\n    else {\n        $scope.setPageTitle('List '+className);\n    }\n    \n}",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "dbui_ListCtrl",
	"parameters": [
		"$scope",
		"$stateParams",
		"NoonI18n",
		"DbuiAction",
		"listPerspective"
	],
	"path": "dbui/core/state",
	"type": "controller"
},
{
	"__ver": "sys:17",
	"_class": "AngularProvider",
	"_id": "Hd7vderbSfKfJzks0xJTQg",
	"doc": "The controller for ui-router states dbui.edit and dbui.create",
	"function": "function ($scope, $state, db, DbuiAlert, DbuiAction, NoonI18n, theObject, editPerspective,$rootScope) {\n\n    var className = $scope.boClass = $state.params.className;\n    $scope.theObject = theObject;\n    $scope.editPerspective = editPerspective;\n    var formStatus = $scope.formStatus = theObject._formStatus = {};\n\n    var boId = $scope.boId = theObject && theObject._id;\n    \n    var title; \n    \n    if(boId) {\n        title = 'Edit '+theObject._disp;\n    }\n    else {\n        title = 'New '+className;\n    }\n    \n    $scope.setPageTitle(title);\n    \n    var deRegister = $rootScope.$on('$stateChangeStart', function(event, toState, toParams){\n        if(formStatus.isDirty && !confirm('Are you sure you want to navigate away without saving?')){\n            event.preventDefault();\n        }\n        else {\n            deRegister();\n        }\n    });\n\n    var saveTheObject = function() {\n      console.log('saving object: ', $scope.theObject);\n      \n      $scope.theObject.save().then(\n        function(result) {\n          DbuiAlert.success('Successfully saved '+className+' \"'+result._disp+'\"');\n          formStatus.isDirty = false;\n          \n          if(!boId) {\n            $state.go('dbui.edit', {className:className, id:result._id, perspective:editPerspective.name});\n          }\n        },\n        function(err) {\n          DbuiAlert.danger('Problem saving: '+err);\n        }\n\n      );\n    };\n\n    var revert = function() {\n      if(window.confirm('Are you sure?')) {\n        theObject = $scope.theObject = db[className].findOne({_id:boId});\n        \n        //Need to re-bind the action invoker:\n        $scope.invokeAction = DbuiAction.invokeAction.bind(DbuiAction, editPerspective, theObject);\n      }\n    };\n\n    var specialActions = {\n      save:{\n        label:'Save',\n        icon:'fa-save',\n        fn: saveTheObject\n      },\n      revert:{\n        label:'Revert',\n        icon:'fa-undo',\n        fn: revert\n      }\n    };\n\n\n    $scope.labels = NoonI18n.getBoLabelGroup(className);\n    \n    \n    // function(perspectiveObj, contextBo, actionObj, argsObj)\n    $scope.invokeAction = DbuiAction.invokeAction.bind(DbuiAction, editPerspective, theObject);\n    \n    if(editPerspective.actions) {\n        $scope.actionList = DbuiAction.unaliasActionList(editPerspective.actions);\n    }\n    \n    if(editPerspective.recordActions) {\n        $scope.recordActionList = DbuiAction.unaliasActionList(editPerspective.recordActions, specialActions);\n    }\n\n    \n    if(editPerspective.onLoadAction) {\n        DbuiAction.invokeAction(editPerspective, theObject, editPerspective.onLoadAction);\n    }\n\n  }",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "dbui_EditCtrl",
	"parameters": [
		"$scope",
		"$state",
		"db",
		"DbuiAlert",
		"DbuiAction",
		"NoonI18n",
		"theObject",
		"editPerspective",
		"$rootScope"
	],
	"path": "dbui/core/state",
	"type": "controller"
},
{
	"__ver": "sys:85",
	"_class": "AngularProvider",
	"_id": "I_Fy8QWkTdiSj9Bz3A-jNw",
	"doc": "Library of functions needed in various places within Dbui.",
	"function": "function ($http, $q, $rootScope, NoonWebService,DbuiFieldType, DbuiAction, NoonI18n, db, NoonConfig, $uibModal, DbuiUserPrefs) {\n    \n    \n    /**\n     * Dbui.init\n     */\n    this.init = function() {\n        \n        console.log('initializing Dbui');\n        \n        var instanceName = $rootScope.instanceName = 'NoonianDBUI'; \n        $rootScope.setPageTitle = function(title) {\n            $rootScope.fullPageTitle = instanceName+(title ? ' | '+title : '');\n            $rootScope.pageTitle = title;\n        };\n        \n        NoonConfig.getParameter('sys.instanceName').then(function(cfgName) {\n            if(cfgName) {\n                instanceName = $rootScope.instanceName = cfgName;\n            }\n        });\n        \n        //init the alert queue\n        $rootScope.alertMenu = {\n            alerts:[],\n            newAlerts:[],\n            isOpen:false\n        };\n        \n        return DbuiFieldType.init()\n          .then(DbuiAction.init)\n          .then(DbuiUserPrefs.init)\n          .then(function() {\n            return NoonWebService.call('dbui/getSidebarMenu').then(function(menuMap) {\n                var currMenuKey = $rootScope.currMenuKey = DbuiUserPrefs.getParameter('selected_sidebar_menu') || menuMap._primary;\n                \n                $rootScope.sidebarMenu = menuMap[currMenuKey];\n                $rootScope.sidebarMenuMap = menuMap;\n                var labels = menuMap._labels;\n                var menuList = [];\n                _.forEach(menuMap, function(menuObj, menuKey) {\n                    if(menuKey.indexOf('_') === 0) return;\n                    menuList.push({\n                        key:menuKey,\n                        label:labels[menuKey] || menuKey\n                    });\n                });\n                $rootScope.sidebarMenuList = _.sortBy(menuList, 'label');\n            });\n        });\n    };\n    \n    /**\n     * Dbui.switchSidebarMenu\n     */\n    this.switchSidebarMenu = function(key) {\n        $rootScope.currMenuKey = key;\n        $rootScope.sidebarMenu = $rootScope.sidebarMenuMap[key];\n        DbuiUserPrefs.setParameter('selected_sidebar_menu', key);\n    };\n    \n    /**\n     * Dbui.getNavbarMenu\n     */\n    this.getNavbarMenu = function() {\n        return NoonWebService.call('dbui/getNavbarMenu');\n    };\n    \n    /**\n     * Dbui.stringifyQueryClause\n     */\n    this.stringifyQueryClause = function(queryObj, className) {\n        return NoonWebService.call('dbui/stringifyQuery', {className:className, queryObj:queryObj});\n    };\n    \n    \n    var roleMap;\n    /**\n     * Dbui.getRoleMap\n     */\n    this.getRoleMap = function() {\n        var deferred = $q.defer();\n        \n        if(roleMap) {\n            deferred.resolve(roleMap);\n        }\n        else {\n            db.Role.find({}).$promise.then(function(roles){\n                roleMap = {};\n                _.forEach(roles, function(r) {\n                    roleMap[r._id] = r.name;\n                });\n                deferred.resolve(roleMap);\n            });\n        }\n        \n        return deferred.promise;\n    };\n    \n    \n    /**\n     * perspective.getEffectiveQuery\n     * \n     */\n    var getEffectiveQuery = function() {\n      var textSearch = false;\n\n      //From the text search\n      if(this.searchString) {\n        textSearch = {\n          \"$fulltextsearch\":this.searchString\n        };\n      }\n\n      if(this.filter) {\n        if(textSearch) {\n          return {\"$and\":[\n            textSearch,\n            this.filter\n          ]};\n        }\n        else {\n          return this.filter; //Just the query\n        }\n      }\n      else { //No query...\n        return textSearch || {}; //Just text search, if it exists\n      }\n    };\n    \n    \n    /**\n     * Dbui.normalizeLayout\n     * @private\n     * convert an 'abbreviated' version of a perspective layout (e.g. simple string array of field names)\n     * into 'normalized' layout (array of rows) \n     */\n    var normalizeLayout = this.normalizeLayout = function(layout) {\n      //Crete an array of subsection objects\n      var result = [];\n      var currSection; //refers to the section being built as we iterate\n\n      //First pass: convert into an array of \"subsection\" objects\n      for(var i=0; i < layout.length; i++) {\n        if(angular.isObject(layout[i]) && !angular.isArray(layout[i])) {\n          //it's a non-array object: defines an explicit subsection\n          currSection = null; //stop appending to the current one\n          result.push(layout[i]);\n        }\n        else {\n          if(!currSection) {\n            //We're not currently building a section; initialize\n            currSection = {rows:[]};\n            result.push(currSection);\n          }\n          currSection.rows.push(layout[i]);\n        }\n      }\n\n      //Second pass: convert all row elements to arrays\n      for(i=0; i < result.length; i++) {\n        var sectionRows = result[i].rows || [];\n        for(var j=0; j< sectionRows.length; j++) {\n          if(!angular.isArray(sectionRows[j])) {\n            sectionRows[j] = [ sectionRows[j] ];\n          }\n        }\n      }\n\n      return result;\n    };\n    \n    \n    var perspectiveCache = {}; //cache[name/class/type] = {...}\n    \n    /**\n     * Dbui.getPerspective\n     */\n    this.getPerspective = function(name, className, type) {\n\n      var key = name+'/'+className+'/'+type;\n      \n      if(perspectiveCache[key]) {\n        return $q.resolve(perspectiveCache[key]);\n      }\n      \n      return NoonWebService.call('dbui/getPerspective', {name:name, class_name:className, type:type}).then(function(persp) {\n        // console.log('GetPerspective', key, persp);\n        persp.getEffectiveQuery = getEffectiveQuery;\n        \n        var dotPos = name.indexOf('.');\n        if(dotPos > -1) {\n            persp.name = name.substring(0, dotPos);\n        }\n        else {\n            persp.name = name;\n        }\n\n        if(persp.layout) {\n          persp.layout = normalizeLayout(persp.layout);\n        }\n        \n        //NormalizeLayout for composites' \"sub-perspectives\"\n\n        perspectiveCache[key] = persp;\n        return persp;\n          \n      });\n      \n    };\n    \n    var customPageCache = {};\n    this.getCustomPage = function(key) {\n        \n        var obj = customPageCache[key];\n        \n        if(obj) {\n            return $q.resolve(obj);\n        }\n        else {\n            return NoonWebService.call('dbui/getCustomPage', {key:key}).then(function(resultObj) {\n                if(resultObj) {\n                    customPageCache[key] = resultObj;\n                }\n                return resultObj;\n            });\n        }\n    };\n    \n    \n    /**\n     * Show a dialog to get input from the user.\n     * content of dialog determined by provided type descriptor map and perspective\n     */\n    this.showDialog = function(title, prompt, tdMap, perspective, initObj) {\n        \n        var modalInstance;\n        var scope = $rootScope.$new(true);\n        \n        scope.title = title;\n        scope.prompt = prompt;\n        scope.perspective = perspective;\n        scope.theObject = initObj || {};\n        \n        perspective.layout = normalizeLayout(perspective.layout);\n        \n        scope.theObject._bo_meta_data = {type_desc_map: tdMap};\n        if(!tdMap.getTypeDescriptor) {\n            tdMap.getTypeDescriptor = function(f) {\n                return tdMap[f];\n            };\n        }\n        \n        return $uibModal.open({\n            templateUrl:'dbui/reusable/core/object_editor_dialog.html',\n            size:'lg',\n            scope: scope\n        }).result;\n    };\n      \n    \n    /**\n     *  Used to determine which bootstrap classes should be used when \n     *  displaying forms w/ dynamic column counts\n     */\n    this.columnClasses = {\n          top:[\n            'col-md-12',\n            'col-md-12',\n            'col-md-6',\n            'col-md-4',\n            'col-md-3'\n          ],\n          label:[\n            '',\n            'col-sm-2',\n            'col-sm-4',\n            'col-sm-6',\n            'col-sm-6'\n          ],\n          value:[\n            '',\n            'col-sm-10',\n            'col-sm-8',\n            'col-sm-6',\n            'col-sm-6'\n          ],\n        };\n    \n}",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "Dbui",
	"parameters": [
		"$http",
		"$q",
		"$rootScope",
		"NoonWebService",
		"DbuiFieldType",
		"DbuiAction",
		"NoonI18n",
		"db",
		"NoonConfig",
		"$uibModal",
		"DbuiUserPrefs"
	],
	"path": "dbui/core/api",
	"type": "service"
},
{
	"__ver": "sys:1",
	"_class": "AngularProvider",
	"_id": "Ik05NEwxTJitCXy7seb6rQ",
	"function": "function (Dbui, $uibModal, $rootScope) {\n  return {\n    /**\n     *  Use uibModal to show a datatable alowing the selection of one or multiple BO's\n     **/\n    showDialog: function(theObject, perspective, title) {\n        \n        \n        var modalInstance;\n        var scope = $rootScope.$new(true);\n        \n        scope.title = title || 'Edit '+theObject._bo_meta_data.class_name;\n        scope.theObject = theObject;\n        scope.perspective = perspective;\n\n        modalInstance = $uibModal.open({\n          templateUrl:'dbui/reusable/dialog/object_editor_modal.html',\n          size:'lg',\n          scope: scope\n        });\n        \n        return modalInstance.result;\n    }\n  };\n}",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "DbuiObjectEditorDialog",
	"parameters": [
		"Dbui",
		"$uibModal",
		"$rootScope"
	],
	"path": "dbui/reusable/dialog",
	"type": "factory"
},
{
	"__ver": "sys:5",
	"_class": "AngularProvider",
	"_id": "LsujDPMnQ8aJ268YxHkBPA",
	"doc": "Utility for getting and setting user preferences.",
	"function": "function (NoonConfig, $rootScope) {\n    \n    var PREFS_KEY='sys.user.preferences';\n    var prefs = {};\n    \n    /**\n     * Dbui.init\n     */\n    this.init = function() {\n        console.log('initializing DbuiUserPrefs');\n        \n        return NoonConfig.getParameter(PREFS_KEY).then(function(result) {\n            $rootScope.userPrefs = prefs = result || {};\n        }, \n        function(err) {\n            console.log(err);\n            $rootScope.userPrefs = prefs = {};\n        });\n    };\n    \n    /**\n     * DbuiUserPrefs.get\n     */\n    this.getParameter = function(key) {\n        return prefs[key];\n    };\n    \n    this.setParameter = function(key, val) {\n        prefs[key] = val;\n        return NoonConfig.customizeParameter(PREFS_KEY, prefs);\n    }\n    \n    \n}",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "DbuiUserPrefs",
	"parameters": [
		"NoonConfig",
		"$rootScope"
	],
	"path": "dbui/core/api",
	"type": "service"
},
{
	"__ver": "sys:17",
	"_class": "AngularProvider",
	"_id": "MOV8fi2gT8ySGHQZ4FAT5Q",
	"doc": "Renders a form, according to a perspective, for editing a \"BusinessObject-like\" object.",
	"function": "function (Dbui, I18n) {\n  return {\n      \n    templateUrl: 'dbui/reusable/core/object_editor.html',\n    \n    restrict: 'E',\n    scope: {\n      theObject: '=',  //Object being displayed (a model instance from datsource)\n      perspective: '=',\n      formStatus: '=?'\n    },\n    \n    link:function(scope) {\n        \n        scope.$watch('editorForm.$dirty', function(isDirty) {\n            //Set isDirty to true when we the form becomes dirty;\n            // (unset is done externally)\n            \n            if(scope.formStatus && isDirty) {\n                scope.formStatus.isDirty = true;\n            }\n        });\n        \n        scope.$watch('formStatus.isDirty', function(isDirty) {\n            if(!isDirty) {\n                scope.editorForm.$setPristine();\n            }\n        });\n        \n        //the dbui-field-editor updates linkStatus when it's link function is complete\n        // use that to initialize \"pristine/dirty\" status of the form\n        // (the async stuff in the field editor's link fn seems to make the ngModel dirty/pristine stuff act funky)\n        scope.linkStatus = {};\n        scope.$watch('linkStatus', function(ls) {\n            scope.editorForm.$setPristine();\n            if(scope.formStatus) scope.formStatus.isDirty = false;\n        }, true);\n    },\n    \n    controller:function($scope, $parse) {\n\n      var theObject = $scope.theObject;\n      var perspective = $scope.perspective;\n\n      var className = theObject._bo_meta_data.class_name;\n      \n      $scope.labelGroup = theObject._bo_meta_data.field_labels;\n      \n      $scope.typeDescMap = theObject._bo_meta_data.type_desc_map;\n\n\n      $scope.colClass = Dbui.columnClasses;\n\n      //Set up getter/setter function with ngModel;\n      // allows us to have dotted subfields in the layout,\n      // resulting in editable subfields\n      var getterSetterFn = function(fieldName, value) {\n\n        if(arguments.length > 1) {\n          //called as setter\n          // console.log('setter!!!!!!!', fieldName, value);\n          _.set(theObject, fieldName, value);\n        }\n\n        return _.get(theObject, fieldName);\n\n      };\n\n      var getterSetter = $scope.getterSetter = {};\n\n      //Traverse the normalized layout: section -> rows -> field names\n      _.forEach(perspective.layout, function(section) {\n        _.forEach(section.rows, function(row) {\n          for(var i=0; i < row.length; i++) {\n            var f = row[i];\n            getterSetter[f] = getterSetterFn.bind(null, f);\n          }\n        });\n      });\n\n\n      var fieldCustomizations = perspective.fieldCustomizations || {};\n      var displayCheckers = {};\n      var contextFields = {}; //maps dotted field names present in fieldCustomizations to the base field name\n      \n      \n      var requiredFields = {};\n      var reqExpression = '';\n      var reqChecker;\n      var reqWatcher = function() {\n          $scope.formStatus.isValid = !!reqChecker($scope.theObject);\n      };\n\n      for(var f in fieldCustomizations) {\n        if(fieldCustomizations[f].conditionalDisplay) {\n          displayCheckers[f] = $parse(fieldCustomizations[f].conditionalDisplay);\n          var dotPos = f.indexOf('.');\n          if(dotPos > -1) {\n              contextFields[f] = f.substring(0, dotPos);\n          }\n        }\n        \n        if(fieldCustomizations[f].required) {\n            requiredFields[f] = true;\n            reqExpression += (reqExpression ? ' && ' : '')+f;\n            $scope.$watch('theObject.'+f, reqWatcher);\n        } \n      }\n      \n      if(reqExpression) {\n          reqChecker = $parse(reqExpression);\n      }\n      \n      $scope.isRequired = function(field) {\n          if(!requiredFields[field]) {\n              return false;\n          }\n          else {\n              return !_.get($scope.theObject, field);\n          }\n      };\n\n      $scope.shouldShow  = function(field) {\n          if(!$scope.getTypeDesc(field)) {\n              return false;\n          }\n          var dc = displayCheckers[field];\n          if(!dc) {\n              return true;\n          }\n          else {\n              var context = contextFields[field] ? _.get($scope.theObject, contextFields[field]) : $scope.theObject;\n              return dc(context);\n          }\n      };\n      \n      var tdCache = {};\n      $scope.getTypeDesc = function(field) {\n          if(!tdCache[field]) {\n              tdCache[field] = $scope.typeDescMap.getTypeDescriptor(field);\n          }\n          \n          return tdCache[field];\n      };\n\n    }\n  };\n}",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "dbuiObjectEditor",
	"parameters": [
		"Dbui",
		"NoonI18n"
	],
	"path": "dbui/reusable/core",
	"type": "directive"
},
{
	"__ver": "sys:17",
	"_class": "AngularProvider",
	"_id": "MfFXObZ9SI2eCjqV6lKBmA",
	"doc": "Service to post success/warning/danger notifications to the top-level DBUI.",
	"function": "function ($rootScope, $timeout) {\n    \n    var THIS = this;\n    \n    var closeDbuiAlert = function(alertObj) {\n        var arr = $rootScope.alertMenu.alerts;\n        \n        for(var i=0; i < arr.length; i++) {\n            if(arr[i] === alertObj) {\n                arr.splice(i, 1);\n                break;\n            }\n        }\n        \n        if(arr.length === 0) {\n            $rootScope.alertMenu.isOpen = false;\n        }\n        $rootScope.alertMenu.newAlerts.splice(0, $rootScope.alertMenu.newAlerts.length);\n    };\n    \n    var dismissDbuiAlerts = function() {\n        var arr = $rootScope.alertMenu.alerts;\n        arr.splice(0, arr.length);\n        $rootScope.alertMenu.isOpen = false;\n    };\n    \n    var lastTimeout;\n    \n    this.alert = function(type, message, timeout) {\n        console.log('DbuiAlert.alert', type, message, timeout);\n        if(!$rootScope.closeDbuiAlert) {\n            $rootScope.closeDbuiAlert = closeDbuiAlert;\n            $rootScope.dismissDbuiAlerts = dismissDbuiAlerts;\n        }\n        \n        if(!timeout) {\n            timeout = 5000;\n        }\n        \n        var alertObj = {\n            msg:message,\n            type:type,\n            dismiss_timeout:timeout\n        };\n        \n        // $rootScope.dbui_alerts.push(alertObj);\n        $rootScope.alertMenu.alerts.unshift(alertObj);\n        $rootScope.alertMenu.newAlerts.unshift(alertObj);\n        $rootScope.alertMenu.showQueue = true;\n        \n        \n        if(lastTimeout) {\n            $timeout.cancel(lastTimeout);\n        }\n        \n        lastTimeout = $timeout(function() {\n            $rootScope.alertMenu.showQueue = false;\n            $rootScope.alertMenu.newAlerts.splice(0, $rootScope.alertMenu.newAlerts.length);\n            lastTimeout = false;\n        }, timeout);\n        \n        \n    };\n    \n    this.info = function(msg, timeout) {\n        THIS.alert('info', msg, timeout);\n    };\n    \n    this.success = function(msg, timeout) {\n        THIS.alert('success', msg, timeout);\n    };\n    \n    this.warning = function(msg, timeout) {\n        THIS.alert('warning', msg, timeout);\n    };\n    \n    this.danger = function(msg, timeout) {\n        THIS.alert('danger', msg, timeout);\n    };\n    \n    \n}",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "DbuiAlert",
	"parameters": [
		"$rootScope",
		"$timeout"
	],
	"path": "dbui/api",
	"type": "service"
},
{
	"__ver": "sys:12",
	"_class": "AngularProvider",
	"_id": "NsTdpPyyQhWREbMKoDr5wA",
	"function": "function ($rootScope) {\n    return {\n        templateUrl:'dbui/core/breadcrumbar.html',\n        \n        restrict: 'E',\n        \n        \n        controller:function($scope, $state) {\n            \n            \n            //track \"crumbs\" as \n            var crumbHistory = $scope.crumbHistory = [];\n            var findCrumb = function(s, sp) {\n                for(var i=0; i < crumbHistory.length; i++) {\n                    var c = crumbHistory[i];\n                    if(angular.equals(c.state, s) && angular.equals(c.stateParams, sp)) {\n                        return i;\n                    }\n                }\n                return -1;\n            };\n            \n            $rootScope.$on('$stateChangeSuccess', function(e, toState, toParams, fromState, fromParams) {\n                //console.log(crumbHistory);\n                var existingPos = findCrumb(toState, toParams);\n                if(existingPos > -1) {\n                    $scope.currentCrumb = crumbHistory[existingPos];\n                }\n                else {\n                    var prevCrumb = $scope.currentCrumb || {};\n                    var newCrumb = $scope.currentCrumb = {\n                        state:toState,\n                        stateParams:toParams,\n                        title:$rootScope.pageTitle,\n                        pos:crumbHistory.length\n                    };\n                    \n                    \n                    if(prevCrumb.pos < crumbHistory.length-1) {\n                        var savedPins = [];\n                        for(var i=prevCrumb.pos+1; i < crumbHistory.length; i++ ) {\n                            var curr = crumbHistory[i];\n                            if(curr.pinned) {\n                                savedPins.push(curr);\n                            }\n                        }\n                        console.log('savedPins', savedPins);\n                        \n                        crumbHistory.splice(prevCrumb.pos+1, crumbHistory.length);\n                        \n                        newCrumb.pos = crumbHistory.length\n                        \n                        crumbHistory.push(newCrumb);\n                        \n                        var newPos = crumbHistory.length;\n                        _.forEach(savedPins, function(c) {\n                            c.pos = newPos++;\n                            crumbHistory.push(c);\n                        });\n                        \n                    }\n                    else {\n                        crumbHistory.push(newCrumb);\n                    }\n                    \n                    \n                    \n                }\n            }); \n            \n            $rootScope.$watch('pageTitle', function(newTitle) {\n                if($scope.currentCrumb) {\n                    $scope.currentCrumb.title = newTitle;\n                }\n            });\n            \n            $scope.selected = function(c) {\n                $state.go(c.state, c.stateParams);\n            };\n            \n            $scope.togglepin = function(c) {\n                c.pinned = !c.pinned;\n            };\n        }\n    }\n}",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "breadcrumbBar",
	"parameters": [
		"$rootScope"
	],
	"path": "dbui/core",
	"type": "directive"
},
{
	"__ver": "sys:5",
	"_class": "AngularProvider",
	"_id": "RPBp2C0yRgaHDpMhBYut_Q",
	"doc": "Filter for the \"money\" fieldtype editor.  Renders decimal number, adding in comma separators for thousands and prepending a dollar sign.",
	"function": "function () {\n    return function (value) {\n      if (!value) { return ''; }\n\n      var strVal = ''+value;\n      var dollars = '';\n      var cents = '';\n      var dotPos = strVal.indexOf('.');\n      if(dotPos > -1) {\n        dollars = strVal.substring(0, dotPos);\n        cents = strVal.substring(dotPos+1);\n        while(cents.length < 2) {\n          cents += '0';\n        }\n        cents = '.'+cents;\n      }\n      else {\n        dollars = strVal;\n      }\n\n      //Separate into thousands:\n      var dollarsSep = '';\n      var comma = '';\n      var i = dollars.length;\n\n      while(i-3 >= 0) {\n        var currPiece = dollars.substring(i-3, i);\n        dollarsSep = currPiece+comma+dollarsSep;\n        comma = ',';\n        i-=3;\n      }\n\n      if(i !== 0) {\n        var finalPiece = dollars.substring(0, i);\n        dollarsSep = finalPiece + comma + dollarsSep;\n      }\n\n      return '$'+dollarsSep+cents;\n    };\n  }",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "currencyFormat",
	"parameters": [
	],
	"path": "dbui/core/helper",
	"type": "filter"
},
{
	"__ver": "sys:7",
	"_class": "AngularProvider",
	"_id": "T9gLsPzJT7iKmH1uKk76BQ",
	"doc": "Provides function to display an \"object picker\" modal; notifiaction of selected object is done via callaback.",
	"function": "function (Dbui, $uibModal, $rootScope) {\n  return {\n    /**\n     *  Use uibModal to show a datatable alowing the selection of one or multiple BO's\n     **/\n    showPickerDialog: function(boClass, perspectiveName, selectOne, onSelect) {\n      Dbui.getPerspective(perspectiveName, boClass, 'picker_list').then(function(perspective) {\n\n        var modalInstance;\n        var scope = $rootScope.$new(true);\n        scope.title = 'Please select '+boClass+' below';\n        scope.boClass = boClass;\n        perspective = scope.perspective = _.clone(perspective);\n\n        perspective.recordActions = [{\n          label:'select',\n          icon:'fa-caret-square-o-right',\n          fn: function(args) {\n            if(selectOne) modalInstance.close();\n            onSelect(args.targetObj);\n          }\n        }];\n\n\n        modalInstance = $uibModal.open({\n          templateUrl:'dbui/reusable/dialog/datatable_modal.html',\n          size:'lg',\n          scope: scope\n        });\n      },\n      function(err) {\n        alert(err);\n      }\n      );\n    }\n  };\n}",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "DbuiObjectPicker",
	"parameters": [
		"Dbui",
		"$uibModal",
		"$rootScope"
	],
	"path": "dbui/reusable/dialog",
	"type": "factory"
},
{
	"__ver": "sys:1",
	"_class": "AngularProvider",
	"_id": "UDVo5w53QzeLoqZ6kjTatQ",
	"doc": "Renders a table of \"BusinessObject-like\" objects, oriented so that each object is a column\n@param {BusinessObjectLike[]} ngModel - data array that table is bound to\n@param {Perspective} perspective - perspective object driving layout of table and available actions\n@param {Object} objectMetaData - _bo_meta_data describing the objects being displayed\n@param {Object} [config] - extra configuration for driving display and action invocation",
	"function": "function (DbuiAction, NoonI18n) {\n  return {\n    templateUrl: 'dbui/reusable/core/vertical_table.html',\n    restrict: 'E',\n    scope: {\n      perspective: '<',\n      objectMetaData: '<',\n      config: '<?'\n    },\n    require: 'ngModel',\n\n\n    link: function(scope, element, attrs, ngModelCtrl) {\n\n      //Sync up an objectArray on the scope with ng-model binding.\n\n      //$formatter: formats ng-model value -> $viewValue\n      ngModelCtrl.$formatters.push(function(modelValue){\n        // console.log('ObjectTable: formatting viewValue',modelValue);\n        //We can transform the ng-model value to something we use internally\n        return {vv:modelValue};\n      });\n\n      //$parser: parses $viewValue -> ng-model value\n      ngModelCtrl.$parsers.push(function(viewValue){\n        // console.log('ObjectTable: parsing viewValue', viewValue);\n        //Transform internal value to what ultimately gets assigned to the ng-model value\n        return viewValue.vv;\n      });\n\n      //$watch: our scope -> $viewValue\n      scope.$watch('objectArray', function() {\n        //replace the viewValue object:\n        var newVv = {vv:scope.objectArray};\n        if(!angular.equals(newVv, ngModelCtrl.$viewValue)) {\n            ngModelCtrl.$setViewValue(newVv);\n        }\n      }, true); //deep watch\n\n      //$render: $viewValue -> our scope\n      ngModelCtrl.$render = function() {\n        // console.log('ObjectTable: rendering viewValue to scope:', ngModelCtrl.$viewValue);\n        //scope object can refer directly to the ngModel viewValue (just not the other way around!)\n        scope.objectArray = ngModelCtrl.$viewValue.vv;\n      };\n    },\n    \n    \n    controller: function ($scope) {\n        \n        var perspective = $scope.perspective;\n        var objectMetaData = $scope.objectMetaData;\n        var config = $scope.config || {};\n        \n        var labels = $scope.labels = objectMetaData.field_labels;\n        \n        \n        \n        //////////////////////////////////////////\n        //Data Accessors\n        //////////////////////////////////////////\n        \n        $scope.getValue = function(dataObj, field) {\n            return _.get(dataObj, field);\n        };\n        \n        $scope.getTypeDesc = function(field) {\n            return objectMetaData.type_desc_map.getTypeDescriptor(field);\n        };\n        \n        $scope.getFieldLabel = function(field) {\n            if(labels) {\n                return labels.getLabel(field, true); \n            }\n        \n            return fieldName;\n        };\n        \n        //////////////////////////////////////////\n        // Column Sort/Group\n        //////////////////////////////////////////\n        //TODO sync up to the inital sort definition...\n        \n        $scope.allowSort = !!config.onSort;\n        var columnDecorations = $scope.columnDecorations = {};\n        \n        var sortSeq = {\n            asc:'desc',\n            desc:'none',\n            none:'asc'\n        };\n        \n        var decorationMap = {\n            asc:'fa-chevron-circle-down',\n            desc:'fa-chevron-circle-up',\n            none:''\n        }\n        \n        if(perspective.sort) {\n            var sd = perspective.sort;\n            var sortFields = Object.keys(sd);\n            for(var i=0; i < sortFields.length; i++) {\n                var f = sortFields[i];\n                columnDecorations[f] = decorationMap[sd[f]];\n            }\n        }\n        \n        if(config.onSort && !perspective.sort) {\n            perspective.sort = {};\n        }\n        \n        \n        $scope.colHeaderClick = function($event, field) {\n            var appendTerm = $event.shiftKey;\n            var sd = perspective.sort;\n            var currSortField = sd[field];\n        \n            if(!appendTerm) {\n                var sortFields = Object.keys(sd);\n                for(var i=0; i < sortFields.length; i++) {\n                    var f = sortFields[i];\n                    delete sd[f];\n                    delete columnDecorations[f];\n                }\n            }\n            \n            if(currSortField) {\n                sd[field] = sortSeq[currSortField];\n            }\n            else {\n                sd[field] = sortSeq.none;\n            }\n            \n            columnDecorations[field] = decorationMap[sd[field]];\n        \n            if(sd[field] === 'none') {\n                delete sd[field];\n            }\n        \n            if($scope.perspective.groupBy === field) {\n                $scope.perspective.groupBy = null;\n            }\n            \n            config.onSort();\n        };\n        \n        \n        $scope.colHeaderRightClick = function($event, field) {\n            if(perspective.groupBy === field) {\n                perspective.groupBy = null;\n                columnDecorations[field] = '';\n            }\n            else {\n                perspective.groupBy = field;\n                columnDecorations[field] = 'fa-clone';\n            }\n            \n            config.onSort();\n        };\n        \n        \n        \n        //////////////////////////////////////////\n        // Cell edit\n        //////////////////////////////////////////\n        \n        var globalCellEdit = (config.cellEdit === true);\n        var fieldSpecificEdit = config.cellEdit || {};\n        \n        var allowEdit = $scope.allowEdit = function(field) {\n            return globalCellEdit || fieldSpecificEdit[field];\n        };\n        \n        var editing = {};\n        $scope.editing = function(obj, field) {\n            return obj.$$hashKey === editing.item && field === editing.field;\n        };\n        \n        $scope.cellClicked = function(obj, field) {\n            if(allowEdit(field)) {\n                editing = {\n                    item:obj.$$hashKey,\n                    field:field\n                };\n            }\n        };\n        \n        \n        //////////////////////////////////////////\n        // Action invocatation: used for tableActions, recordActions\n        //////////////////////////////////////////\n        \n        //Pull together recordActions and tableActions\n        var specialActions = config.aliasActions || {};\n        \n        $scope.recordActions = config.recordActions || [];\n        if(perspective.recordActions) {\n            $scope.recordActions = DbuiAction.unaliasActionList($scope.recordActions.concat(perspective.recordActions), specialActions);\n        }\n        \n        $scope.tableActions = config.tableActions || [];\n        if(perspective.tableActions) {\n            $scope.tableActions = DbuiAction.unaliasActionList($scope.tableActions.concat(perspective.tableActions), specialActions);\n        }\n        \n        $scope.invokeRecordAction = function(dataObj, action, index) {\n            //attach extra action \"base parameters\" from actionConfig \n            var params = {index:index, className:objectMetaData.class_name};\n            if(config.baseParams) {\n                _.assign(params, config.baseParams);\n            }\n            \n            \n            //Invoke via DbuiAction, including 'index' parameter\n            return DbuiAction.invokeAction(perspective, dataObj, action, params);\n        };\n        \n        $scope.invokeTableAction = $scope.invokeRecordAction.bind(null, null);\n        \n    }\n  }\n}",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "dbuiVerticalTable",
	"parameters": [
		"DbuiAction",
		"NoonI18n"
	],
	"path": "dbui/reusable/core",
	"type": "directive"
},
{
	"__ver": "sys:5",
	"_class": "AngularProvider",
	"_id": "UEzEc9S3SnidfoZ6EefZqQ",
	"doc": "Factory for $httpProvider.interceptors\nIntercepts angular's http interaction to handle authentication tokens/errors/etc.",
	"function": "function ($q, $cookieStore, $window) {\n    \n  var authToken = null;\n\n  return {\n\n    // Intercept 401s and redirect you to login\n    responseError: function(response) {\n        console.log('AuthInterceptor responseError', response);\n      if(response.status === 401) {\n        console.log('We got a 401 response...');\n        $window.location.reload(true);\n        // $location.url('/login');\n        return response;\n        // remove any stale tokens\n        // $cookieStore.remove('token');\n        //return $q.reject(response);\n      }\n      else {\n        return $q.reject(response);\n      }\n    },\n    setAuthToken:function(newToken) {\n      authToken = newToken;\n      //Placing it in a cookie for the time being, to allow for <img> tags to pass auth info\n      // (this auth intercepter seems to not intercept browser requests for img source,\n      // therefore not setting the Authorization header ... try using ng-src attrbitue??)\n      if(authToken)\n        $cookieStore.put('access_token', authToken);\n      else\n        $cookieStore.remove('access_token');\n    }\n  };\n}",
	"module": {
		"_disp": "noonian.api",
		"_id": "NJnfAVnFSmuMcv9voRnaJQ"
	},
	"name": "NoonAuthInterceptor",
	"parameters": [
		"$q",
		"$cookieStore",
		"$window"
	],
	"path": "noonian/helper",
	"type": "factory"
},
{
	"__ver": "sys:26",
	"_class": "AngularProvider",
	"_id": "V5AIrjQIRVSPYBI5V2zs4w",
	"doc": "Provides interface to handle {@link action object}'s",
	"function": "function ($http, $q, db, $state, $injector, $window, NoonWebService) {\n\n    var errObj = function(key, err) {\n      return {error:'Error invoking action '+key+' - '+err};\n    };\n    var uiActionCache = {};\n\n    var invokeUiAction = function(actionObj, params, thisArg) {\n      var key = actionObj.ui_action;\n      var deferred = $q.defer();\n\n      var queryPromise;\n\n      if(uiActionCache[key]) {\n        queryPromise = $q.when(uiActionCache[key]);\n      }\n      else {\n\n        queryPromise = NoonWebService.call('sys/getUiAction', {key:key}).then(\n          function(actionObj) {\n            \n            if(!actionObj) {\n              return deferred.resolve({error:'No UiAction with key '+key});\n            }\n\n            var fnString = actionObj.function;\n            try {\n              var toCall;\n              eval(\"toCall = \"+fnString);\n              if(typeof toCall === 'function') {\n                uiActionCache[key] = toCall;\n                return toCall;\n              }\n              else {\n                deferred.resolve(errObj(key, \"function parse failed\"));\n              }\n            }\n            catch(err) {\n              deferred.resolve(errObj(key, err));\n            }\n          },\n          function(err) {\n            deferred.resolve(errObj(key, err));\n          }\n        );\n      }\n\n      queryPromise.then(\n        function(actionFn) {\n          if(typeof actionFn === 'function') {\n            try {\n              var callResult = $injector.invoke(actionFn, params);\n              deferred.resolve(callResult);\n              // deferred.resolve(actionFn.call(thisArg, parameters));\n            }\n            catch(err) {\n              deferred.resolve(errObj(key, err));\n            }\n          }\n        });\n\n      return deferred.promise;\n    };\n\n    var invokeWsCall = function(actionObj, params) {\n      var parameters = {};\n      _.assign(parameters, actionObj.params || {}, params || {});\n\n      if(!actionObj.origIcon) {\n        actionObj.origIcon = actionObj.icon;\n      }\n      actionObj.icon = 'fa-spinner fa-spin';\n      return NoonWebService.call(actionObj.ws, parameters).then(function(result){\n\n        actionObj.icon = actionObj.origIcon;\n        return result;\n      });\n    };\n\n    var aliases = {};\n\n    this.invoke = function(actionObj, actionArgs, thisArg) {\n    //   console.log('NoonAction.invoke', actionObj, actionArgs, thisArg);\n      if(typeof actionObj === 'string') {\n        actionObj = aliases[actionObj];\n      }\n\n      if(!actionObj) {\n        var err = 'Invalid actionObj parameter';\n        console.error(err);\n        return $q.reject(err);\n      }\n\n      var passedArgs = {};\n      _.assign(passedArgs, actionObj.params||{}, actionArgs||{});\n\n      if(actionObj.state) {\n        $state.go(actionObj.state, passedArgs);\n        return $q.resolve(true);\n      }\n      else if(actionObj.ui_action) {\n        return invokeUiAction(actionObj, passedArgs, thisArg);\n      }\n      else if(actionObj.ws) {\n        return invokeWsCall(actionObj, passedArgs);\n      }\n      else if(actionObj.fn) {\n        return $q.resolve(actionObj.fn.apply(thisArg || actionObj, [passedArgs]));\n      }\n      else if(actionObj.external) {\n        //TODO allow for parameter substituion via passedArgs\n        return $window.open(actionObj.external);\n      }\n      else {\n        var err = 'Attempted to invoke invalid action';\n        console.error(err, actionObj);\n        return $q.reject(err);\n      }\n    };\n    \n    this.registerAlias = function(alias, actionObj) {\n        \n        if(alias && actionObj) {\n          aliases[alias] = _.clone(actionObj);\n        }\n    };\n    \n    this.registerAliases = function(aliasMap) {\n        _.forEach(aliasMap, function(actionObj, alias) {\n            aliases[alias] = _.clone(actionObj);\n        });\n    };\n    \n    this.unalias = function(aliasString) {\n        return aliases[aliasString];  \n    };\n    \n    this.unaliasActionList = function(actionList, otherAliases) {\n        otherAliases = otherAliases || {};\n        \n        var result = [];\n        _.forEach(actionList, function(a) {\n            if(angular.isString(a)) {\n                var resolved = otherAliases[a] || aliases[a];\n                if(resolved) {\n                    result.push(resolved);\n                }\n            }\n            else {\n                result.push(a);\n            }\n        })\n        \n        return result;\n    };\n\n\n    // return {\n    //   invoke: function(actionObj, thisArg) {\n    //     return invoke(actionObj, null, thisArg);\n    //   },\n\n    //   invokeNow: invoke,\n\n    //   registerAlias: function(alias, actionObj) {\n    //     if(alias && actionObj) {\n    //       aliases[alias] = _.clone(actionObj);\n    //     }\n\n    //   }\n\n    // };\n\n  }",
	"module": {
		"_disp": "noonian.api",
		"_id": "NJnfAVnFSmuMcv9voRnaJQ"
	},
	"name": "NoonAction",
	"parameters": [
		"$http",
		"$q",
		"db",
		"$state",
		"$injector",
		"$window",
		"NoonWebService"
	],
	"path": "noonian/api",
	"type": "service"
},
{
	"__ver": "sys:17",
	"_class": "AngularProvider",
	"_id": "VMylLXsAQSOLI94A-RQgTA",
	"doc": "Provides interface for retrieving internationalized labels.",
	"function": "function (NoonWebService, $q) {\n    \n    var lgCache = {};\n\n    var callAndStub = function(ws, params) {\n        var deferred = $q.defer();\n        var stub = {$promise:deferred.promise};\n        \n        NoonWebService.call(ws, params).then(\n            function(resp) {\n                var result = resp.result;\n                for(var k in result) {\n  \t\t\t\t\tstub[k] = result[k];\n  \t\t\t\t}\n  \t\t\t\t//'fake' an array if needed\n  \t\t\t\tif(result instanceof Array) {\n  \t\t\t\t    stub.length = result.length;\n  \t\t\t\t}\n  \t\t\t\tdeferred.resolve(stub);\n            },\n            \n            function(err) {\n                deferred.reject(err);\n            }\n        );\n        \n        return stub;\n    };\n    \n\n\treturn {\n\t    getLabelGroup: function(key) {\n\t        if(!lgCache[key]) {\n\t            var stub = callAndStub('/sys/i18n/getLabelGroup', {key:key});\n\t            lgCache[key] = stub;\n\t            return stub;\n            }\n            else {\n              return lgCache[key];\n            }\n            \n        },\n        \n        getBoLabelGroup: function(className) {\n            if(!lgCache[className]) {\n\t            var stub = callAndStub('/sys/i18n/getBoLabelGroup', {className:className});\n\t            lgCache[className] = stub;\n\t            return stub;\n            }\n            else {\n              return lgCache[className];\n            }\n          },\n        \n        getEnumerationValues: function(enumName) {\n            var cacheKey = 'enum|'+enumName;\n            if(!lgCache[cacheKey]) {\n                var stub = callAndStub('/sys/i18n/getEnumerationValues', {name:enumName});\n                lgCache[cacheKey] = stub;\n                return stub;\n            }\n            else {\n                return lgCache[cacheKey];\n            }\n        }\n          \n          \n\t};\n\n}",
	"module": {
		"_disp": "noonian.api",
		"_id": "NJnfAVnFSmuMcv9voRnaJQ"
	},
	"name": "NoonI18n",
	"parameters": [
		"NoonWebService",
		"$q"
	],
	"path": "noonian/api",
	"type": "factory"
},
{
	"__ver": "sys:1",
	"_class": "AngularProvider",
	"_id": "VwZdmM7bSeOfdacXJQNeUA",
	"doc": "Binds an angular expression to the right-click of an element",
	"function": "function ($parse) {\n    return function(scope, element, attrs) {\n        var fn = $parse(attrs.onRightClick);\n        element.bind('contextmenu', function(event) {\n            scope.$apply(function() {\n                event.preventDefault();\n                fn(scope, {$event:event});\n            });\n        });\n    };\n}",
	"module": {
		"_disp": "noonian.api",
		"_id": "NJnfAVnFSmuMcv9voRnaJQ"
	},
	"name": "onRightClick",
	"parameters": [
		"$parse"
	],
	"path": "noonian/lib",
	"type": "directive"
},
{
	"__ver": "sys:2",
	"_class": "AngularProvider",
	"_id": "YKldolloSTitGHf7Wz64PQ",
	"doc": "Returns the constructor for a \"BusinessObjectLabelGroup\". Instances provide a getLabel accessor function to recurse into sub-fields\nA BO's _bo_meta_data.field_labels is an instance of BusinessObjectLabelGroup.",
	"function": "function () {\n    var db;\n    \n    /**\n     * Constructor for type descriptor maps: special dynamic versions of BO definitions\n     * @constructor\n     * @param typeDescMap\n     * @param {!Object.<string, Object>} fieldLabels\n     **/\n    var BusinessObjectLabelGroup = function(typeDescMap, fieldLabels) {\n        if(!this || !(this instanceof BusinessObjectLabelGroup)) {\n            return new BusinessObjectLabelGroup(typeDescMap, fieldLabels);\n        }\n        this.__typeDescMap = typeDescMap;\n        _.assign(this, fieldLabels);\n        \n        var myLabels = this;\n        \n        //Process any composites; recursively instantiate BOLabelGroups as appropriate\n        _.forEach(typeDescMap, function(td, fieldName) {\n            if(td.type === 'composite' || (td instanceof Array && td[0].type === 'composite')) {\n                var myTd = td instanceof Array ? td[0] : td;\n                var subLabelgroupKey = '#'+fieldName;\n                if(myTd.type_desc_map &&  myLabels[subLabelgroupKey]) {\n                    myLabels[subLabelgroupKey] = new BusinessObjectLabelGroup(myTd.type_desc_map, myLabels[subLabelgroupKey]);\n                }\n            }\n        });\n    };\n    \n    /**\n     * @private \n     * getTypeDescriptor may need access to db when traversing into reference fields.  \n     * However, simply injecting db as a factory causes a circular depenency.\n     */\n    BusinessObjectLabelGroup._init = function(dbService) {\n        db = dbService;\n    };\n    \n    /**\n     * @function BusinessObjectLabelGroup#getLabel\n     * Retrieves a label for a particular field/sub-field; recursing into composites and references if needed.\n     * @param {string} path can be a simple fieldname or dotted into reference or composite fields, e.g.:\n     *     db.SomeBusinessObj._bo_meta_data.field_labels.getTypeDescriptor('refField.blah');\n     **/\n    Object.defineProperty(BusinessObjectLabelGroup.prototype, 'getLabel', {\n        enumerable:false, writable:false,\n        value:function(path, abbreviated) {\n            var dotPos = path.indexOf('.');\n            \n            if(dotPos === -1) { //no dot -> just a field name\n                if(abbreviated && this._abbreviated && this._abbreviated[path]) {\n                    return this._abbreviated[path];\n                }\n                return this[path] || path;\n            }\n            \n            //Peel off the first piece.\n            var localField = path.substring(0, dotPos);\n            var subPath = path.substring(dotPos+1);\n            \n            var localTd = this.__typeDescMap[localField];\n    \n            if(!localTd) {\n              console.error('invalid fieldname for td', localField, this);\n              return path;\n            }\n            \n            if(localTd instanceof Array && localTd.length > 0) {\n                localTd = localTd[0];\n            } \n            \n            if(localTd.type === 'reference') {\n                //Grab label it from referenced db model\n                var RefModel = db[localTd.ref_class];\n                if(!RefModel) {\n                    console.error('invalid reference class in type descriptor:', this);\n                    return path;\n                }\n                \n                return RefModel._bo_meta_data.field_labels.getLabel(subPath, abbreviated);\n            }\n            else if(localTd.type === 'composite') {\n                var subLabelgroupKey = '#'+fieldName;\n                \n                if(!this.fieldLabels[subLabelgroupKey]) {\n                    console.error('labelgroup missing for composite field', this);\n                    return path;\n                }\n                \n                return this.fieldLabels[subLabelgroupKey].getLabel(subPath, abbreviated);\n            }\n            else {\n              //dotted into a non-reference/composite or a non-existent field:\n              console.log('invalid field specifier for this label group', this, subPath);\n              return path;\n            }\n    \n          } //end function\n      });\n      \n      \n      \n    return BusinessObjectLabelGroup;\n}",
	"module": {
		"_disp": "noonian.api",
		"_id": "NJnfAVnFSmuMcv9voRnaJQ"
	},
	"name": "BusinessObjectLabelGroup",
	"parameters": [
	],
	"path": "noonian/api/internal",
	"type": "factory"
},
{
	"__ver": "sys:12",
	"_class": "AngularProvider",
	"_id": "_28vJLv9Tt6HzXexuNITlA",
	"doc": "Renders a tabbed set of BusinessObject tables related to a particular object.  \n@param {BusinessObject} theObject - the object to whom the displayed tables are related\n@param {string} [perspectiveName=default] - the name of the perspective to use for rendering the tables (can be overridden by individual relatedSpec)\n@param {Object[]} relatedSpec - specify which references to theObject are of interest\n@param {string} relatedSpec[].class - name of BusinessObject class containing reference to theObject\n@param {string} relatedSpec[].field - reference field of interest\n@param {string} [relatedSpec[].perspective] - name of perspective for displaying this",
	"function": "function (Dbui, $q, I18n) {\n  return {\n    templateUrl: 'dbui/reusable/core/relatedviewer.html',\n    restrict: 'E',\n    scope: {\n      theObject: '<',\n      perspectiveName: '<?',\n      relatedSpec: '<'\n    },\n\n    controller:function($scope) {\n\n      var theObject = $scope.theObject;\n      var perspectiveName = $scope.perspectiveName;\n      \n      var className = theObject._bo_meta_data.class_name;\n\n\n      if(!perspectiveName)\n        perspectiveName = $scope.perspectiveName = 'default';\n\n\n      $scope.labels = I18n.getBoLabelGroup(className);\n      $scope.labels.$promise\n      .then(function() {\n          var related = $scope.relatedSpec;\n          \n        //Build up $scope.relatedTables[title,class,perspective]\n        var perspectivePromises = [];\n        for(var i=0; i < related.length; i++) {\n            var usePerspective = related[i].perspective || perspectiveName;\n            perspectivePromises.push(Dbui.getPerspective(usePerspective+'.related['+className+'_'+related[i].field+']', related[i].class, 'list'));\n        }\n\n        $q.all(perspectivePromises).then(function(perspectiveArr) {\n          var relatedTables = $scope.relatedTables = [];\n          for(var i=0; i < perspectiveArr.length; i++) {\n            var r = related[i];  //class and field\n            var rp = perspectiveArr[i]; //full list perspective\n            \n            //since we may have a cached version of the perspective from Dbui.getPerspective, \n            // we need to avoid augmenting the filter multiple times!\n            if(!rp.refFilter) {\n                rp.refFilter = {};\n                \n                //apply it to the filter that will be used by <dbui-business-object-browser> directive\n                if(rp.filter) {\n                    rp.filter = {$and:[rp.refFilter, rp.filter]};\n                }\n                else {\n                    rp.filter = rp.refFilter;\n                }\n            }\n            \n            rp.refFilter[r.field+'._id'] = theObject._id;\n\n            var label = rp.title || $scope.labels['_related_'+r.class+'_'+r.field] || r.class;\n            \n            relatedTables.push({\n              title:label,\n              class:r.class,\n              perspective:rp\n            });\n\n          }\n\n\n        });\n      });\n\n    }\n  };\n}",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "dbuiRelatedViewer",
	"parameters": [
		"Dbui",
		"$q",
		"NoonI18n"
	],
	"path": "dbui/reusable/core",
	"type": "directive"
},
{
	"__ver": "sys:46",
	"_class": "AngularProvider",
	"_id": "dfknFcxcQGWvTrHw0DZcIA",
	"doc": "Service to handle client-side field type and query op stuff: \n- provide accessors and retain a cache of field type \"ui spec\" objects that contain templates/controllers for viewing/editing fields\n- provide mapping of field types to available query op's",
	"function": "function (NoonWebService, NoonI18n, db, $q) {\n    var THIS = this;\n    \n    //Map fieldtype name to appropriate FieldTypeUiSpec object\n    var viewSpecs = {};\n    var editSpecs = {};\n    var viewArrSpecs = {};\n    var editArrSpecs = {};\n    \n    var specMaps = {view:viewSpecs, edit:editSpecs};\n    var arrSpecMaps = {view:viewArrSpecs, edit:editArrSpecs};\n    \n    var queryOpLabels;\n    var queryOpMap = {}; //Map fieldtype name to list of queryop\n    \n    var cachePromises = {}; //keep track of classes for whom we've called cache()\n    \n    /**\n     * DbuiFieldType.init\n     * \n     */\n    this.init = function() {\n        console.log('initializing DbuiFieldType'); \n        \n        //Pull in queryop metadata\n        return NoonWebService.call('dbui/getQueryOpMetadata').then(function(result) {\n            \n            _.forEach(result, function(editorSpec) {\n                _.forEach(editorSpec.types, function(typeName) {\n                   queryOpMap[typeName] = editorSpec.queryops; \n                });\n            });\n            \n        });\n        \n    };\n    \n    /**\n     * \n     * @private\n     */\n    var getTypeName = function(typeDesc) {\n        if(typeDesc instanceof Array) {\n            return typeDesc[0].type+'[]';\n        }\n        else if(typeDesc) {\n            return typeDesc.type;\n        }\n    };\n    \n    var applicableWildcard = function(typeDesc) {\n        return typeDesc instanceof Array ? '*[]' : '*';\n    };\n    \n    /**\n     * DbuiFieldType.cacheTypeInfo\n     * call getFieldTypeMetadata to cache templates/controllers/etc. for a fieldtype or fieldtypes of a specific class\n     * @private\n     */\n    var cacheTypeInfo = function (wsParams, viewEdit) {\n        // console.log('cacheTypeInfo', wsParams, viewEdit);\n        return NoonWebService.call('dbui/getFieldTypeMetadata', wsParams).then(function(resultObj) {\n            \n            _.forEach(resultObj.result, function(specObj) {\n                var typeList;\n                if(specObj.fieldtypes && specObj.fieldtypes.length) {\n                    typeList = specObj.fieldtypes;\n                }\n                else {\n                    typeList = ['*'];\n                }\n                \n                var specMap;\n                if(specObj.for_array) {\n                    specMap = arrSpecMaps[viewEdit];\n                }\n                else {\n                    specMap = specMaps[viewEdit];\n                }\n                \n                _.forEach(typeList, function(typeName) {\n                    // console.log('saving template for ', typeName);\n                    if(!specMap[typeName]) {\n                        specMap[typeName] = {};\n                    }\n                    if(specObj.key.indexOf('dbui.core') === 0) {\n                        specMap[typeName].default = specObj;\n                    }\n                    else {\n                        specMap[typeName][specObj.key] = specObj;\n                    }\n                });\n            });\n            \n        },\n        function(err) {\n            console.error('Bad result for cacheTypeInfo ', wsParams, err);\n        });\n    };\n    \n    /**\n     * Point type name to wildcard spec if type-specific spec isn't cached\n     */\n    var setCacheWildcardIfNeeded = function(typeDesc, viewEdit) {\n        var typeName;\n        var specMap;\n        if(typeDesc instanceof Array) {\n            specMap = arrSpecMaps[viewEdit];\n            typeName = typeDesc[0].type;\n        }\n        else {\n            specMap = specMaps[viewEdit];\n            typeName = typeDesc.type;\n        }\n        \n        if(!specMap[typeName] && specMap['*']) {\n            specMap[typeName] = specMap['*'];\n        }\n    };\n    \n    /** \n     * DbuiFieldType.cacheTypeInfoForFieldtype\n     * Retrieves and caches FieldTypeUiSpec data for fields of specified fieldtype\n     */\n    var cacheTypeInfoForFieldtype = function(typeDesc, viewEdit) {\n        var typeName = getTypeName(typeDesc);\n        var promiseCacheKey = typeName+'|'+viewEdit;\n        \n        if(!cachePromises[promiseCacheKey]) {\n            cachePromises[promiseCacheKey] = cacheTypeInfo( {field_type:typeName,view_or_edit:viewEdit}, viewEdit )\n                .then(setCacheWildcardIfNeeded.bind(null, typeDesc, viewEdit));\n        }\n        \n        return cachePromises[promiseCacheKey];\n    };\n    \n    /** \n     * DbuiFieldType.cacheTypeInfoForClass\n     * Retrieves and caches FieldTypeUiSpec data for fields of specified class\n     */\n    this.cacheTypeInfoForClass = function(className) {\n        if(!cachePromises[className]) {\n            cachePromises[className] = cacheTypeInfo({class_name:className,view_or_edit:'view'}, 'view')\n                .then(cacheTypeInfo.bind(null, {class_name:className,view_or_edit:'edit'}, 'edit'))\n                .then(function() {\n                    var typeDescMap = db[className]._bo_meta_data.type_desc_map;\n                    _.forEach(typeDescMap, function(typeDesc) {\n                        setCacheWildcardIfNeeded(typeDesc, 'view');\n                        setCacheWildcardIfNeeded(typeDesc, 'edit');\n                    });\n                });\n        }\n        return cachePromises[className];\n    };\n    \n    \n    var getSpecFromCache = function(typeDesc, viewEdit) {\n        var typeName;\n        var specMap;\n        if(typeDesc instanceof Array) {\n            specMap = arrSpecMaps[viewEdit];\n            typeName = typeDesc[0].type;\n        }\n        else {\n            specMap = specMaps[viewEdit];\n            typeName = typeDesc.type;\n        }\n        \n        if(specMap[typeName]) {\n           return specMap[typeName];\n        }\n    };\n    \n    /**\n     * DbuiFieldType.getSpec\n     */\n    this.getSpec = function(typeDesc, viewEdit, fieldCustomizations) {\n        var fc = fieldCustomizations || {};\n        var specKey = fc.uiSpec || 'default';\n        \n        \n        var specObj = getSpecFromCache(typeDesc, viewEdit);\n        if(specObj) {\n            return $q.resolve(specObj[specKey]);\n        }\n        \n        //Not cached, retrieve it from server:\n        return cacheTypeInfoForFieldtype(typeDesc, viewEdit).then(function() {\n            return getSpecFromCache(typeDesc, viewEdit)[specKey];\n        });\n        \n    };\n    \n    \n    /**\n     * \n     */\n    var getOpList =\n    this.getOpList = function(typeDesc) {\n        var typeName = getTypeName(typeDesc);\n        if(queryOpMap[typeName]) {\n            return queryOpMap[typeName];\n        }\n        else {\n            var wc = applicableWildcard(typeDesc);\n            if(queryOpMap[wc]) {\n                return queryOpMap[wc];\n            }\n        }\n    };\n    \n    /**\n     * \n     */\n    this.getOpInfo = function(typeDesc, opName) {\n        var opInfoList = getOpList(typeDesc);\n        for(var i=0; i < opInfoList.length; i++) {\n            if(opName === opInfoList[i].op) {\n                return opInfoList[i];\n            }\n        }\n    };\n    \n    \n    \n    \n    var expandRefPlaceholder = function(fieldList, boLabelGroup, denormOnly) {\n        var myPos;\n        for(myPos=0; myPos < fieldList.length ; myPos++) {\n          if(fieldList[myPos] === this)\n            break;\n        }\n        //Remove the placeholder\n        fieldList.splice(myPos, 1);\n\n        //Insert the items for the ref fields\n        var namePrefix = this.fieldName;\n        var refTd = db[this.td.ref_class]._bo_meta_data.type_desc_map;\n\n        var refFieldList = denormOnly ? (this.td.denormalize_fields || []) : Object.keys(refTd);\n\n        for(var i=0; i < refFieldList.length; i++) {\n          var refFieldName = refFieldList[i];\n          var qualifiedSubfield = namePrefix+refFieldName;\n          var fi = {\n            fieldName:qualifiedSubfield,\n            fieldLabel: boLabelGroup[namePrefix.substring(0, namePrefix.length-1)]+'.'+(boLabelGroup[qualifiedSubfield] || refFieldName),\n            td:refTd[refFieldName]\n          };\n\n          fieldList.splice(myPos, 0, fi);\n        }\n\n      };\n      \n    /**\n     * DbuiFieldType.getAugmentedFieldList\n     *  returns a promise -> array of objects describing the fields of bo className\n     *  {\n     *    fieldName:'field name - dotted if ref sub-field',\n     *    fieldLabel:'from i18n getBoLabelGroup, for language of current user',\n     *    td: typedesc object copied from bo metadata\n     *    refPlaceholder: boolean - true if this is a placeholder for a reference field,\n     *    expand: function to expand this placeholder into entries for reference fields\n     *  }\n     **/\n    this.getAugmentedFieldList = function(className, denormOnly, searchableOnly) {\n\n      return NoonI18n.getBoLabelGroup(className).$promise.then(function(boLabelGroup) {\n        var Model = db[className];\n        var typeDescMap = Model._bo_meta_data.type_desc_map;\n        var resultList = [];\n\n        boLabelGroup._abbreviated = boLabelGroup._abbreviated || {};\n\n        for(var f in typeDescMap) {\n          if(f.indexOf('_') === 0)\n            continue;\n          \n          var td = typeDescMap[f];\n          \n          if(searchableOnly && !getOpList(td)) \n            continue;\n\n          \n          var fieldLabel = boLabelGroup._abbreviated[f] || boLabelGroup[f] || f;\n          var fieldInfo = {\n            fieldName:f,\n            fieldLabel:fieldLabel,\n            td:td\n          };\n          resultList.push(fieldInfo);\n\n          if(td.type === 'reference' && (!denormOnly || td.denormalize_fields)) {\n            var fiPlaceholder = {\n              fieldName:f+'.',\n              fieldLabel:fieldLabel+'...',\n              td:td,\n              refPlaceholder:true\n            };\n\n            fiPlaceholder.expand = expandRefPlaceholder.bind(fiPlaceholder, resultList, boLabelGroup, denormOnly);\n            resultList.push(fiPlaceholder);\n          }\n\n        }//end typeDescMap iteration\n\n        resultList.sort(function(a, b) {\n          if (a.fieldLabel < b.fieldLabel)\n            return -1;\n          if (a.fieldLabel > b.fieldLabel)\n            return 1;\n          return 0;\n        });\n\n\n        return resultList;\n      });\n\n\n    };\n    \n\n}",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "DbuiFieldType",
	"parameters": [
		"NoonWebService",
		"NoonI18n",
		"db",
		"$q"
	],
	"path": "dbui/core/api",
	"type": "service"
},
{
	"__ver": "sys:8",
	"_class": "AngularProvider",
	"_id": "eoefRk8MQQqLX-MFLYPdSQ",
	"doc": "Provides wrapper interface to call Noonian WebServices",
	"function": "function ($http, $q) {\n\n    var doCall = function(conf) {\n      var deferred = $q.defer();\n\n      $http(conf).then(\n        function(resp) {\n\n          if(resp.data.error) {\n            deferred.reject(resp.data.error);\n          }\n          else {\n            deferred.resolve(resp.data);\n          }\n        },\n        function(resp) { //An http error code was returned...\n          if(resp.data.error)\n            deferred.reject(resp.data.error);\n          else\n            deferred.reject(resp.data);\n        }\n      );\n\n      return deferred.promise;\n    };\n\n    var massagePath = function(path) {\n    //   if(path.indexOf('/sys/') ===0 )\n    //       return path.substring(5);\n    //     else\n          return 'ws/'+path;\n    }\n\n\n    return {\n\n      call: function(path, params) {\n        return doCall({method:'GET', url:massagePath(path), params:params});\n      },\n\n      post: function(path, params, postObj) {\n        return doCall({method:'POST', url:massagePath(path), params:params, data:postObj});\n      }\n\n    };\n\n  }",
	"module": {
		"_disp": "noonian.api",
		"_id": "NJnfAVnFSmuMcv9voRnaJQ"
	},
	"name": "NoonWebService",
	"parameters": [
		"$http",
		"$q"
	],
	"path": "noonian/api",
	"type": "factory"
},
{
	"__ver": "sys:4",
	"_class": "AngularProvider",
	"_id": "ezSJbZ-NQ52ZgnKLWh1Ebw",
	"doc": "The controller for ui-router state dbui.custompage",
	"function": "function ($scope, $state, $stateParams) {\n    // console.log('dbui_CustomPageCtrl invoked for', $stateParams.resourcePath);\n    // $scope.resourcePath = decodeURIComponent($stateParams.resourcePath);\n    if($stateParams.key) {\n        $scope.pageKey = $stateParams.key;\n    }\n    else {\n        $scope.resourcePath = $stateParams.resourcePath;\n    }\n    \n}",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "dbui_CustomPageCtrl",
	"parameters": [
		"$scope",
		"$state",
		"$stateParams"
	],
	"path": "dbui/core/state",
	"type": "controller"
},
{
	"__ver": "sys:2",
	"_class": "AngularProvider",
	"_id": "hCyhlFUVRg-I67dGF-RcjQ",
	"doc": "",
	"function": "function ($compile, $injector, Dbui) {\n    return {\n      template: '<div></div>',\n      restrict: 'E',\n      \n      scope: {\n        key: '@'\n      },\n      \n      link: function (scope, element, attrs) {\n          var key = scope.key;\n          \n          if(!key) {\n              console.error('Missing typeDesc in dbuiFieldEditor directive');\n              return;\n          }\n          \n          Dbui.getCustomPage(key).then(function(customPageObject){\n              \n              var templateHtml = customPageObject.body;\n              var compiledTemplate = $compile(templateHtml);\n              \n              element.append(compiledTemplate(scope));\n          });\n\n      },\n       \n      controller: function($scope) {\n          \n          Dbui.getCustomPage($scope.key).then(function(customPageObject){\n              \n              if(customPageObject && customPageObject.controller) {\n                  var fnString = customPageObject.controller;\n                  try {\n                      var toCall;\n                      eval(\"toCall = \"+fnString);\n                      if(typeof toCall === 'function') {\n                          return $injector.invoke(toCall, this, {$scope:$scope});\n                      }\n                      else {\n                          console.error('bad controller function for customPage', $scope.key);\n                      }\n                  }\n                  catch(err) {\n                      console.error('bad controller function for customPage', $scope.key, err);\n                  }\n              }\n          \n          });\n      }\n      \n    };\n  }",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "dbuiCustomPage",
	"parameters": [
		"$compile",
		"$injector",
		"Dbui"
	],
	"path": "dbui/core/state",
	"type": "directive"
},
{
	"__ver": "sys:39",
	"_class": "AngularProvider",
	"_id": "jXqx7LOLRl6ZoWUORs8nPA",
	"doc": "Top \"nav bar\" region of DBUI.",
	"function": "function ($rootScope, $scope, $location, $state, db, Auth, Action, Dbui, NoonConfig) {\n\n    $scope.loggedIn = false;\n    $scope.isAdmin = false;\n\n    $scope.appTitle = $rootScope.instanceName;\n    \n    Auth.onLogin( function(evt, userObj) {\n\n      $scope.loggedIn = true;\n      $scope.currentUser = userObj;\n      $scope.isAdmin = userObj.isAdmin;\n\n\n      if($scope.isAdmin) {\n        //TODO: eventually want to allow for non-admin navbar menu!\n        Dbui.getNavbarMenu().then(function(navbarMenu) {\n            $scope.navbarMenu  = navbarMenu;\n        });\n        \n        var pkgConfig;\n        NoonConfig.getParameter('sys.enablePackaging').then(function(value) {\n            $scope.enablePackaging = value;\n            if(value) {\n                db.BusinessObjectPackage.find({}, null, {sort:{name:1}}).$promise.then(function(result) {\n                $scope.pkgList = [{key:false, name:'*none*'}].concat(result);\n        \n                db.Config.findOne({key:'sys.currentPackage'}).$promise.then(function(cfgObj) {\n                    pkgConfig = cfgObj;\n                    for(var i=0; i < $scope.pkgList.length; i++)\n                      if($scope.pkgList[i].key == pkgConfig.value) {\n                        $scope.currPkg = $scope.pkgList[i];\n                      }\n                  });\n                });\n                \n            }\n        });\n        \n        \n        $scope.switchPkg = function(pkg) {\n          pkgConfig.value = pkg.key;\n          pkgConfig.save().then(function() {\n            $scope.currPkg = pkg;\n          },\n          function(err) {\n            alert('Problem saving change: '+err);\n          });\n        };\n        \n      }\n\n\n      //Redirect to home if we're looking at the login screen:\n      if($location.path() === '/login')\n        $location.path('/');\n    });\n\n    Auth.onLogout( function() {\n      $scope.loggedIn = false;\n      $scope.isAdmin = false;\n    });\n\n\n    $scope.isCollapsed = false;\n\n\n    $scope.logout = function() {\n      Auth.logout();\n      window.location.reload();\n    };\n\n    $scope.isActive = function(stateName) {\n      return stateName === $state.$current.name;\n    };\n    \n    \n    $scope.switchMenu = Dbui.switchSidebarMenu;\n\n    $scope.invokeAction = function(action) {\n        $scope.boMenuOpen = false;\n      Action.invoke(action);\n    };\n    \n    $scope.appTitleRightClick = function() {\n        var myUrl = $location.absUrl();\n        window.open(myUrl);\n    };\n    \n    $scope.toggleSidebar = function() {\n        $rootScope.sidebarCollapsed = !$rootScope.sidebarCollapsed;    \n    };\n  }",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "dbui_NavbarCtrl",
	"parameters": [
		"$rootScope",
		"$scope",
		"$location",
		"$state",
		"db",
		"NoonAuth",
		"NoonAction",
		"Dbui",
		"NoonConfig"
	],
	"path": "dbui/core",
	"type": "controller"
},
{
	"__ver": "sys:3",
	"_class": "AngularProvider",
	"_id": "mZ9F54oASxS70Cwk1eodeA",
	"function": "function ($parse, $http) {\n    return {\n      restrict: 'A',\n      link: function(scope, element, attrs) {\n        var model = $parse(attrs.attachmentUploader);\n        var modelSetter = model.assign;\n\n        scope.initiateUpload = function() {\n          element.click();\n        }\n\n        element.bind('change', function() {\n          scope.$apply(function() {\n            //A file has been selected\n\n            var file = element[0].files[0];\n\n            var metaObj = {\n              filename:file.name,\n              size:file.size,\n              type:file.type\n            };\n\n            var fd = new FormData();\n            fd.append('metadata', JSON.stringify(metaObj));\n            fd.append('file', file);\n\n            scope.uploading = true;\n\n            var httpConfig = {\n              transformRequest: angular.identity,\n              headers: {'Content-Type': undefined}\n            };\n\n            var uploadWs = 'attachment_ws/upload';\n            if(scope.typeDesc.mode) {\n              uploadWs += '?mode='+scope.typeDesc.mode+'&resource_path='+(scope.typeDesc.resource_path || '');\n            }\n\n            $http.post(uploadWs, fd, httpConfig)\n            .then(function(result) {\n              scope.uploading = false;\n\n              modelSetter(scope, result.data.result);\n            },\n            function(err) {\n              console.log(err);\n            });\n          });\n        });\n\n        scope.clearFile = function() {\n          element[0].value = '';\n        }\n      }\n    };\n  }",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "attachmentUploader",
	"parameters": [
		"$parse",
		"$http"
	],
	"path": "dbui/core/helper",
	"type": "directive"
},
{
	"__ver": "sys:5",
	"_class": "AngularProvider",
	"_id": "pc0Bq49iSFq_OCgsejPoWQ",
	"doc": "The controller for ui-router state dbui.home",
	"function": "function ($scope, Config, Action) {\n    //Get the config parameter\n    $scope.loading = true;\n    Config.getParameter('sys.dbui.homeAction').then(\n      function(homeAction) {\n        Action.invoke(homeAction);\n      },\n      function(err) {\n        $scope.loading = false;\n        console.log(err);\n        $scope.message = \"Home action not properly configured. Be sure to set config parameter 'dbui.homeAction'\";\n      }\n    );\n  }",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "dbui_HomePageCtrl",
	"parameters": [
		"$scope",
		"NoonConfig",
		"NoonAction"
	],
	"path": "dbui/core/state",
	"type": "controller"
},
{
	"__ver": "sys:20",
	"_class": "AngularProvider",
	"_id": "q1yaFwgcR2WQu8xUaySIlw",
	"doc": "A graphical tool for building a query against a specific business object class.  It allows construction of (a) ANDed together groups of ORed terms, and (b) ORed together groups of ANDed terms.\n\nQuery object bound via ngModel.\n\n@todo allow switching to a \"raw\" mode - json object editor - to allow manual typing of arbitrary query",
	"function": "function (DbuiFieldType, db) {\n    return {\n      templateUrl: 'dbui/reusable/core/querybuilder.html',\n      restrict: 'E',\n      scope: {\n        boClass: '<', //The full field name -> type descriptor map (definition from BusinessObjectDef)\n        onClose: '&'\n      },\n      require: 'ngModel',\n\n      link: function(scope, element, attrs, ngModel) {\n        \n\n            \n        var oppositeConj = {$and:'$or', $or:'$and'};\n\n        var isCompatibleQuery = function(query) {\n          //TODO: make sure query is one outer and/or containing opposite terms\n          // if incompatible -> viewValue is {plainQuery:'...'}, edited w/ object editor.\n        };\n\n        var isConjunction = function(key) {\n          return !!oppositeConj[key];\n        };\n\n        var getKey = function(term) {\n          var keyArr = Object.keys(term);\n          if(keyArr.length === 0)\n            return null;\n          else\n            return keyArr[0];\n        };\n        \n        //Normalize queries that use the shorthand \"$and\", e.g.\n        // {field1:cond, field2:cond2} -> {$and:[{field1:cond},{field2:cond2}]}\n        var longhandAnd = function(queryObj) {\n            var keyArr = Object.keys(queryObj);\n            if(keyArr.length > 1) {\n                var termArr = [];\n                _.forEach(keyArr, function(k) {\n                    var t = {};\n                    t[k] = queryObj[k];\n                    termArr.push(t);\n                });\n                return {$and:termArr};\n            }\n            else {\n                return queryObj;\n            }\n        };\n\n\n        //$formatter: query -> $viewValue\n        ngModel.$formatters.push(function(queryObj) {\n        //   console.log('QB: formatting this query to viewValue: ', queryObj);\n\n          if(!queryObj)\n            return null;\n            \n          queryObj = longhandAnd(queryObj);    \n\n          var outerKey = getKey(queryObj);\n\n          if(!outerKey)\n            return {};\n\n          if(!isConjunction(outerKey)) {\n            //Single term query -> one clauseGroup consisting of the solitary term\n            return {clauseGroups:[[queryObj]]};\n          }\n\n          //Now we know we're dealing w/ an and/or query...\n          var vv = {};\n          var outerTerms = queryObj[outerKey];\n\n          //... but are there multiple clause groups?\n          var multiGroup = false;\n          for(var i=0; i < outerTerms.length; i++) {\n             var innerKey = getKey(outerTerms[i]);\n             if(isConjunction(innerKey)) {\n              multiGroup = true;\n              vv.outerConj = outerKey;\n              vv.innerConj = innerKey;\n              break;\n             }\n          }\n\n          if(!multiGroup) {\n            vv.inerConj = outerKey;\n            vv.outerConj = oppositeConj[outerKey];\n            //outerTerms should be pulled into one clause expression:\n            vv.clauseGroups = [outerTerms];\n          }\n          else {\n            //multi group: each item in outerTerms is treated as one clauseGroup\n            vv.clauseGroups = [];\n            for(var i=0; i < outerTerms.length; i++) {\n              var innerKey = getKey(outerTerms[i]);\n              if(isConjunction(innerKey)) {\n                var innerTerms = outerTerms[i][innerKey];\n                vv.clauseGroups.push(innerTerms);\n              }\n              else {\n                vv.clauseGroups.push([outerTerms[i]]);\n              }\n            }\n          }\n          // console.log('...resulting vv: ', vv);\n          return vv;\n\n        });\n\n        //$parser: $viewValue -> query term\n        ngModel.$parsers.push(function(vv) {\n          // console.log('QB: parsing view value: ', vv);\n          if(!vv || !vv.clauseGroups)\n            return null;\n\n          if(vv.plainQuery)\n            return vv.plainQuery;\n\n          //Single term:\n          if(vv.clauseGroups.length == 1 && vv.clauseGroups[0].length == 1) {\n            return vv.clauseGroups[0][0];\n          }\n\n\n          //Turn clauseGroups into a query!\n          var query = {};\n          var outerTerms = query[vv.outerConj] = [];\n\n          for(var i=0; i < vv.clauseGroups.length; i++) {\n            var clauseGroup = vv.clauseGroups[i];\n            if(clauseGroup.length == 1) {\n              outerTerms.push(clauseGroup[0]);\n            }\n            else {\n              var innerClause = {};\n              innerClause[vv.innerConj] = clauseGroup;\n              outerTerms.push(innerClause);\n            }\n          }\n\n          // console.log('...resulting query: ', outerTerms.length===1 ? outerTerms[0] : query);\n\n          if(outerTerms.length == 1)\n            return outerTerms[0]; // don't need the outer conj\n          else\n            return query;\n        });\n\n        //$watch: our scope -> $viewValue\n        // watch via function due to complexity of watching an array of arrays...\n        // this function flattens all objects in to a single array for angular to examine\n        var flattenedClauseGroups = function() {\n          var cg = scope.queryModel ? scope.queryModel.clauseGroups : null;\n          if(!cg)\n            return null;\n\n          var flattened = [];\n          for(var i=0; i < cg.length; i++) {\n            for(var j=0; j < cg[i].length; j++) {\n              flattened.push(cg[i][j]);\n            }\n          }\n          return flattened;\n        };\n\n        scope.$watchCollection(flattenedClauseGroups, function() {\n          var qm = scope.queryModel ? scope.queryModel: {};\n          var vv = {\n            outerConj:qm.outerConj,\n            innerConj:qm.innerConj,\n            clauseGroups:qm.clauseGroups,\n            plainQuery:qm.plainQuery\n          };\n          // console.log('QB scope model changed; updating vv:', vv);\n          ngModel.$setViewValue(vv);\n        }, true );\n\n        //$render: $viewValue -> our scope\n        ngModel.$render = function() {\n          // console.log('QB: rendering this viewValue to scope:',ngModel.$viewValue);\n          var vv = ngModel.$viewValue;\n\n          //WTF: Fix viewvalue - innerConj for some reason goes away when i added stateStorage to the dataTable\n          if(vv.outerConj && !vv.innerConj)\n            vv.innerConj = oppositeConj[vv.outerConj];\n          if(vv.innerConj && !vv.outerConj)\n            vv.outerConj = oppositeConj[vv.innerConj];\n\n          scope.queryModel = ngModel.$viewValue;\n        };\n\n      },\n\n      controller: function($scope) {\n          \n        DbuiFieldType.getAugmentedFieldList($scope.boClass, true, true).then(function(fieldList) {\n            $scope.fieldList = fieldList;\n        });\n        \n        var typeDescMap = db[$scope.boClass]._bo_meta_data.type_desc_map;\n\n        var oppositeConj = {$and:'$or', $or:'$and'};\n        $scope.conjLabels = {$and:'and', $or:'or'};\n\n        //Acertain some info to create a sensible \"default\" query when new terms are added\n        var allFields = Object.keys(typeDescMap);\n        allFields.sort();\n        for(var i=0; i < allFields.length; i++) {\n          var td = typeDescMap[allFields[i]];\n          var opList = td && DbuiFieldType.getOpList(td);\n          \n          if(td && allFields[i].indexOf('$') !== 0 &&\n            allFields[i].indexOf('_') !== 0 && opList) {\n\n            $scope.stubField = allFields[i];\n            $scope.stubQueryClause = {};\n            $scope.stubQueryClause[opList[0].op]='';\n            break;\n          }\n        }\n\n        var newStubQuery = function() {\n          //Copy from clausegroup[0][0]\n          var copyFrom = $scope.queryModel.clauseGroups[0][0];\n          var stub = {};\n          for(var k in copyFrom) {\n            if(k.indexOf('$$') === -1)\n              stub[k] = copyFrom[k];\n          }\n          // console.log('copy from:', copyFrom);\n          // console.log('new stub query:', stub);\n          return stub;\n        };\n\n        //Add a new term to a clauseGroup\n        $scope.newTerm = function(clauseGroup, conj) {\n          var qm = $scope.queryModel;\n          if(conj) {\n            qm.innerConj = conj;\n            qm.outerConj = oppositeConj[conj];\n          }\n          clauseGroup.push(newStubQuery());\n        };\n\n        //Add a new clauseGroup to the query\n        $scope.newClauseGroup = function() {\n          var qm = $scope.queryModel;\n          qm.clauseGroups.push([newStubQuery()]);\n        };\n\n        $scope.removeTerm = function(clauseGroup, index) {\n          var cg = $scope.queryModel.clauseGroups;\n\n          if(clauseGroup.length === 1) {\n            for(var i=0; i < cg.length; i++) {\n              if(cg[i] === clauseGroup) {\n                cg.splice(i, 1);\n                break;\n              }\n            }\n          }\n          else {\n            clauseGroup.splice(index, 1);\n          }\n\n          if(cg.length === 1 && cg[0].length === 1)\n            $scope.queryModel.outerConj = $scope.queryModel.innerConj = null;\n\n          if(cg.length === 0) {\n            $scope.onClose();\n          }\n        };\n\n\n      }\n    };\n  }",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "queryBuilder",
	"parameters": [
		"DbuiFieldType",
		"db"
	],
	"path": "dbui/reusable/core",
	"type": "directive"
},
{
	"__ver": "sys:6",
	"_class": "AngularProvider",
	"_id": "qo19scAPQ1OlMmbEWlceMg",
	"doc": "Provides interface to handle authentication, login/logout, tokens/cookies, ...",
	"function": "function ($rootScope, $http, $q, db, $state, $cookies, AuthInterceptor) {\n\n    var currentUser = null;\n    var authToken = null;\n    var initPromise = false;\n    \n    return {\n      init: function() {\n        if(initPromise)\n          return initPromise;\n    \n        console.log('initializing Auth');\n        var authToken = $cookies.get('access_token');\n    \n        if(authToken) {\n          //we have an auth token -\n          // send it to auth/login webservice to retreive user data\n    \n          var deferred = $q.defer();\n          initPromise = deferred.promise;\n    \n          $http.post('auth/login', {}).then(\n            function(resp) {\n              var responseObj = resp.data;\n              if(responseObj.error) {\n                deferred.reject(responseObj.error);\n              }\n              else {\n                authToken = responseObj.token;\n                AuthInterceptor.setAuthToken(authToken);\n                currentUser = responseObj.user;\n                deferred.resolve(true);\n                $rootScope.$emit('login', currentUser);\n              }\n            },\n            function(err) {\n              var responseObj = err.data;\n              if(responseObj) {\n                err = responseObj.error;\n              }\n              deferred.reject(err);\n            }\n          );\n    \n        }\n        else {\n          //No auth token...\n          initPromise = $q.resolve(true);\n        }\n    \n        return initPromise;\n      },\n    \n      login: function(username, password, remember) {\n        var deferred = $q.defer();\n        var paramObj = {username:username, password:password};\n        $http.post('auth/login', paramObj).then(\n          function(resp) {\n            var responseObj = resp.data;\n            if(responseObj.error) {\n              deferred.reject(responseObj.error);\n            }\n            else {\n              authToken = responseObj.token;\n              AuthInterceptor.setAuthToken(authToken);\n              currentUser = responseObj.user;\n              deferred.resolve(true);\n              $rootScope.$emit('login', currentUser);\n            }\n          },\n          function(err) {\n            var responseObj = err.data;\n            if(responseObj) {\n              err = responseObj.error;\n            }\n            deferred.reject(err);\n          }\n        );\n    \n        return deferred.promise;\n      },\n    \n      logout: function() {\n        currentUser = null;\n        authToken = null;\n        AuthInterceptor.setAuthToken(authToken);\n        $rootScope.$emit('logout');\n      },\n    \n      newUser: function() {\n    \n      },\n    \n      changePassword: function(newPassword) {\n        var deferred = $q.defer();\n        var paramObj = {password:newPassword};\n        $http.post('auth/changePassword', paramObj).then(\n          function(resp) {\n            var responseObj = resp.data;\n            if(responseObj.error) {\n              deferred.reject(responseObj.error);\n            }\n            else {\n              deferred.resolve(responseObj.result);\n            }\n          },\n          function(err) {\n            var responseObj = err.data;\n            if(responseObj) {\n              err = responseObj.error;\n            }\n            deferred.reject(err);\n          }\n        );\n    \n        return deferred.promise;\n      },\n    \n      isLoggedIn: function() {\n        return currentUser !== null;\n      },\n    \n      getCurrentUser: function() {\n        return currentUser;\n      },\n    \n      onLogin: function(fn) {\n        $rootScope.$on('login',fn);\n        if(currentUser !== null) {\n          fn(null, currentUser);\n        }\n      },\n    \n      onLogout: function(fn) {\n        $rootScope.$on('logout',fn);\n      }\n    \n    \n    \n    };\n    \n}",
	"module": {
		"_disp": "noonian.api",
		"_id": "NJnfAVnFSmuMcv9voRnaJQ"
	},
	"name": "NoonAuth",
	"parameters": [
		"$rootScope",
		"$http",
		"$q",
		"db",
		"$state",
		"$cookies",
		"NoonAuthInterceptor"
	],
	"path": "noonian/api",
	"type": "factory"
},
{
	"__ver": "sys:3",
	"_class": "AngularProvider",
	"_id": "qt1-hwnEQmum-4hvi9O-Aw",
	"doc": "Formats a telephone number to (xxx) xxx-xxxx",
	"function": "function () {\n    return function (tel) {\n      if (!tel) { return ''; }\n\n      var value = tel.toString().replace(/^\\+/, '');\n\n      if (value.match(/[^0-9]/)) {\n        return tel.replace(/\\D/g,''); // removes anything not a number\n      }\n\n      var country, city, number;\n\n      switch (value.length) {\n        case 10: // +1PPP####### -> C (PPP) ###-####\n          country = 1;\n          city = value.slice(0, 3);\n          number = value.slice(3);\n          break;\n\n        case 11: // +CPPP####### -> CCC (PP) ###-####\n          country = value[0];\n          city = value.slice(1, 4);\n          number = value.slice(4);\n          break;\n\n        case 12: // +CCCPP####### -> CCC (PP) ###-####\n          country = value.slice(0, 3);\n          city = value.slice(3, 5);\n          number = value.slice(5);\n          break;\n\n        default:\n          return tel;\n      }\n\n      if (country == 1) {\n          country = '';\n      }\n\n      number = number.slice(0, 3) + '-' + number.slice(3);\n\n      return (country + ' (' + city + ') ' + number);\n    };\n  }",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "phoneFormat",
	"parameters": [
	],
	"path": "dbui/core/helper",
	"type": "filter"
},
{
	"__ver": "sys:81",
	"_class": "AngularProvider",
	"_id": "shz0lNmSRhWP9DjcWypp7A",
	"doc": "Uses ngModel to bind to an object's field value; utilizes the type descriptor to dynamically decide what kind of editor to display.",
	"function": "function ($compile, $injector, DbuiFieldType) {\n    return {\n        // template:'<div ng-include src=\"fieldTemplateUrl\"></div>',\n        template:'<div></div>',\n        restrict: 'E',\n        \n        require:'ngModel',\n        \n        scope: {\n            typeDesc: '<',\n            elemId: '<',\n            fieldCustomizations: '<?', //From perspective.field_customizations\n            contextObject: '<?', \n            linkStatus: '=?'\n        },\n        \n        link: function(scope, iElement, iAttributes, ngModel) {\n            \n            var td = scope.typeDesc;\n            if(!td) {\n                console.error('Missing typeDesc in dbuiFieldEditor directive');\n                return;\n            }\n            \n            \n            DbuiFieldType.getSpec(td, 'edit', scope.fieldCustomizations).then(function(specObj){\n                \n                if(!specObj) {\n                    console.error('Missing UI Spec in dbuiFieldEditor directive');\n                    return;\n                }\n                \n                //First, load up the proper type-specific template from DbuiFieldType service, \n                // get it compiled and attached to this directive:\n                var childTemplate = specObj.template; \n                iElement.html($compile(childTemplate)(scope));\n                \n                //Next, handle custom linkage logic for type-specific UI Spec\n                var performNgModelSetup = true; //Type-specific link can override our default ng-model binding.\n                \n                    \n                if(specObj.link_fn) {\n                    \n                  //This fieldtype has a 'link' function defined: \n                  //  returns true if we should go ahead and set up default ngModel binding  \n                  //     (lets the child simply update scope.binding.value)\n                  //  returns false if it already took care of it \n                  //     (it set up some fancy custom ng-model setup for its own purposes)\n                  \n                  var fnString = specObj.link_fn;\n                  try {\n                      var toCall;\n                      eval(\"toCall = \"+fnString);\n                      if(typeof toCall === 'function') {\n                          performNgModelSetup = $injector.invoke(toCall, this, \n                            {scope:scope, iElement:iElement, iAttributes:iAttributes, ngModel:ngModel}\n                            );\n                      }\n                      else {\n                          console.error('bad link function for typeDesc', td);\n                      }\n                  }\n                  catch(err) {\n                      console.error('bad link function for typeDesc', td, err);\n                  }\n                  \n                }\n                \n                \n                if(performNgModelSetup) {\n                    //Perform the 'default' ngModel setup: child template/controller can just assign to scope object binding.value\n                    // \"modelValue\" is the object that is ultimately assigned to whatever our parent put in the ng-model directive\n                    // \"$viewValue\" is the representation we manipulate internally; in this default case it's just a wrapper around modelValue\n                    \n                    //Four parts to setting it up:\n                    \n                    //1. Wire up converter for ng-model object --> internal $viewValue representation\n                    ngModel.$formatters.push(function(modelValue) {\n                        //  console.log('dbuiFieldEditor: formatting viewValue',modelValue);\n                        return {value:modelValue};\n                    });\n                    \n                    //2. Wire up converter for internal $viewValue representation --> ng-model object\n                    ngModel.$parsers.push(function(viewValue) {\n                        //  console.log('dbuiFieldEditor: parsing viewValue', viewValue);\n                        return viewValue.value;\n                    });\n                    \n                    //3. Wire up trigger for scope object --> $viewValue\n                    scope.$watch('binding', function() {\n                        //  console.log('dbuiFieldEditor: detected change in scope.binding:', scope.binding);  \n                        //must *replace* the viewValue object in order for change to propogate to ng-model!\n                        if(scope.binding && scope.binding.value !== ngModel.$viewValue.value) {\n                            ngModel.$setViewValue({value:scope.binding.value});\n                        }\n                    }, \n                    true); //deep watch... TODO performace issue to deep watch all field values???\n                    \n                    //4. Wire up callback for $viewValue update --> scope object\n                    ngModel.$render = function() {\n                        //  console.log('dbuiFieldEditor: rendering viewValue to scope.binding:', ngModel.$viewValue);\n                        \n                        if(!scope.binding) {\n                            scope.binding = {};\n                        }\n                        //scope object can refer directly to the ngModel viewValue (just not the other way around!)\n                        scope.binding.value = ngModel.$viewValue.value;\n                    };\n                    \n                }\n                \n                /* ngModel setup is now complete.  However, it was done asyncronously (having waited for \n                 * the DbuiFieldType.getSpec() promise) so its $viewValue may already contain data that has\n                 * yet to be rendered...\n                 */\n                 if(typeof ngModel.$render === 'function') {\n                     //Simulate the standard ngModel sequence\n                     var initValue = ngModel.$viewValue;\n                     _.forEach(ngModel.$formatters, function(formatter) {\n                        if(typeof formatter === 'function') {\n                            initValue = formatter(initValue);\n                        }\n                     });\n                     ngModel.$setViewValue(initValue);\n                     ngModel.$render();\n                     ngModel.$setPristine();\n                 }\n                 \n                 scope.linkStatus = true;\n            });\n            \n        },\n        \n      \n      controller: function($scope) {\n          \n          DbuiFieldType.getSpec($scope.typeDesc, 'edit', $scope.fieldCustomizations).then(function(specObj){\n              \n              if(specObj && specObj.controller_fn) {\n                  var fnString = specObj.controller_fn;\n                  try {\n                      var toCall;\n                      eval(\"toCall = \"+fnString);\n                      if(typeof toCall === 'function') {\n                          return $injector.invoke(toCall, this, {$scope:$scope});\n                      }\n                      else {\n                          console.error('bad controller function for typeDesc', $scope.typeDesc);\n                      }\n                  }\n                  catch(err) {\n                      console.error('bad controller function for typeDesc', $scope.typeDesc, err);\n                  }\n              }\n          });\n          \n          \n      }\n      \n    };\n  }",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "dbuiFieldEditor",
	"parameters": [
		"$compile",
		"$injector",
		"DbuiFieldType"
	],
	"path": "dbui/reusable/core",
	"type": "directive"
},
{
	"__ver": "sys:1",
	"_class": "AngularProvider",
	"_id": "u6OrdVlHSr2vYyTi3nfoqQ",
	"doc": "Returns the constructor for \"type descriptor maps\"; instances are constructed w/ BusinessObjectDef definitions mapping field name to type descriptor, producing a \"live\" TypeDescMap providing a getTypeDescriptor function to recurse into sub-fields\nThe _bo_meta_data.type_desc_map is an instance of TypeDescMap.",
	"function": "function () {\n    var db;\n    \n    /**\n     * Constructor for type descriptor maps: special dynamic versions of BO definitions\n     * @constructor\n     * @param {!Object.<string, Object>} fieldToTd A plain object version of the typeDesc map\n     **/\n    var TypeDescMap = function(fieldToTd) {\n        if(!this || !(this instanceof TypeDescMap)) {\n            return new TypeDescMap(fieldToTd);\n        }\n        \n        _.assign(this, fieldToTd);\n        \n        //Recursively Object-ify type_desc_map's stashed in any composite td's\n        for(var fieldName in fieldToTd) {\n            if(this[fieldName].type_desc_map) {\n                this[fieldName].type_desc_map = new TypeDescMap(this[fieldName].type_desc_map);\n            }\n            else if(this[fieldName] instanceof Array && this[fieldName].length > 0 && this[fieldName][0].type_desc_map) {\n                this[fieldName][0].type_desc_map = new TypeDescMap(this[fieldName][0].type_desc_map);\n            }\n        }\n    };\n    \n    /**\n     * @private \n     * getTypeDescriptor may need access to db when traversing into reference fields.  \n     * However, simply injecting db as a factory causes a circular depenency.\n     */\n    TypeDescMap._init = function(dbService) {\n        db = dbService;\n    };\n    \n    /**\n     * @function TypeDescMap#getTypeDescriptor\n     * Retrieves a type descriptor for a particular field/sub-field; recursing into composites and references if needed.\n     * @param {string} path can be a simple fieldname or dotted into reference or composite fields, e.g.:\n     *     db.SomeBusinessObj._bo_meta_data.getTypeDescriptor('refField.blah');\n     **/\n    Object.defineProperty(TypeDescMap.prototype, 'getTypeDescriptor', {\n        enumerable:false, writable:false,\n        value:function(path) {\n            var dotPos = path.indexOf('.');\n            \n            if(dotPos === -1) { //no dot -> just a field name\n                return this[path];\n            }\n            \n            var localField = path.substring(0, dotPos);\n            var subPath = path.substring(dotPos+1);\n    \n            var localTd = this[localField];\n    \n            if(!localTd) {\n              console.error('invalid fieldname for td', localField, this);\n              return null;\n            }\n            \n            if(localTd instanceof Array && localTd.length > 0) {\n                localTd = localTd[0];\n            } \n            \n            if(localTd.type === 'reference') {\n                var RefModel = db[localTd.ref_class];\n                if(!RefModel) {\n                    console.error('invalid reference class in type descriptor:', localTd);\n                    return null;\n                }\n                \n                return RefModel._bo_meta_data.type_desc_map.getTypeDescriptor(subPath);\n            }\n            else if(localTd.type === 'composite') {\n                var subTd = localTd.type_desc_map;\n                if(!subTd) {\n                    console.error('composite type descriptor missing child type_desc_map', localTd);\n                }\n                \n                return subTd.getTypeDescriptor(subPath);\n            }\n            else {\n              //dotted into a non-reference or a non-existent field:\n              console.log('invalid field specifier for this type descriptor', this, subPath);\n              return null;\n            }\n    \n          } //end function\n      });\n      \n      \n      \n    return TypeDescMap;\n}",
	"module": {
		"_disp": "noonian.api",
		"_id": "NJnfAVnFSmuMcv9voRnaJQ"
	},
	"name": "TypeDescMap",
	"parameters": [
	],
	"path": "noonian/api/internal",
	"type": "factory"
},
{
	"__ver": "sys:8",
	"_class": "AngularProvider",
	"_id": "uIn4BYTnSuqQpF8sCTAiCQ",
	"doc": "Provides function to display a \"perspective editor\" modal; binds to perspective object whose field list is being edited.",
	"function": "function ($uibModal, $rootScope) {\n    \n    var perspectiveEditorController = function ($scope, $timeout, $q, db,  NoonI18n,  DbuiFieldType) {\n        var className = $scope.className;\n        var perspectiveObj = $scope.perspectiveObj;\n        var labels = NoonI18n.getBoLabelGroup(className);\n        \n        var fieldList = $scope.fieldList = perspectiveObj.fields;\n        \n        var availableFields;\n        var availableFieldMap = {};\n        var indexAvailableFields = function() {\n            for(var i=0; i< availableFields.length; i++) {\n                availableFieldMap[availableFields[i].fieldName] = availableFields[i];\n            }\n        };\n        \n        \n        DbuiFieldType.getAugmentedFieldList(className, true).then(function(fieldInfoList) {\n            availableFields = $scope.availableFields = fieldInfoList;\n            indexAvailableFields();\n            \n            for(var i=0; i< fieldList.length; i++) {\n                var fi = availableFieldMap[fieldList[i]];\n                if(fi) {\n                    fi.included = true;\n                }\n                else if(fieldList[i].indexOf('.') > -1) {\n                    //need to expand a ref field...\n                    var dotPos = fieldList[i].indexOf('.');\n                    var fieldName = fieldList[i].substring(0, dotPos+1);\n                    fi = availableFieldMap[fieldName];\n                    \n                    if(fi) {\n                        fi.expand();\n                        indexAvailableFields();\n                        i--;\n                        continue;\n                    }\n                }\n            }\n        });\n        \n        $scope.selectedIndex = -1;\n        \n        $scope.addField = function(fieldInfo) {\n            if(!fieldInfo.refPlaceholder) {\n                fieldInfo.included = true;\n                fieldList.push(fieldInfo.fieldName);\n                $scope.selectedIndex = fieldList.length - 1;\n            }\n            else {\n                fieldInfo.expand();\n                indexAvailableFields();\n            }\n        };\n        \n        $scope.moveUp = function() {\n            var idx = $scope.selectedIndex;\n            var obj = fieldList[idx];\n            fieldList.splice(idx, 1); //Remove from it's current position\n            fieldList.splice(idx-1, 0, obj); //insert it one higher\n        \n            $scope.selectedIndex--;\n        };\n        $scope.moveDown = function() {\n            var idx = $scope.selectedIndex;\n            var obj = fieldList[idx];\n            fieldList.splice(idx, 1); //Remove from it's current position\n            fieldList.splice(idx+1, 0, obj); //insert it one lower\n        \n            $scope.selectedIndex++;\n        };\n        \n        $scope.remove = function(index) {\n            var fieldName = fieldList[index];\n            fieldList.splice(index, 1);\n            availableFieldMap[fieldName].included = false;\n            if(index === $scope.selectedIndex) {\n                $scope.selectedIndex = -1;\n            }\n        };\n        \n        $scope.selectedForMove = function(fieldIndex) {\n            return fieldIndex === $scope.selectedIndex;\n        };\n        \n        $scope.selectForMove = function(fieldIndex) {\n            $scope.selectedIndex = fieldIndex;\n        };\n        \n        $scope.canMoveUp = function() {\n            return $scope.selectedIndex > 0;\n        };\n        \n        $scope.canMoveDown = function() {\n            return $scope.selectedIndex >= 0 && $scope.selectedIndex < fieldList.length -1;\n        };\n        \n        $scope.getFieldLabel = function(fieldName) {\n            return (labels._abbreviated  && labels._abbreviated[fieldName]) || labels[fieldName] || fieldName;\n        };\n    };\n    \n    \n    /**\n     * DbuiPerspectiveEditor.showEditorDialog()\n     * \n     * @param {string} className - name of the business object class to whom the perspective applies\n     * @param {Perspective} perspectiveObj - object whose fields are being edited\n     * @param {string} perspectiveType - type (list, edit, view, ...)\n     * @return the uibModal \"result\" promise, resolved when the dialog is closed.\n     * \n     */\n    this.showEditorDialog = function(className, perspectiveObj, perspectiveType) {\n        \n        var modalInstance;\n        var scope = $rootScope.$new(true);\n        \n        scope.title = 'Edit Perspective for '+className;\n        scope.className = className;\n        scope.perspectiveObj = perspectiveObj;\n        scope.perspectiveType = perspectiveType;\n        \n        return $uibModal.open({\n            templateUrl:'dbui/reusable/dialog/perspective_editor.html',\n            size:'lg',\n            scope: scope,\n            controller:perspectiveEditorController\n        }).result;\n    \n    };\n        \n}",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "DbuiPerspectiveEditor",
	"parameters": [
		"$uibModal",
		"$rootScope"
	],
	"path": "dbui/reusable/dialog",
	"type": "service"
},
{
	"__ver": "sys:3",
	"_class": "AngularProvider",
	"_id": "wwX1-_BxSYWYOQdMBcUTjw",
	"doc": "The controller for ui-router state dbui.folders",
	"function": "function ($scope, $stateParams, NoonI18n, DbuiAction, folderPerspective) {\n    \n    var className = $scope.boClass = $stateParams.className;\n    \n    //Load the labels for this class's fields\n    // $scope.labels = NoonI18n.getBoLabelGroup(className);\n    \n    //Put folderPerspective (populated in $state object's \"resolve\" block) into scope\n    $scope.folderPerspective = folderPerspective;\n    \n    // function(perspectiveObj, contextBo, actionObj, argsObj)\n    $scope.invokeAction = DbuiAction.invokeAction.bind(DbuiAction, folderPerspective, null);\n    \n    if(folderPerspective.actions) {\n        $scope.actionList = DbuiAction.unaliasActionList(folderPerspective.actions);\n    }\n    \n    if(folderPerspective.title) {\n        $scope.setPageTitle(folderPerspective.title);\n    }\n    else {\n        $scope.setPageTitle('Folders '+className);\n    }\n\n}",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "dbui_FoldersCtrl",
	"parameters": [
		"$scope",
		"$stateParams",
		"NoonI18n",
		"DbuiAction",
		"folderPerspective"
	],
	"path": "dbui/core/state",
	"type": "controller"
},
{
	"__ver": "sys:4",
	"_class": "AngularProvider",
	"_id": "xsxZe1yRTb6jFJtSSTF3mQ",
	"function": "function () {\n  return {\n    template:'<span></span>',\n    restrict:'E',\n    scope: {\n      indent: '='\n    },\n    link: function (scope, element) {\n      if(scope.indent > 0) {\n        var indentAmt = 30*scope.indent;\n        element.append('<i style=\"padding-left:'+indentAmt+'px\"></i>');\n      }\n    }\n  };\n}",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "dbuiIndentSpacer",
	"parameters": [
	],
	"path": "dbui/core/helper",
	"type": "directive"
},
{
	"__ver": "sys:8",
	"_class": "AngularProvider",
	"_id": "zLrdPMCOSMuj44EGALgmDw",
	"doc": "Renders a view of a \"BusinessObject-like\" object according to a perspective.",
	"function": "function ($parse, Dbui, NoonI18n) {\n  return {\n    templateUrl: 'dbui/reusable/core/object_viewer.html',\n    restrict: 'E',\n    scope: {\n      theObject: '=',\n      perspective: '='\n    },\n    \n    controller: function($scope) {\n      var theObject = $scope.theObject;\n      var perspective = $scope.perspective;\n    \n      var className = theObject._bo_meta_data.class_name;\n      \n      $scope.labelGroup = theObject._bo_meta_data.field_labels;\n      \n      $scope.typeDescMap = theObject._bo_meta_data.type_desc_map;\n    \n      $scope.colClass = Dbui.columnClasses;\n    \n    \n      var fieldCustomizations = perspective.fieldCustomizations || {};\n      var displayCheckers = {};\n      var contextFields = {};\n    \n      for(var f in fieldCustomizations) {\n        if(fieldCustomizations[f].conditionalDisplay) {\n          displayCheckers[f] = $parse(fieldCustomizations[f].conditionalDisplay);\n          var dotPos = f.indexOf('.');\n          if(dotPos > -1) {\n              contextFields[f] = f.substring(0, dotPos);\n          }\n        }\n      }\n    \n      $scope.shouldShow  = function(field) {\n    \n        var dc = displayCheckers[field];\n    \n        if(!dc){\n          var fieldValue = theObject[field];\n          if(angular.isArray(fieldValue)) {\n            return fieldValue.length > 0;\n          }\n          else {\n            return fieldValue != null;\n          }\n        }\n        else  {\n          var context = contextFields[field] ? _.get($scope.theObject, contextFields[field]) : $scope.theObject;\n          return dc(context);\n        }\n      };\n    }\n  };\n}",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "dbuiObjectViewer",
	"parameters": [
		"$parse",
		"Dbui",
		"NoonI18n"
	],
	"path": "dbui/reusable/core",
	"type": "directive"
},
{
	"__ver": "sys:8",
	"_class": "AngularProvider",
	"_id": "zyR-OIZhQqmy70eVOj7twg",
	"doc": "Renders a list of \"BusinessObject-like\" objects in a hierarchical tree defined by a \"path\" type field on the objects.\n\n@todo refactor to be like object-list directive - bound via ngModel to a list of business objects, with \"path\" object as a parameter.",
	"function": "function ($timeout, $q, db, NoonI18n, DbuiAction, NoonWebService) {\n  return {\n    templateUrl: 'dbui/reusable/core/object_treelist.html',\n    restrict: 'E',\n    scope: {\n      boClass: '=',\n      perspective: '='\n    },\n    \n    controller: function($scope) {\n        \n          var collapse = function() {\n            this.expanded = false;\n        \n            if(this.children) {\n              for(var i=0; i < this.children.length; i++) {\n                this.children[i].collapse();\n              }\n            }\n          };\n        \n        \n          /** \n           * Generates a list of objects that represent the flattened path tree.\n           */\n          var createPathElements = function(prefix, indent, parent, prefixMap, elemArray) {\n            var infoObj = prefixMap[prefix];\n        \n            var pathPieces = prefix.split($scope.pathSeperator);\n        \n            //First push my row...\n            var me = {disp:pathPieces[pathPieces.length-1], prefix:prefix, count:infoObj.count, indent:indent, parent:parent, collapse:collapse};\n            elemArray.push(me);\n        \n            //... then my children\n            if(infoObj.children) {\n              me.children = [];\n              for(var i=0; i < infoObj.children.length; i++) {\n                var child = infoObj.children[i];\n                me.children.push(\n                  createPathElements(child, indent+1, me, prefixMap, elemArray)\n                );\n              }\n            }\n        \n            return me;\n        \n          };\n          \n          var boClass = $scope.boClass;\n          var objectMetaData = db[boClass]._bo_meta_data;\n          var perspective;\n        \n        \n          $scope.labels = NoonI18n.getBoLabelGroup($scope.boClass);\n          \n          //Query stuff\n          var queryOpts = {}, selectObj = {};\n        \n          $scope.$watch('perspective', function() {\n            if(!$scope.perspective) return;\n        \n            perspective = $scope.perspective;\n            \n            if(perspective.sort) {\n              queryOpts.sort = perspective.sort;\n            }\n            \n            //Ask only for the fields we're showing\n            for(var i=0; i <  perspective.fields.length; i++) {\n                var f = perspective.fields[i];\n                selectObj[f] = 1;\n            }\n            \n            if(perspective.recordActions) {\n                $scope.recordActionList = DbuiAction.unaliasActionList(perspective.recordActions);\n            }\n            \n            $scope.filterDef = perspective.filter || {};\n        \n            $scope.dispFields = perspective.fields;\n            $scope.pathField = perspective.pathField;\n            $scope.viewField = perspective.viewField;\n        \n            $scope.pathSeperator = objectMetaData.type_desc_map.getTypeDescriptor($scope.pathField).seperator || '/';\n            \n            NoonWebService.call(\n                'dbui/getAggregatePaths', \n                {\n                    className:boClass, \n                    pathField:$scope.pathField, \n                    conditions:$scope.filterDef.query\n                }\n            ).then(function(resp) {\n                var prefixMap = resp.result;\n                var pathSep = $scope.pathSeperator;\n                \n                var pathElems = $scope.pathElements = [];\n                \n                var prefixes = Object.keys(prefixMap);\n                prefixes.sort();\n                \n                //The top-level at the root\n                var rootNode = {expanded:true};\n                for(var i=0; i < prefixes.length; i++) {\n                    if(prefixes[i].indexOf(pathSep) === -1) {\n                        createPathElements(prefixes[i], 0, rootNode, prefixMap, pathElems);   \n                    }\n                }\n            });\n\n        \n          }); //end $watch perspective\n          \n          \n        \n          $scope.toggleCollapse = function(elemObj) {\n            if(elemObj.expanded)\n              elemObj.collapse();\n            else {\n              elemObj.expanded = true;\n        \n              if(!elemObj.loaded) {\n                elemObj.loaded = true;\n                var BoModel = db[$scope.boClass];\n        \n                var queryDef = {};\n                queryDef[$scope.pathField] = elemObj.prefix;\n                \n                \n                 BoModel.find(queryDef, selectObj, queryOpts).$promise.then(function(results) {\n                  if(results && results.length > 0) {\n                    var newSection = [];\n                    for(var i=0; i < results.length; i++) {\n                      newSection.push(\n                        {disp:results[i]._disp, indent:elemObj.indent+1, parent:elemObj, bo:results[i]}\n                      );\n                    }\n        \n                    var elemArr = $scope.pathElements;\n                    var targetIndex = -1;\n                    for(i=0; i < elemArr.length; i++) {\n                      if(elemArr[i] === elemObj) {\n                        targetIndex = i;\n                        break;\n                      }\n                    }\n                    var spliceFn = elemArr.splice.bind(elemArr, targetIndex+1, 0);\n                    spliceFn.apply(elemArr, newSection);\n        \n                  }\n                });\n              }\n            }\n        \n          }\n        \n        \n        $scope.getValue = function(dataObj, field) {\n            return _.get(dataObj, field);\n        };\n        \n        $scope.getTypeDesc = function(field) {\n            return objectMetaData.type_desc_map.getTypeDescriptor(field);\n        };\n        \n        $scope.getFieldLabel = function(field) {\n            var labels = $scope.labels;\n            \n            if(labels) {\n                return (labels._abbreviated && labels._abbreviated[field]) || labels[field] || field;\n            }\n        \n            return fieldName;\n        };\n        \n        \n        $scope.invokeRecordAction = function(dataObj, action, index) {\n            //attach extra action \"base parameters\" from actionConfig \n            var params = {index:index, className:objectMetaData.class_name};\n            \n            //Invoke via DbuiAction, including 'index' parameter\n            return DbuiAction.invokeAction(perspective, dataObj, action, params);\n        };\n\n    }\n  };\n}",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "dbuiObjectTree",
	"parameters": [
		"$timeout",
		"$q",
		"db",
		"NoonI18n",
		"DbuiAction",
		"NoonWebService"
	],
	"path": "dbui/reusable/core",
	"type": "directive"
},
{
	"__t": "AngularTemplate",
	"__ver": "sys:9",
	"_class": "AngularTemplate",
	"_id": "-2Gpn4Q_QK6iFWp83138Fg",
	"content": "<div class=\"modal-header\">\n    <h3 class=\"modal-title\">{{title}}</h3>\n</div>\n<div class=\"modal-body\">\n    <dbui-business-object-browser bo-class=\"boClass\" perspective=\"perspective\" enable-search=\"true\" enable-query=\"false\"></dbui-business-object-browser>\n</div>\n<div class=\"modal-footer\">\n    <button class=\"btn btn-warning\" type=\"button\" ng-click=\"$close()\">Close</button>\n</div>",
	"doc": "Template for modal \"picker\" dialog.  Utilized in DbuiObjectPicker.showPickerDialog",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "datatable_modal.html",
	"path": "dbui/reusable/dialog",
	"provider": {
		"_disp": "DbuiObjectPicker",
		"_id": "T9gLsPzJT7iKmH1uKk76BQ"
	},
	"rolespec": [
	]
},
{
	"__t": "AngularTemplate",
	"__ver": "sys:27",
	"_class": "AngularTemplate",
	"_id": "1AvVYpoKRzaBCsiGkrDEaQ",
	"content": "<div class=\"navbar navbar-default navbar-static-top navbar-inner\" ng-controller=\"dbui_NavbarCtrl\" >\n    <p class=\"hidden-xs hidden-sm pull-left\" style=\"min-height:20px; min-width:20px\" ng-mouseenter=\"showToggleButton=true\" ng-mouseleave=\"showToggleButton=false\">\n        <button class=\"btn btn-default\" ng-show=\"showToggleButton\" ng-click=\"toggleSidebar()\"><i class=\"fa fa-xl fa-chevron-left\" ng-class=\"{'fa-chevron-left':!sidebarCollapsed, 'fa-chevron-right':sidebarCollapsed}\"></i></button>\n    </p>\n  <div class=\"container\">\n\n    <nav>\n      <ul class=\"nav navbar-nav\">\n\n        <li class=\"dropdown\" uib-dropdown>\n          <a id=\"sidebar_nav\" class=\"nav-toggle dropdown-toggle hidden-lg hidden-md\" role=\"button\"  uib-dropdown-toggle>\n            <span><i class=\"fa fa-xl fa-bars\"></i></span>\n          </a>\n          <ul class=\"dropdown-menu\" role=\"menu\">\n            <li role=\"menuitem\" ng-repeat=\"menuItem in sidebarMenu\">\n              <div class=\"nav-sidebar-submenu-header\">{{menuItem.label}} </div>\n              <a ng-repeat=\"submenuItem in menuItem.submenu\" href=\"#\" ng-click=\"invokeAction(submenuItem.action)\">{{submenuItem.label}}</a>\n            </li>\n          </ul>\n        </li>\n\n        <p class=\"navbar-brand hidden-xs\" on-right-click=\"appTitleRightClick()\">{{appTitle}}</p>\n\n        <li ng-class=\"{active: isActive('dbui.home')}\"><a ui-sref=\"dbui.home\">Home</a></li>\n        \n        <li>\n            <a href\n                uib-popover-template=\"'alertPopoverTemplate.html'\"\n                popover-is-open=\"alertMenu.isOpen\"\n                popover-enable=\"alertMenu.alerts.length\"\n                popover-placement=\"bottom\"\n                popover-class=\"alert-popover\"\n                popover-append-to-body=\"true\"\n            \n            ><i class=\"fa fa-bell-o\"></i><span class=\"badge\">{{alertMenu.alerts.length || ''}}</span></a>\n            \n        </li>\n        <script type=\"text/ng-template\" id=\"alertPopoverTemplate.html\">\n            <div class=\"list-group\">\n                <button type=\"button\" class=\"list-group-item\" ng-class=\"'list-group-item-'+alert.type\" ng-click=\"closeDbuiAlert(alert)\" ng-repeat=\"alert in alertMenu.alerts\">\n                    <b>{{alert.msg}}</b>\n                </button>\n            </div>\n            <div ng-show=\"alertMenu.alerts.length > 1\">\n                <button ng-click=\"dismissDbuiAlerts()\" class=\"btn btn-sm btn-primary pull-right\"><i class=\"fa fa-close\"></i> <i>Dismiss All</i></button>\n            </div>\n        </script>\n\n        <!-- \"Business Objects\" drop-down -->\n        <li ng-show=\"isAdmin\"  class=\"dropdown\" uib-dropdown auto-close=\"disabled\" is-open=\"boMenuOpen\">\n            \n            <a class=\"dropdown-toggle\" role=\"button\" uib-dropdown-toggle>\n                System <b class=\"caret\"></b>\n            </a>\n            <ul class=\"dropdown-menu\" role=\"menu\" uib-dropdown-menu>\n                <li role=\"menuitem\" ng-repeat=\"submenu in navbarMenu\" is-open=\"submenu.isOpen\">\n                    <a href role=\"button\" ng-click=\"submenu.isOpen = !submenu.isOpen\" style=\"font-weight:bold\"> {{submenu.label}}</a>\n                    <ul role=\"menu\" ng-show=\"submenu.isOpen\">\n                        <li role=\"menuitem\" ng-repeat=\"m in submenu.submenu\"><a href role=\"button\" ng-click=\"invokeAction(m.action)\">{{m.label}}</a></li>\n                    </ul>\n                </li>\n            </ul>\n        </li>\n        <li ng-show=\"isAdmin && enablePackaging\"  class=\"dropdown\" uib-dropdown>\n            <a class=\"dropdown-toggle\" role=\"button\" uib-dropdown-toggle>\n                Package: <i>{{currPkg.key}}</i>\n            </a>\n            <ul class=\"dropdown-menu\" role=\"menu\">\n                <li role=\"menuitem\" ng-repeat=\"pkg in pkgList\"><a href role=\"button\" ng-click=\"switchPkg(pkg)\"><i ng-if=\"pkg == currPkg\" class=\"fa fa-xs fa-asterisk\"></i> {{pkg.name}}</a></li>\n            </ul>\n        </li>\n      </ul>\n    </nav>\n\n\n    <div id=\"navbar-main\">\n      \n      <!-- Right-hand side of navbar-->\n      <ul class=\"nav navbar-nav navbar-right\">\n        <li ng-show=\"loggedIn && !sidebarMenuList.length\" class=\"hidden-xs\"><p class=\"navbar-text\">Hello {{ currentUser.name }}</p> </li>\n        <li ng-if=\"loggedIn && sidebarMenuList.length\"  class=\"dropdown\" uib-dropdown>\n            <a class=\"dropdown-toggle\" role=\"button\" uib-dropdown-toggle>\n                Hello {{ currentUser.name }}\n            </a>\n            <ul class=\"dropdown-menu\" role=\"menu\">\n                <li role=\"menuitem\" style=\"padding:3px 10px\"><span style=\"font-weight:bolder\">Sidebar Menus</span></li>\n                <li class=\"divider\"></li>\n                <li role=\"menuitem\" ng-repeat=\"menu in sidebarMenuList\"><a href role=\"button\" ng-click=\"switchMenu(menu.key)\"><i ng-if=\"menu.key == currMenuKey\" class=\"fa fa-xs fa-asterisk\"></i> {{menu.label}}</a></li>\n            </ul>\n        </li>\n        <li ng-show=\"loggedIn\"><a href=\"\" ng-click=\"logout()\">Logout</a></li>\n      </ul>\n\n    </div>\n\n  </div>\n</div>\n",
	"doc": "Top \"nav bar\" region of DBUI.",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "navbar.html",
	"path": "dbui/core",
	"provider": {
		"_disp": "dbui_NavbarCtrl",
		"_id": "jXqx7LOLRl6ZoWUORs8nPA"
	},
	"rolespec": [
	]
},
{
	"__t": "AngularTemplate",
	"__ver": "sys:7",
	"_class": "AngularTemplate",
	"_id": "40032UdQRL2-Jdg-CUoIqg",
	"content": "<div>\n\n  <div class=\"row\">\n    <div class=\"col-xs-12 dbui-header\">\n      <h3 ng-hide=\"folderPerspective.title\">{{labels[boClass] || boClass}} List </h3>\n      <h3 ng-show=\"folderPerspective.title\">{{folderPerspective.title}}</h3>\n      <button type=\"button\" ng-repeat=\"action in actionList\" class=\"btn btn-action\" ng-click=\"invokeAction(action)\"><i class=\"fa fa-lg\" ng-class=\"action.icon\" ></i> {{ action.label }}</button>\n    </div>\n  </div>\n\n  <dbui-object-tree bo-class=\"boClass\" perspective=\"folderPerspective\"></dbui-object-tree>\n\n</div>\n",
	"doc": "The base template that is rendered for ui-router state dbui.folders.",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "folders.html",
	"path": "dbui/core/state",
	"provider": {
		"_disp": "dbui_FoldersCtrl",
		"_id": "wwX1-_BxSYWYOQdMBcUTjw"
	},
	"rolespec": [
	]
},
{
	"__t": "AngularTemplate",
	"__ver": "sys:3",
	"_class": "AngularTemplate",
	"_id": "4yT9t5IzTIqSCLFnR508rw",
	"content": "<div>\n  <div class=\"dbui-header modal-header\">\n      <h3>View {{labels[boClass] || boClass}} <small uib-tooltip=\"Version: {{theObject.__ver}}\">{{boId}}</small></h3>\n      <div style=\"padding-left:12px; font-style:italic\">{{theObject._disp}}</div>\n      <button type=\"button\" ng-repeat=\"action in actionList\" class=\"btn btn-action\" ng-click=\"invokeAction(action)\"><i class=\"fa fa-lg\" ng-class=\"action.icon\" ></i> {{ action.label }}</button>\n  </div>\n  \n  <div class=\"modal-body\">\n      <div class=\"row\" ng-show=\"recordActionList.length > 0\">\n        <div class=\"action-bar col-md-offset-1 col-sm-10 col-md-10 col-lg-10\">\n          <button type=\"button\" ng-repeat=\"action in recordActionList\" class=\"btn btn-action\" ng-click=\"invokeAction(action, theObject)\"><i class=\"fa fa-lg\" ng-class=\"action.icon\" ></i> {{ action.label }}</button>\n        </div>\n      </div>\n    \n      <div class=\"view_container\">\n        <dbui-object-viewer the-object=\"theObject\" perspective=\"viewPerspective\"></dbui-object-viewer>\n      </div>\n    \n      <!-- related -->\n      <dbui-related-viewer ng-if=\"viewPerspective.related\" the-object=\"theObject\" perspective-name=\"viewPerspective.name\" related-spec=\"viewPerspective.related\"></dbui-related-viewer>\n      \n  </div>\n  \n  <div class=\"modal-footer\">\n    <button class=\"btn btn-warning\" type=\"button\" ng-click=\"$close()\">Close</button>\n  </div>\n</div>",
	"doc": "Used with dialog-view action to display",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "view-dialog.html",
	"path": "dbui/core",
	"provider": {
		"_disp": "DbuiAction",
		"_id": "7UVBjiqKRueVphLN5EtfLg"
	},
	"rolespec": [
	]
},
{
	"__t": "AngularTemplate",
	"__ver": "sys:5",
	"_class": "AngularTemplate",
	"_id": "6OYTWbEuSxGAYApNR85rAg",
	"content": "<div class=\"querybuilder\">\n\n  <div ng-repeat=\"clauseGroup in queryModel.clauseGroups\"> <!-- Each clauseGroup is a set of 1 or more terms connected by innerConj -->\n\n    <div class=\"row\">\n      <div class=\"querybuilder-clausegroup-container col-md-12\">\n\n        <div ng-repeat=\"clause in clauseGroup\">\n          <div class=\"row\">\n            <div class=\"col-md-1\">\n              <button class=\"btn btn-default\" ng-click=\"removeTerm(clauseGroup, $index)\">x</button>\n            </div>\n            <div class=\"querybuilder-term-container col-md-11\">\n              <query-term-builder ng-if=\"fieldList\" field-list=\"fieldList\" ng-model=\"clauseGroup[$index]\"></query-term-builder>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-md-offset-3 col-md-9\" ng-switch=\"$last\">\n              <span ng-switch-when=\"true\">\n                <button ng-if=\"queryModel.innerConj\" class=\"btn btn-primary\" ng-click=\"newTerm(clauseGroup)\">{{conjLabels[queryModel.innerConj]}}</button>\n                <span ng-if=\"!queryModel.innerConj\">\n                  <button class=\"btn btn-primary\" ng-click=\"newTerm(clauseGroup, '$and')\">&amp;</button>\n                  <button class=\"btn btn-primary\" ng-click=\"newTerm(clauseGroup, '$or')\">or</button>\n                </span>\n              </span>\n              <span ng-switch-default>{{conjLabels[queryModel.innerConj]}}</span>\n            </div>\n          </div>\n        </div> <!-- end clause-in-clauseGroup iteration-->\n\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div ng-switch=\"$last\" class=\"col-md-11 col-md-offset-1\"> <!-- after each clauseGroup -->\n        <span ng-switch-when=\"true\"><button ng-if=\"queryModel.outerConj\" class=\"btn btn-default\" ng-click=\"newClauseGroup()\">{{conjLabels[queryModel.outerConj]}}</button></span>\n        <span ng-switch-default>{{conjLabels[queryModel.outerConj]}}</span>\n      </div>\n    </div>\n\n  </div> <!-- end clauseGroup-in-queryModel iteration -->\n\n</div>\n",
	"doc": "Renders sequence of \"clause groups\" containing multiple terms; editing of individual terms is delegated to queryTermBuilder directive.",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "querybuilder.html",
	"path": "dbui/reusable/core",
	"provider": {
		"_disp": "queryBuilder",
		"_id": "q1yaFwgcR2WQu8xUaySIlw"
	},
	"rolespec": [
	]
},
{
	"__t": "AngularTemplate",
	"__ver": "sys:6",
	"_class": "AngularTemplate",
	"_id": "Asy2H3LZTZaS16UFz4JTdg",
	"content": "<div ng-controller=\"dbui_CustomPageCtrl\">\n  <div ng-if=\"resourcePath\" ng-include src=\"resourcePath\" ></div>\n  <dbui-custom-page ng-if=\"pageKey\" key=\"{{pageKey}}\"></dbui-custom-page>\n</div>\n",
	"doc": "The base template that is rendered for ui-router state dbui.custompage.",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "custompage.html",
	"path": "dbui/core/state",
	"provider": {
		"_disp": "dbui_CustomPageCtrl",
		"_id": "ezSJbZ-NQ52ZgnKLWh1Ebw"
	},
	"rolespec": [
	]
},
{
	"__t": "AngularTemplate",
	"__ver": "sys:8",
	"_class": "AngularTemplate",
	"_id": "DochseC4RXmnUQc1xnjZkQ",
	"content": "<div>\n  <div ng-if=\"theObject\" ng-repeat=\"sec in perspective.layout\" class=\"dbui-subsection-container\" id=\"{{sec.section_id}}\">\n    <div class=\"dbui-subsection-header\" ng-if=\"sec.subheading\" ng-click=\"sec.isHidden = !sec.isHidden\">\n      <h4>{{labelGroup._subheading[sec.subheading] ? labelGroup._subheading[sec.subheading] : sec.subheading}}  <i class=\"pull-right glyphicon\" ng-class=\"{'glyphicon-chevron-down': !sec.isHidden, 'glyphicon-chevron-right': sec.isHidden}\"></i></h4>\n    </div>\n    <div ng-hide=\"sec.isHidden\">\n      <div class=\"row\" ng-repeat=\"r in sec.rows\">\n        <form class=\"form-horizontal\">\n          <div class=\"{{colClass.top[r.length]}}\" ng-repeat=\"fieldName in r\">\n            <div class=\"form-group\" ng-if=\"shouldShow(fieldName)\">\n              <label for=\"{{fieldName}}\" class=\"{{colClass.label[r.length]}} control-label\" >{{ labelGroup.getLabel(fieldName) }}</label>\n              <dbui-field-viewer type-desc=\"typeDescMap[fieldName]\" elem-id=\"fieldName\" display-value=\"theObject[fieldName]\" class=\"dbui-field-viewer {{colClass.value[r.length]}}\" field-customizations=\"perspective.fieldCustomizations[fieldName]\" context-object=\"theObject\" ></dbui-field-viewer>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n\n  </div><!-- end section div-->\n</div>\n",
	"doc": "Renders theObject's fields via dbui-field-viewers, according to perspective layout.",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "object_viewer.html",
	"path": "dbui/reusable/core",
	"provider": {
		"_disp": "dbuiObjectViewer",
		"_id": "zLrdPMCOSMuj44EGALgmDw"
	},
	"rolespec": [
	]
},
{
	"__t": "AngularTemplate",
	"__ver": "sys:7",
	"_class": "AngularTemplate",
	"_id": "JlYdHTiWRoGbI81O-VPkXg",
	"content": "  <div class=\"row\" ng-if=\"relatedTables\">\n    <div class=\"col-sm-12\">\n      <uib-tabset>\n        <uib-tab ng-repeat=\"rt in relatedTables\" heading=\"{{rt.title}}\">\n          <dbui-business-object-browser bo-class=\"rt.class\" perspective=\"rt.perspective\" enable-search=\"true\" enable-query=\"false\"></dbui-business-object-browser>\n        </uib-tab>\n      </uib-tabset>\n    </div>\n  </div>",
	"doc": "Puts \"relatedTables\" into a uib-tabset, each containing a full-on dbui-business-object-browser",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "relatedviewer.html",
	"path": "dbui/reusable/core",
	"provider": {
		"_disp": "dbuiRelatedViewer",
		"_id": "_28vJLv9Tt6HzXexuNITlA"
	},
	"rolespec": [
	]
},
{
	"__t": "AngularTemplate",
	"__ver": "sys:10",
	"_class": "AngularTemplate",
	"_id": "MbVLEC9ETmapSheNd_78Dg",
	"content": "<div class=\"input-group\" uib-dropdown>\n    <span class=\"input-group-btn\">\n          <button type=\"button\" class=\"btn btn-default\" uib-dropdown-toggle><i class=\"fa fa-clock-o\"></i></button>\n    </span>\n    <input type=\"text\" id=\"{{elemId}}\" placeholder=\"(empty)\" class=\"form-control\" ng-model=\"binding.value\" ng-focus=\"onFocus($event)\"  />\n    <ul class=\"dropdown-menu\" uib-dropdown-menu style=\"max-height: 300px; overflow-y: scroll;\">\n        <li ng-repeat=\"time in times\"><a href ng-click='selectTime(time)'>{{time}}</a></li>\n    </ul>\n</div>",
	"doc": "A textbox for direct editing, alongside a dropdown for convenience.",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "time_string_editor.html",
	"path": "dbui/core/helper",
	"provider": {
		"_disp": "timeStringEditor",
		"_id": "3ap2IrTbTkOORGV3Ra5Fjg"
	},
	"rolespec": [
	]
},
{
	"__t": "AngularTemplate",
	"__ver": "sys:14",
	"_class": "AngularTemplate",
	"_id": "R8TV3oHJRZG6KU9GlhfrIQ",
	"content": "<div>\n\n  <div class=\"row dbui-table-data\">\n    <div class=\"col-xs-12\">\n\n      <table class=\"table table-striped table-hover\">\n        <col style=\"width:8%\"/>\n        <thead>\n          <tr>\n            <th class=\"text-center\">\n              <span ng-if=\"tableActions.length\" uib-dropdown>\n                <a href id=\"cog-button\" uib-dropdown-toggle ><i class=\"fa fa-2x fa-cog\"></i></a>\n                <ul class=\"dropdown-menu\" uib-dropdown-menu role=\"menu\" aria-labelledby=\"cog-button\">\n                  <li role=\"menuitem\" ng-repeat=\"action in tableActions\"><a href ng-click=\"invokeTableAction(action)\"> <i ng-if=\"action.icon\" ng-class=\"action.icon\" class=\"fa\"></i> {{action.label}}</a><div ng-hide=\"$last\" class=\"divider\"></div></li>\n                </ul>\n              </span>\n              <span ng-if=\"!tableActions.length\"><i class=\"fa fa-2x fa-cog\"></i></span>\n            </th>\n            <th ng-repeat=\"f in perspective.fields\">\n              <a href=\"\" ng-if=\"allowSort\" ng-click=\"colHeaderClick($event, f)\" on-right-click=\"colHeaderRightClick($event, f)\">{{getFieldLabel(f)}}</a>\n              <span ng-if=\"!allowSort\">{{getFieldLabel(f)}}</span> &nbsp; <i class=\"fa fa-sm\" ng-class=\"columnDecorations[f]\"></i>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n            <tr ng-repeat=\"dataObj in objectArray\">\n\n              <td class=\"text-center\">\n                <span ng-repeat=\"action in recordActions\">\n                  <a href=\"\" class=\"datatable_btn\" ng-click=\"invokeRecordAction(dataObj, action, $parent.$index)\"><i ng-class=\"action.icon\" class=\"fa fa-2x\"></i></a>\n                </span>\n              </td>\n\n              <td ng-repeat=\"field in perspective.fields\">\n                <dbui-field-viewer ng-if=\"!(editing(dataObj, field) || getValue(dataObj, field) == null)\" type-desc=\"getTypeDesc(field)\"  display-value=\"getValue(dataObj, field)\" abbreviated=\"true\" field-customizations=\"perspective.fieldCustomizations[field]\" ng-click=\"cellClicked(dataObj, field)\"></dbui-field-viewer>\n                <div class=\"text-center\" ng-if=\"allowEdit(field) && !editing(dataObj, field) && getValue(dataObj, field) == null\">\n                  <a href=\"\" class=\"datatable_btn\" ng-click=\"cellClicked(dataObj, field)\"><i class=\"fa fa-2x fa-edit\"></i></a>\n                </div>\n                <dbui-field-editor ng-if=\"editing(dataObj, field)\" type-desc=\"getTypeDesc(field)\" ng-model=\"dataObj[field]\" field-customizations=\"perspective.fieldCustomizations[fieldName]\"></dbui-field-editor>\n              </td>\n\n            </tr>\n        </tbody>\n      </table>\n\n    </div>\n  </div>\n\n</div>\n",
	"doc": "Renders table of objects complete with clickable headers, tableActions, and recordActions.",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "object_table.html",
	"path": "dbui/reusable/core",
	"provider": {
		"_disp": "dbuiObjectTable",
		"_id": "9en21yAeQAOdV_Uxm_C9sQ"
	},
	"rolespec": [
	]
},
{
	"__t": "AngularTemplate",
	"__ver": "sys:1",
	"_class": "AngularTemplate",
	"_id": "XSx9nqdyQeuaytKKJmsEtw",
	"content": "<div class=\"modal-header\">\n    <h3 class=\"modal-title\" id=\"modal-title\">{{title}}</h3>\n</div>\n<div class=\"modal-body\" id=\"modal-body\">\n    <h4>{{prompt}}</h4>\n    <dbui-object-editor the-object=\"theObject\" perspective=\"perspective\"></dbui-object-editor>\n</div>\n<div class=\"modal-footer\">\n    <button class=\"btn btn-primary\" type=\"button\" ng-click=\"$close(theObject)\">OK</button>\n    <button class=\"btn btn-warning\" type=\"button\" ng-click=\"$dismiss()\">Cancel</button>\n</div>",
	"doc": "used by Dbui.showDialog()",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "object_editor_dialog.html",
	"path": "dbui/reusable/core",
	"provider": {
		"_disp": "Dbui",
		"_id": "I_Fy8QWkTdiSj9Bz3A-jNw"
	},
	"rolespec": [
	]
},
{
	"__t": "AngularTemplate",
	"__ver": "sys:10",
	"_class": "AngularTemplate",
	"_id": "ZLuRTnxQRiuqsSqzmbL8Jw",
	"content": "  <p class=\"input-group\">\n    <span class=\"input-group-btn\">\n      <button type=\"button\" class=\"btn btn-default\" ng-click=\"togglePicker()\"><i class=\"fa fa-calendar\"></i></button>\n    </span>\n    <input type=\"text\" id=\"{{elemId}}\" placeholder=\"(empty)\" class=\"form-control\" uib-datepicker-popup=\"{{displayFormat}}\" ng-model=\"binding.value\" is-open=\"pickerOpen\" datepicker-options=\"dateOptions\" close-text=\"Close\" alt-input-formats=\"altFormats\" />\n  </p>",
	"doc": "A date picker and a textbox that allows manual editing.",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "date_string_editor.html",
	"path": "dbui/core/helper",
	"provider": {
		"_disp": "dateStringEditor",
		"_id": "2UpyXO5lR3qV-oce53G_7A"
	},
	"rolespec": [
	]
},
{
	"__t": "AngularTemplate",
	"__ver": "sys:1",
	"_class": "AngularTemplate",
	"_id": "aGUQwyKpQnCfPcU_qdVV2A",
	"content": "<div>\n  <div class=\"row dbui-table-data\">\n    <div class=\"col-xs-12\">\n\n      <table class=\"table table-striped table-hover\">\n        \n        <thead>\n          <tr>\n            <th></th>\n            <th ng-repeat=\"dataObj in objectArray\">\n                {{dataObj[perspective.column_heading]}}\n            </th>\n          </tr>\n        </thead>\n        \n        <tbody>\n            <tr ng-repeat=\"f in perspective.fields\">\n                <td>{{getFieldLabel(f)}}</td>\n                <td ng-repeat=\"dataObj in objectArray\">\n                    <dbui-field-viewer type-desc=\"getTypeDesc(f)\"  display-value=\"getValue(dataObj, f)\" abbreviated=\"true\" field-customizations=\"perspective.fieldCustomizations[field]\"></dbui-field-viewer>\n                </td>\n            </tr>\n        </tbody>\n        \n      </table>\n\n    </div>\n  </div>\n\n</div>\n",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "vertical_table.html",
	"path": "dbui/reusable/core",
	"provider": {
		"_disp": "dbuiObjectTable",
		"_id": "9en21yAeQAOdV_Uxm_C9sQ"
	},
	"rolespec": [
	]
},
{
	"__t": "AngularTemplate",
	"__ver": "sys:17",
	"_class": "AngularTemplate",
	"_id": "c-Sh5WEEQqW1adX257yZVQ",
	"content": "<div ng-controller=\"dbui_SidebarCtrl\" >\n\t<uib-accordion close-others=\"false\">\n\t    \n\t    <div uib-accordion-group  is-open=\"menuItem.isOpen\" class=\"panel-sidebar\"  ng-repeat=\"menuItem in sidebarMenu\">\n\t        <uib-accordion-heading>\n                {{menuItem.label}} <i class=\"pull-right glyphicon\" ng-class=\"{'glyphicon-chevron-down': menuItem.isOpen, 'glyphicon-chevron-right': !menuItem.isOpen}\"></i>\n            </uib-accordion-heading>\n            <div ng-repeat=\"submenuItem in menuItem.submenu\" >\n                <a href=\"#\" ng-click=\"invokeAction(submenuItem.action)\">{{submenuItem.label}}</a>\n            </div>\n\t  </div>\n\n\t</uib-accordion>\n</div>\n",
	"doc": "The sidebar region in the DBUI: renders a menu into uib-accordion-groups.",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "sidebar.html",
	"path": "dbui/core",
	"provider": {
		"_disp": "dbui_SidebarCtrl",
		"_id": "7jHQrtYKQxSzW_pRHAd9RA"
	},
	"rolespec": [
	]
},
{
	"__t": "AngularTemplate",
	"__ver": "sys:22",
	"_class": "AngularTemplate",
	"_id": "hbhKtxpDQLaUvyA7hogLWw",
	"content": "<div ng-form=\"editorForm\">\n<div ng-repeat=\"sec in perspective.layout\" class=\"dbui-subsection-container\" id=\"{{sec.section_id}}\">\n    \n  <div class=\"dbui-subsection-header\" ng-if=\"sec.subheading\" ng-click=\"sec.isHidden = !sec.isHidden\">\n      <h4>{{labelGroup._subheading[sec.subheading] ? labelGroup._subheading[sec.subheading] : sec.subheading}} <i class=\"pull-right glyphicon\" ng-class=\"{'glyphicon-chevron-down': !sec.isHidden, 'glyphicon-chevron-right': sec.isHidden}\"></i></h4>\n  </div>\n  <div ng-hide=\"sec.isHidden\" class=\"form-horizontal\">\n    <div class=\"row\" ng-repeat=\"r in sec.rows\">\n      \n        <div class=\"{{colClass.top[r.length]}}\" ng-repeat=\"fieldName in r\">\n          <div class=\"form-group\" ng-show=\"shouldShow(fieldName)\">\n\n            <label for=\"{{fieldName}}\" class=\"{{colClass.label[r.length]}} control-label\" uib-tooltip=\"{{labelGroup._tooltip[fieldName]}}\" ng-class=\"{'required-field':isRequired(fieldName)}\" tooltip-placement=\"bottom\"> {{ labelGroup.getLabel(fieldName) }}</label>\n            <dbui-field-editor fieldtype=\"{{getTypeDesc(fieldName).type}}\" type-desc=\"getTypeDesc(fieldName)\" elem-id=\"fieldName\" ng-model=\"getterSetter[fieldName]\" ng-model-options=\"{ getterSetter: true }\" class=\"{{colClass.value[r.length]}} dbui-edit-container\" field-customizations=\"perspective.fieldCustomizations[fieldName]\" context-object=\"theObject\" link-status=\"linkStatus[fieldName]\"></dbui-field-editor>\n\n          </div>\n        </div>\n      \n    </div>\n  </div>\n</div>\n</div>",
	"doc": "Renders, according to perspective layout, editors for theObject's fields using dbui-field-editors.",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "object_editor.html",
	"path": "dbui/reusable/core",
	"provider": {
		"_disp": "dbuiObjectEditor",
		"_id": "MOV8fi2gT8ySGHQZ4FAT5Q"
	},
	"rolespec": [
	]
},
{
	"__t": "AngularTemplate",
	"__ver": "sys:8",
	"_class": "AngularTemplate",
	"_id": "iMYbBIZHRvqnpf6mAmeBBw",
	"content": "<form class=\"form-inline\">\n  <div class=\"form-group query-editor-term\">\n    <!-- <select class=\"form-control\" ng-change=\"fieldChanged(true)\" ng-model=\"term.fieldInfo\" ng-options=\"fi as fi.fieldLabel for fi in fieldList\"></select> -->\n    <div class=\"form-control\" uib-dropdown auto-close=\"disabled\" is-open=\"fieldSelectorOpen\">\n      <a href uib-dropdown-toggle >\n        {{term.fieldInfo.fieldLabel}} &nbsp;&nbsp;<span class=\"fa fa-lg fa-caret-down\"></span>&nbsp;&nbsp;\n      </a>\n      <ul uib-dropdown-menu class=\"dropdown-menu\" role=\"menu\" aria-labelledby=\"single-button\">\n        <li ng-repeat=\"fi in fieldList\" role=\"menuitem\">\n          <a href ng-click=\"fieldChanged(fi, true)\">{{fi.fieldLabel}}</a>\n        </li>\n      </ul>\n    </div>\n\n    <select class=\"form-control\" ng-model=\"term.opInfo\" ng-change=\"opChanged(true)\" ng-options=\"opObj as opObj.label for opObj in opList track by opObj.op\"></select>\n    <span ng-if=\"fieldEditorVisible\">\n      <dbui-field-editor ng-model=\"term.value\" type-desc=\"fieldEditorTypeDesc\"></dbui-field-editor>\n    </span>\n  </div>\n</form>\n",
	"doc": "Input for a single query term: a dropdown of field names, a dropdown for operations, and, if applicable, a dbui-field-editor appropriate to the operation.",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "querybuilder_term.html",
	"path": "dbui/core/helper",
	"provider": {
		"_disp": "queryTermBuilder",
		"_id": "1DR9d4BTQtafOsD03s3kPg"
	},
	"rolespec": [
	]
},
{
	"__t": "AngularTemplate",
	"__ver": "sys:9",
	"_class": "AngularTemplate",
	"_id": "kX5Bln7MQ7evgGJJm9QhUw",
	"content": "<div>\n\n  <!-- actual table data -->\n  <div class=\"row dbui-pathview-data\">\n    <div class=\"col-xs-12\">\n\n      <table class=\"table table-striped table-hover\">\n        <col style=\"width:8%\"/>\n        <thead>\n          <tr>\n            <th class=\"text-center\"><i class=\"fa fa-2x fa-cog\"></i>\n              <!-- <span uib-dropdown>\n                <a href id=\"cog-button\" uib-dropdown-toggle ><i class=\"fa fa-2x fa-cog\"></i></a>\n                <ul class=\"uib-dropdown-menu\" role=\"menu\" aria-labelledby=\"cog-button\">\n                  <li role=\"menuitem\" ng-repeat=\"action in tableActionList\"><a href ng-click=\"invokeAction(action)\"> <i ng-if=\"action.icon\" ng-class=\"action.icon\" class=\"fa\"></i> {{action.label}}</a><div ng-hide=\"$last\"class=\"divider\"></div></li>\n                </ul>\n              </span> -->\n            </th>\n            <th>{{getFieldLabel(perspective.pathField)}}</th>\n            <th ng-repeat=\"field in dispFields\"><a href=\"\" ng-click=\"toggleSort(field)\">{{getFieldLabel(field)}} &nbsp; <i\n              ng-show=\"sortDef[field]\" class=\"fa fa-sm\" ng-class=\"{'fa-chevron-circle-down': sortDef[field]=='asc', 'fa-chevron-circle-up': sortDef[field]=='desc'}\"></i></a></th>\n          </tr>\n        </thead>\n        <tr ng-repeat=\"elementObj in pathElements\" ng-if=\"elementObj.parent.expanded\">\n          <td class=\"text-center\">\n            <span ng-if=\"elementObj.bo\" ng-repeat=\"action in recordActionList\"><a href=\"\" class=\"datatable_btn\" ng-click=\"invokeRecordAction(elementObj.bo, action, $parent.$index)\"><i ng-class=\"action.icon\" class=\"fa fa-lg\"></i></a> </span>\n          </td>\n          <td>\n            <dbui-indent-spacer indent=\"elementObj.indent\"></dbui-indent-spacer>\n            <span ng-if=\"!elementObj.bo\">\n              <a href=\"#\" class=\"folder_view_folder\" ng-click=\"toggleCollapse(elementObj)\">\n                <i class=\"fa fa-sm\"  ng-class=\"{'fa-caret-down': elementObj.expanded, 'fa-caret-right': !elementObj.expanded}\"></i>\n                <i class=\"fa fa-sm fa-folder-o\"></i> {{elementObj.disp}}\n              </a>\n            </span>\n            <span ng-if=\"elementObj.bo\">\n               <dbui-field-viewer ng-if=\"elementObj.bo[viewField] != null\" type-desc=\"getTypeDesc(viewField)\"  display-value=\"elementObj.bo[viewField]\" abbreviated=\"true\" style=\"display: inline-block;\" ></dbui-field-viewer>\n            </span>\n          </td>\n          <td ng-repeat=\"field in dispFields\">\n            <span ng-if=\"elementObj.bo\">\n              <dbui-field-viewer ng-if=\"elementObj.bo[field] != null\" type-desc=\"getTypeDesc(field)\"  display-value=\"elementObj.bo[field]\" abbreviated=\"true\"></dbui-field-viewer>\n            </span>\n          </td>\n        </tr>\n      </table>\n    </div>\n  </div>\n</div>\n",
	"doc": "Operates on a set of objects whose hierarchy is defined by a \"path\" field.  Template operates on a tree that has been flattened by logic in the controller.",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "object_treelist.html",
	"path": "dbui/reusable/core",
	"provider": {
		"_disp": "dbuiObjectTree",
		"_id": "zyR-OIZhQqmy70eVOj7twg"
	},
	"rolespec": [
	]
},
{
	"__t": "AngularTemplate",
	"__ver": "sys:17",
	"_class": "AngularTemplate",
	"_id": "lRoO3i4TTsi142xvw7vnIA",
	"content": "<div>\n\t<div class=\"row\">\n\t\t<div class=\"col-sm-12 col-md-12 col-lg-12 dbui-header\">\n\t\t\t<h3 ng-if=\"boId\">Edit {{labels[boClass] || boClass}} <small>{{boId}}</small></h3>\n\t\t\t<h3 ng-if=\"!boId\">New {{labels[boClass] || boClass}}</h3>\n\t\t\t<button type=\"button\" ng-repeat=\"action in actionList\" class=\"btn btn-action\" ng-click=\"invokeAction(action)\"><i class=\"fa fa-lg\" ng-class=\"action.icon\" ></i> {{ action.label }}</button>\n\t\t</div> \n\t</div>\n\t\n\t<div class=\"action-bar-upper\" ng-class=\"{'save-warn':(formStatus.isDirty)}\" ng-show=\"recordActionList.length > 0\">\n      <button type=\"button\" ng-repeat=\"action in recordActionList\" class=\"btn btn-action\" ng-click=\"invokeAction(action)\"><i class=\"fa fa-lg\" ng-class=\"action.icon\" ></i> {{ action.label }}</button>\n    </div>\n  \n\n    <div class=\"dbui-form-container\">\n      <dbui-object-editor the-object=\"theObject\" perspective=\"editPerspective\" form-status=\"formStatus\"></dbui-object-editor>\n    </div>\n  \n    <div class=\"action-bar-lower\" ng-class=\"{'save-warn':(formStatus.isDirty)}\" ng-show=\"recordActionList.length > 0\">\n      <button type=\"button\" ng-repeat=\"action in recordActionList\" class=\"btn btn-action\" ng-click=\"invokeAction(action)\"><i class=\"fa fa-lg\" ng-class=\"action.icon\" ></i> {{ action.label }}</button>\n    </div>\n\n    <!-- related -->\n    <dbui-related-viewer ng-if=\"theObject._id && editPerspective.related\" the-object=\"theObject\" perspective-name=\"editPerspective.name\" related-spec=\"editPerspective.related\"></dbui-related-viewer>\n</div>\n",
	"doc": "The base template that is rendered for ui-router states dbui.edit and dbui.create",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "edit.html",
	"path": "dbui/core/state",
	"provider": {
		"_disp": "dbui_EditCtrl",
		"_id": "Hd7vderbSfKfJzks0xJTQg"
	},
	"rolespec": [
	]
},
{
	"__t": "AngularTemplate",
	"__ver": "sys:5",
	"_class": "AngularTemplate",
	"_id": "nFlRtvy8T4WjgiUECbROSw",
	"content": "<ol class=\"breadcrumb\" style=\"margin-bottom:0\">\n  <li ng-repeat=\"c in crumbHistory\" ng-class=\"{'active':(currentCrumb===c), 'pinned':c.pinned}\">\n      <span class=\"breadcrumb-pin\" ng-click=\"togglepin(c)\"><i class=\"fa fa-thumb-tack\" ng-class=\"{'fa-thumb-tack':(!c.pinned), 'fa-circle':(c.pinned)}\"></i></span>\n      <span ng-switch=\"c\">\n        <span ng-if=\"c === currentCrumb\">{{c.title}}</span>\n        <a href ng-if=\"c !== currentCrumb\" ng-click=\"selected(c)\">{{c.title}} </a>\n      </span>\n  </li>\n</ol>",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "breadcrumbar.html",
	"path": "dbui/core",
	"rolespec": [
	]
},
{
	"__t": "AngularTemplate",
	"__ver": "sys:12",
	"_class": "AngularTemplate",
	"_id": "nWxgcco1SJWxxpgCW1TjYg",
	"content": "<div>\n  <!-- Search box / query builder -->\n  <div class=\"row\" ng-if=\"enableSearch\">\n    <div ng-switch=\"perspective.isAdvancedSearch\">\n      <div ng-switch-when=\"true\">\n        <div class=\"col-sm-9\" >\n          <query-builder bo-class=\"boClass\" ng-model=\"perspective.filter\" on-close=\"advancedSearch(false)\"></query-builder>\n          <button type=\"button\" class=\"btn btn-default\" ng-click=\"execSearch()\"><i class=\"fa fa-lg fa-search\"></i></button>\n          <div class=\"pull-right\" uib-dropdown ng-show=\"perspective.savedQueries\">\n            <button type=\"button\" class=\"btn btn-default\" uib-dropdown-toggle><i class=\"fa fa-lg fa-ellipsis-h\"></i></button>\n            <ul class=\"dropdown-menu\" uib-dropdown-menu>\n                <li ng-repeat=\"sq in perspective.savedQueries\"><a href ng-click=\"loadQuery(sq.query)\">{{sq.title}}</a></li>\n            </ul>\n          </div>\n          <button type=\"button\" class=\"btn btn-default pull-right\" ng-click=\"saveQuery()\" uib-tooltip=\"Save Query\"><i class=\"fa fa-lg fa-save\"></i></button>\n        </div>\n      </div>\n      <div class=\"col-sm-4\" ng-switch-default>\n        <div class=\"input-group\">\n          <span class=\"input-group-btn\">\n            <button type=\"button\" class=\"btn btn-default\" ng-click=\"execSearch()\"><i class=\"fa fa-lg fa-search\"></i></button>\n          </span>\n          <input type=\"text\" id=\"searchBox\" class=\"form-control\" placeholder=\"text search\" ng-model=\"perspective.searchString\" ng-change=\"searchStringChanged()\" />\n          <span class=\"input-group-btn\" ng-show=\"enableQuery\">\n            <button type=\"button\" class=\"btn btn-default\" ng-click=\"advancedSearch(true)\"><i class=\"fa fa-lg fa-cubes\"></i></button>\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <!-- actual table data -->\n  <dbui-object-table ng-model=\"dataArray\" object-meta-data=\"objectMetaData\" perspective=\"perspective\" config=\"objectTableConfig\"></dbui-object-table>\n\n  <!-- footer: filter, summary, paginator -->\n  <div ng-show=\"filterDescription\" class=\"row\" >\n    <div class=\"col-xs-12 text-center\">\n      Filter: <strong>{{filterDescription}}</strong>\n    </div>\n  </div>\n\n  <div class=\"row\" >\n    <div class=\"col-xs-12 text-center\">\n      <span ng-show=\"dataLoading\"><i class=\"fa fa-spinner fa-pulse\"></i> loading...</span><span ng-show=\"!dataLoading\"><strong>{{pageState.totalRecords}} records total</strong> <span ng-show=\"pageState.totalPages > 1\"> (Showing {{pageState.rangeStart}} to {{pageState.rangeEnd}})</span></span>\n    </div>\n  </div>\n\n  <div ng-show=\"pageState.totalPages > 1\" class=\"row\">\n    <div class=\"col-xs-12 text-center\">\n      <ul uib-pagination ng-model=\"pageState.current\" ng-change=\"pageChanged()\" class=\"pagination-sm\" boundary-links=\"true\"\n        total-items=\"pageState.totalRecords\" items-per-page=\"pageState.pageSize\" max-size=\"10\"\n        previous-text=\"&lsaquo;\" next-text=\"&rsaquo;\" first-text=\"&laquo;\" last-text=\"&raquo;\">\n      </ul>\n    </div>\n  </div>\n\n</div>\n",
	"doc": "Renders the pieces of the objectBrowser: a query-builder/search box, a dbui-object-table, and a paginator.",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "object_browser.html",
	"path": "dbui/reusable/core",
	"provider": {
		"_disp": "dbuiBusinessObjectBrowser",
		"_id": "5W1f4vxWTte-kQvjjgpyLA"
	},
	"rolespec": [
	]
},
{
	"__t": "AngularTemplate",
	"__ver": "sys:6",
	"_class": "AngularTemplate",
	"_id": "nlXSAaacSla8tUPF9oYF7A",
	"content": "<div>\n\n  <div class=\"row\">\n    <div class=\"col-xs-12 dbui-header\">\n      <h3 ng-hide=\"listPerspective.title\">{{labels[boClass] || boClass}} List </h3>\n      <h3 ng-show=\"listPerspective.title\">{{listPerspective.title}}</h3>\n      <button type=\"button\" ng-repeat=\"action in actionList\" class=\"btn btn-action\" ng-click=\"invokeAction(action)\"><i class=\"fa fa-lg\" ng-class=\"action.icon\" ></i> {{ action.label }}</button>\n    </div>\n  </div>\n\n  <dbui-business-object-browser bo-class=\"boClass\" perspective=\"listPerspective\" enable-query=\"true\" enable-search=\"true\" ></dbui-business-object-browser>\n\n</div>\n",
	"doc": "The base template that is rendered for ui-router state dbui.list.",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "list.html",
	"path": "dbui/core/state",
	"provider": {
		"_disp": "dbui_ListCtrl",
		"_id": "Gh1s8LuGThywzsMA7BIMjg"
	},
	"rolespec": [
	]
},
{
	"__t": "AngularTemplate",
	"__ver": "sys:10",
	"_class": "AngularTemplate",
	"_id": "qwW8v9NIReKHdrGiRZl9tg",
	"content": "<div>\n  <div class=\"modal-header\">\n    <h3 class=\"modal-title\">{{title}}</h3>\n  </div>\n  <div class=\"modal-body\">\n    <div class=\"row\">\n      <div class=\"col-sm-6\">\n        <div class=\"picker-list-title\">Available Fields</div>\n        <div class=\"list-group basic-picker-list\">\n\n          <div class=\"list-group-item\" ng-repeat=\"fi in availableFields\" ng-hide=\"fi.included\" ng-click=\"addField(fi)\">\n            {{fi.fieldLabel}}\n          </div>\n        </div>\n      </div>\n      <div class=\"col-sm-6\">\n        <div class=\"picker-list-title\">Displayed Fields</div>\n        <div class=\"list-group basic-picker-list\">\n          <div class=\"list-group-item\" ng-repeat=\"fieldName in fieldList\" ng-class=\"{'selected-item':selectedForMove($index)}\" ng-click=\"selectForMove($index)\">\n\n            <span>{{getFieldLabel(fieldName)}}</span>\n            <button class=\"pull-right\" ng-click=\"remove($index)\"> <i class=\"fa fa-close\"></i></button>\n          </div>\n        </div>\n        <div class=\"text-center\">\n          <button class=\"btn btn-default\" ng-click=\"moveUp()\" ng-disabled=\"!canMoveUp()\"> <i class=\"fa fa-arrow-up\"></i></button>\n          <button class=\"btn btn-default\" ng-click=\"moveDown()\" ng-disabled=\"!canMoveDown()\"> <i class=\"fa fa-arrow-down\"></i></button>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"modal-footer\">\n    <button class=\"btn btn-warning\" type=\"button\" ng-click=\"$close()\">Done</button>\n</div>\n</div>\n",
	"doc": "Renders the body of the perspective editor modal dialog: a list of \"Available Fields\" on the left, and \"Displayed Fields\" on the right, and buttons to manipulate the \"displayed fields\" list.",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "perspective_editor.html",
	"path": "dbui/reusable/dialog",
	"provider": {
		"_disp": "DbuiPerspectiveEditor",
		"_id": "uIn4BYTnSuqQpF8sCTAiCQ"
	},
	"rolespec": [
	]
},
{
	"__t": "AngularTemplate",
	"__ver": "sys:1",
	"_class": "AngularTemplate",
	"_id": "r4BrmS_bRVWPqcl-NAQYiQ",
	"content": "<div>\n  <div class=\"dbui-header modal-header\">\n      <h3>{{title}}</h3>\n      \n  </div>\n  \n  <div class=\"modal-body\">\n      <div class=\"view_container\">\n        <dbui-object-editor the-object=\"theObject\" perspective=\"perspective\"></dbui-object-viewer>\n      </div>\n      \n  </div>\n  \n  <div class=\"modal-footer\">\n    <button class=\"btn btn-warning\" type=\"button\" ng-click=\"$dismiss()\">Cancel</button>\n    <button class=\"btn btn-primary\" type=\"button\" ng-click=\"$close(theObject)\">OK</button>\n  </div>\n</div>",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "object_editor_modal.html",
	"path": "dbui/reusable/dialog",
	"rolespec": [
	]
},
{
	"__t": "AngularTemplate",
	"__ver": "sys:11",
	"_class": "AngularTemplate",
	"_id": "rnTzkxz-SoayJMPtHFEPcA",
	"content": "<div>\n   <div class=\"row\">\n    <div class=\"col-sm-12 col-md-12 col-lg-12 dbui-header\">\n      <h3>View {{labels[boClass] || boClass}} <small uib-tooltip=\"Version: {{theObject.__ver}}\" tooltip-placement=\"bottom-right\">{{theObject._id}}</small></h3>\n      <div style=\"padding-left:12px; font-style:italic\">{{theObject._disp}}</div>\n      <button type=\"button\" ng-repeat=\"action in actionList\" class=\"btn btn-action\" ng-click=\"invokeAction(action)\"><i class=\"fa fa-lg\" ng-class=\"action.icon\" ></i> {{ action.label }}</button>\n    </div>\n  </div>\n\n  \n  <div class=\"action-bar-upper\" ng-show=\"recordActionList.length > 0\">\n      <button type=\"button\" ng-repeat=\"action in recordActionList\" class=\"btn btn-action\" ng-click=\"invokeAction(action)\"><i class=\"fa fa-lg\" ng-class=\"action.icon\" ></i> {{ action.label }}</button>\n  </div>\n  \n\n  <div class=\"dbui-form-container\">\n    <dbui-object-viewer the-object=\"theObject\" perspective=\"viewPerspective\"></dbui-object-viewer>\n  </div>\n  \n  <div class=\"action-bar-lower\" ng-show=\"recordActionList.length > 0\">\n      <button type=\"button\" ng-repeat=\"action in recordActionList\" class=\"btn btn-action\" ng-click=\"invokeAction(action)\"><i class=\"fa fa-lg\" ng-class=\"action.icon\" ></i> {{ action.label }}</button>\n  </div>\n\n  <!-- related -->\n  <dbui-related-viewer ng-if=\"viewPerspective.related\" the-object=\"theObject\" perspective-name=\"viewPerspective.name\" related-spec=\"viewPerspective.related\"></dbui-related-viewer>\n</div>",
	"doc": "The base template that is rendered for ui-router state dbui.view.",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "view.html",
	"path": "dbui/core/state",
	"provider": {
		"_disp": "dbui_ViewCtrl",
		"_id": "-WzjxRZhT-CoPcBycQAiOg"
	},
	"rolespec": [
	]
},
{
	"__t": "AngularTemplate",
	"__ver": "sys:6",
	"_class": "AngularTemplate",
	"_id": "xQhrwwpWR-uqqlbCrQ95xw",
	"content": "\n<div>\n  <div class=\"row\">\n    <div class=\"col-lg-12\">\n      <!--<span ng-show=\"loading\">Loading... <i class=\"fa fa-spinner fa-pulse\"></i></span>-->\n      <span ng-show=\"message\">{{message}}</span>\n    </div>\n  </div>\n</div>",
	"doc": "The template that is a placeholder for ui-router state dbui.home.",
	"module": {
		"_disp": "noonian.dbui",
		"_id": "myP57XGhSNyDKrrcJFvO0Q"
	},
	"name": "home.html",
	"path": "dbui/core/state",
	"provider": {
		"_disp": "dbui_HomePageCtrl",
		"_id": "pc0Bq49iSFq_OCgsejPoWQ"
	},
	"rolespec": [
	]
},
{
	"__ver": "sys:14",
	"_class": "CodeModule",
	"_id": "9f_aeR8HQE-HqePHGgquNg",
	"code": "function (db, auth, Q, _) {\n    var exports = {};\n    var ENGLISH_ID='-9vPfv2lEeSFtiimx_V4dw';\n\t    \n    /**\n     * DbuiMenuBuilder.buildMenu\n     * takes a key, queryies for the menu, and dereferences any submenus\n     * @return array of objects\n     */ \n    var buildMenu = \n    exports.buildMenu = function(key, user) {\n        \n      //Helper function - called when a submenu is built;\n      var dereferenceMenu = function(menuObj) {\n          \n        //this -> bound to the menu item w/ the \"ref\"\n        if(menuObj && menuObj.length > 0)\n          this.submenu = menuObj;\n      }\n    \n      //Helper function - populates labels for a ref menuItem (bound to 'this')\n      var populateLabels = function() {\n        var menuItem = this;\n        var lang = user && user.language ? user.language._id : ENGLISH_ID; \n    \n        return db.LabelGroup.findOne({key:this.ref, 'language._id':lang}).then(\n          function(labelGroupObj) {\n            if(labelGroupObj) {\n              var lg = labelGroupObj.value;\n    \n              //First, check this menu item\n              if(lg._submenu_label)\n                menuItem.label = lg._submenu_label;\n              else\n                menuItem.label = menuItem.ref;\n    \n              //Then, submenu labels...\n              if(menuItem.submenu) {\n                for(var i=0; i < menuItem.submenu.length; i++) {\n                  var itemLabel = menuItem.submenu[i].label;\n                  if(itemLabel && lg[itemLabel])\n                    menuItem.submenu[i].label = lg[itemLabel];\n                }\n              }\n            }\n          });\n      }\n    \n      var cleanupMenu = function(menuItemList) {\n          \n        for(var i=0; i < menuItemList.length; i++) {\n          var m = menuItemList[i];\n          if(!m.action && !m.submenu) {\n            menuItemList.splice(i, 1);\n            i--;\n          }\n        }\n        return menuItemList;\n      }\n    \n      return db.Menu.find({key:key}).then(\n        function(results) {\n          var menuToReturn = [];\n          var promiseList = [];\n    \n          //Iterate through the Menu objects that matched our key...\n          for(var i=0; i < results.length; i++) {\n            var menuObj = results[i];\n    \n            //Check the roles  TODO possibly use $satisfies query instead...\n            if(!menuObj.rolespec || auth.checkRolesForUser(user, menuObj.rolespec)) {\n              var menuDef = menuObj.definition || [];\n              if(!Array.isArray(menuDef))\n                menuDef = [menuDef];\n    \n              //Pull in the menu items\n              for(var j=0; j<menuDef.length; j++) {\n                var menuItem = menuDef[j];\n                menuToReturn.push(menuItem);\n    \n                if(menuItem.ref) {\n                  //Dereference, and populate labels\n                  promiseList.push(\n                    buildMenu(menuItem.ref, user)\n                      .then(dereferenceMenu.bind(menuItem))\n                      .then(populateLabels.bind(menuItem))\n                  );\n                }\n              }\n    \n    \n            }\n          }\n    \n          if(promiseList.length > 0)\n            return Q.all(promiseList).then(function() { return cleanupMenu(menuToReturn)});\n          else\n            return cleanupMenu(menuToReturn);\n    \n        });\n    \n    };\n    \n    return exports;\n}",
	"name": "DbuiMenuBuilder",
	"path": "sys/dbui"
},
{
	"__ver": "sys:17",
	"_class": "CodeModule",
	"_id": "iV-ugHjjQo29KbS3E0UxQg",
	"code": "function (db, auth, config, Q, _) {\n    var exports = {};\n    \n    //Manual 'hoisting' of functions\n    var autogenPerspective;\n    var getPerspective;\n    var getDisplayOptions;\n    \n    \n    \n    //Map perspective type to a function that generates a default perspective of that type:\n    var perspectiveGenerators = {  \n        \n        list:function(targetTypeDescMap, perspectiveConfigItem) {\n            perspectiveConfigItem.list.fields = [];\n            for(var f in targetTypeDescMap) {\n                if(f.indexOf('_') === 0) continue;\n                perspectiveConfigItem.list.fields.push(f);\n            }\n        },\n        \n        picker_list:function(targetTypeDescMap, perspectiveConfigItem) {\n            if(perspectiveConfigItem.list) {\n                perspectiveConfigItem.picker_list = perspectiveConfigItem.list;\n            }\n            else {\n                perspectiveConfigItem.picker_list.fields = [];\n                for(var f in targetTypeDescMap) {\n                    if(f.indexOf('_') === 0) continue;\n                    perspectiveConfigItem.picker_list.fields.push(f);\n                }\n            }\n        },\n        \n        view:function(targetTypeDescMap, perspectiveConfigItem) {\n            perspectiveConfigItem.view.layout = [];\n              for(var f in targetTypeDescMap) {\n                  if(f.indexOf('_') === 0) continue;\n                  perspectiveConfigItem.view.layout.push(f);\n              }\n        },\n        \n        'dialog-view':function(targetTypeDescMap, perspectiveConfigItem) {\n            if(perspectiveConfigItem.view) {\n                perspectiveConfigItem['dialog-view'] = perspectiveConfigItem.view;\n            }\n            else {\n              perspectiveConfigItem['dialog-view'].layout = [];\n            \n              for(var f in targetTypeDescMap) {\n                  if(f.indexOf('_') === 0) continue;\n                  perspectiveConfigItem['dialog-view'].layout.push(f);\n              }\n            }\n        },\n        \n        edit: function(targetTypeDescMap, perspectiveConfigItem) {\n            perspectiveConfigItem.edit.layout = [];\n              for(var f in targetTypeDescMap) {\n                  if(f.indexOf('_') === 0) continue;\n                  perspectiveConfigItem.edit.layout.push(f);\n              }\n        }\n    };\n    \n    /**\n     * @private\n     */\n    var getTypeDescMap = function(boClass) {\n        \n        if(db[boClass]) {\n            return db[boClass]._bo_meta_data.type_desc_map;\n        }\n        else if(boClass.indexOf('#') > 0) {\n            var hashPos = boClass.indexOf('#');\n            var baseClass = boClass.substring(0, hashPos);\n            var subField = boClass.substring(hashPos+1, boClass.length).replace(/#/g, '.');\n            \n            var fieldTd = db[baseClass]._bo_meta_data.getTypeDescriptor(subField);\n            if(fieldTd) {\n                if(fieldTd instanceof Array) {\n                    fieldTd = fieldTd[0];\n                }\n                return fieldTd.type_desc_map;\n            }\n        }\n        else {\n            throw new Error('Invalid class name '+boClass);\n        }\n        \n    };\n    \n    /**\n     * DbuiPerspectiveBuilder.autogenPerspective\n     */\n    autogenPerspective = \n    exports.autogenPerspective = function(boClass, perspectiveName, perspectiveType, perspectiveConfigItem) {\n      console.log(\"Auto-generating perspective: \"+perspectiveName+\".\"+boClass+\".\"+perspectiveType);\n    \n      var td = getTypeDescMap(boClass); //db[boClass]._bo_meta_data.type_descriptor;\n      var key = 'sys.dbui.perspective.'+perspectiveName+'.'+boClass;\n    \n    \n      if(!perspectiveConfigItem)\n        perspectiveConfigItem = {};\n    \n      var deferred = Q.defer();\n    \n      //If we're not generating the default perspective, see if there's one to copy...\n      if(perspectiveName !== \"default\") {\n        var defaultKey = 'sys.dbui.perspective.default.'+boClass;\n    \n        config.getParameter(defaultKey, false)\n          .then( function(defaultConfigItem) {\n            if(defaultConfigItem && defaultConfigItem[perspectiveType]) {\n              //We found the default... copy from it in below then().\n              return defaultConfigItem;\n            }\n            else {\n              //No default for this perspective/type; auto-generate and copy from it..\n              return autogenPerspective(boClass, 'default', perspectiveType, defaultConfigItem);\n            }\n    \n          })\n          .then(function(perspectiveToCopyFrom) {\n            perspectiveConfigItem[perspectiveType] = perspectiveToCopyFrom[perspectiveType];\n            deferred.resolve(perspectiveConfigItem);\n            //Don't save the non-default perspective\n            // config.saveParameter(key, perspectiveConfigItem).then(\n            //   function() {deferred.resolve(perspectiveConfigItem)}\n            // );\n          });\n      }\n      else { //Generating a default perspective\n        \n        if(!perspectiveGenerators[perspectiveType]) {\n            deferred.reject(\"bad perspectiveType: \"+perspectiveType);\n        }\n        else {\n            perspectiveConfigItem[perspectiveType] = {};\n            \n            perspectiveGenerators[perspectiveType](td, perspectiveConfigItem);\n            \n            config.saveParameter(key, perspectiveConfigItem).then(\n                function() {deferred.resolve(perspectiveConfigItem);},\n                function(err) {deferred.reject(err)}\n            );\n        }\n        \n      }\n    \n      return deferred.promise;\n    }\n    \n    /**\n     * DbuiPerspectiveBuilder.getDisplayOptions\n     * @private\n     *  Merges sys.dbui.displayoptions w/ sys.dbui.displayoptions.SpeecificClass\n     *  @return an object: {field_name:{customizations}}\n     **/\n    getDisplayOptions = function(boClass, userId, perspectiveName, perspectiveType) {\n      var rootKey = 'sys.dbui.displayoptions';\n      var classKey = rootKey+'.'+boClass;\n    \n    \n      var promiseArray = [\n          config.getCustomizedParameter(rootKey, userId),\n          config.getCustomizedParameter(classKey, userId)\n      ];\n        \n      //Also, incorporate composite field 'sub-perspectives' \n      var typeDescMap = getTypeDescMap(boClass);//db[boClass]._bo_meta_data.type_descriptor;\n    //   var composites = [];\n      \n    //   _.forEach(typeDescMap, function(td, fieldName) {\n    //       if(td.type === 'composite') {\n    //           composites.push(fieldName);\n    //           promiseArray.push(getPerspective(boClass+'#'+fieldName, perspectiveName, perspectiveType, userId));\n    //       }\n    //       //TODO check for named composites???\n    //   });\n    \n      return Q.all(promiseArray).then(function(resultArr) {\n        var rootObj = resultArr[0] || {};\n        var classObj = resultArr[1] || {};\n        var result = {};\n        \n        //the base sys.dbui.displayoptions contains params for specific field types.\n        // the class-specific one contains params based on field name...\n    \n        //Iteratate through the type descriptor's to map params to appropriate field names:\n        _.forEach(typeDescMap, function(td, fieldName) {\n          if(classObj[fieldName]) {\n            result[fieldName] = rootObj[td.type] ? _.clone(rootObj[td.type]) : {};\n            _.merge(result[fieldName], classObj[fieldName]);\n          }\n          else if(rootObj[td.type]) {\n            result[fieldName] = _.clone(rootObj[td.type]);\n          }\n        });\n        \n        //Merge any composite 'sub-perspectives' into result\n        // var arrIndex = 2; //remainder of resultArr are result of getPerspective() calls\n        // _.forEach(composites, function(fieldName) {\n        //     if(!result[fieldName]) {\n        //         result[fieldName] = {};\n        //     }\n        //     if(!result[fieldName].perspective) {\n        //         result[fieldName].perspective = {};\n        //     }\n        //     result[fieldName].perspective[perspectiveType] = resultArr[arrIndex];\n        //     arrIndex++;\n        // });\n    \n        return result;\n      });\n    }\n    \n    /**\n     * DbuiPerspectiveBuilder.getPerspective\n     */\n    getPerspective = \n    exports.getPerspective = function(boClass, perspectiveName, perspectiveType, userId) {\n    \n      var rootKey = 'sys.dbui.perspective';         //any perspective, any BO\n      var baseKey = rootKey+'.'+perspectiveName;    //specific perspective, any BO\n      var classKey = baseKey+'.'+boClass;           //specific perspective, specific BO\n      var wildcardKey = rootKey+'.*.'+boClass;      //any perspective, specific BO\n      \n      //Skip merging of rootKey and baseKey perspectives for composite perspectives\n      var skipMerge = boClass.indexOf('#') > -1; //e.g. BoClass#compositeField\n    \n      return config.getCustomizedParameter(classKey, userId).then(function(result) {\n    \n        var promiseArray;\n        \n        if(!skipMerge) {\n            promiseArray = [\n              config.getCustomizedParameter(rootKey, userId),\n              config.getCustomizedParameter(baseKey, userId),\n              config.getCustomizedParameter(wildcardKey, userId)\n            ];\n        }\n        else {\n            promiseArray = [Q(false), Q(false), Q(false)];\n        }\n    \n        if(result && result[perspectiveType]) {\n          promiseArray.push(Q(result));\n        }\n        else {\n          promiseArray.push(\n            autogenPerspective(boClass, perspectiveName, perspectiveType, result)\n          );\n        }\n    \n        //Finally add in displayoptions:\n        promiseArray.push(getDisplayOptions(boClass, userId, perspectiveName, perspectiveType));\n    \n        return Q.all(promiseArray);\n      })\n      .then(function(configArray) {\n    \n        //so _.merge() behaves properly w/ array values:\n        var arrayMerger = function(objectVal, sourceVal) {\n          if(_.isArray(sourceVal))\n            return sourceVal;\n          else\n            return undefined; //default merger\n        }\n    \n        var root = configArray[0] || {};\n        var base = configArray[1] || {};\n        var wild = configArray[2] || {};\n        var clazz = configArray[3];\n        var displayOptions = configArray[4];\n    \n        // console.log('ROOT %j BASE %j CLAZZ %j', root, base, clazz);\n    \n        var merged = _.merge(root, base, arrayMerger); //base onto root...\n        _.merge(merged, wild, arrayMerger);  //wild onto merged base/root\n        _.merge(merged, clazz, arrayMerger); //clazz atop the whole thing\n    \n        var perspectiveObj = merged[perspectiveType];\n    \n        if(!perspectiveObj.fieldCustomizations) {\n          perspectiveObj.fieldCustomizations = {};\n        }\n    \n        //merge fieldCustomizations atop more general displayOptions\n        _.merge(displayOptions, perspectiveObj.fieldCustomizations);\n        perspectiveObj.fieldCustomizations = displayOptions;\n    \n        return perspectiveObj;\n    \n    \n      });\n    \n    \n    };\n    \n    \n    return exports;\n}",
	"name": "DbuiPerspectiveBuilder",
	"path": "sys/dbui"
},
{
	"__ver": "sys:5",
	"_class": "CodeModule",
	"_id": "pwMVRvdjSU-2Ak0BWDA6AA",
	"code": "function (db, _, Q) {\n    var exports = {};\n    var ENGLISH_ID='-9vPfv2lEeSFtiimx_V4dw';\n\n    /**\n     * @private\n     */\n    var autogenLabelGroup = function(className) {\n      var key = 'sys.dbui.bo.'+className;\n      \n      var typeDescMap;\n      \n      if(db[className]) {\n          typeDescMap = db[className]._bo_meta_data.type_descriptor;\n      }\n      else if(className.indexOf('#') > -1) {\n          var hashPos = className.indexOf('#');\n          var baseClass = className.substring(0, hashPos);\n          var field = className.substring(hashPos+1);\n          \n          var td = db[baseClass] && db[baseClass]._bo_meta_data.type_descriptor[field];\n          \n          if(td instanceof Array) {\n              td = td[0]\n          }\n          \n          if(td && td.type === 'composite') {\n              typeDescMap = td.type_desc_map;\n          }\n      }\n    \n      if(typeDescMap) {\n        console.log(\"Auto-generating LabelGroup for %s\", className);\n         //Create a LabelGroup for i18n\n         var lg = new db.LabelGroup({\n           key:key,\n           language:{_id:'-9vPfv2lEeSFtiimx_V4dw'},\n           value:{}\n         });\n    \n         for(var f in typeDescMap) {\n           if(f.indexOf('_') !== 0) {\n             lg.value[f] = _.startCase(f);\n           }\n         }\n    \n         return lg.save();\n       }\n       return null;\n    };\n    \n    /**\n     * I18n.getLabelGroup\n     * Retrieve label group for a particular user.\n     */\n    exports.getLabelGroup = function(key, user) {\n      var lang = user && user.language ? user.language._id : ENGLISH_ID; //default to english\n    \n      return db.LabelGroup.findOne({key:key, 'language._id':lang}).then(function(lg){\n        return lg && lg.value;\n      });\n    \n    };\n    \n    /**\n     * I18n.aggregateLabelGroups\n     * Retrieve multiple label groups for a particular user.\n     */\n    exports.aggregateLabelGroups = function(keyArr, user) {\n      var lang = user && user.language ? user.language._id : ENGLISH_ID; //default to english\n    \n      return db.LabelGroup.find({key:{$in:keyArr}, 'language._id':lang}).then(function(lgArr){\n          var result = {};\n          _.forEach(lgArr, function(lg) {\n              result[lg.key] = lg.value;\n          });\n        return result;\n      });\n    \n    };\n    \n    /**\n     * I18n.getBoLabelGroup\n     * *resolves immediate reference sub-fields; TODO also resolve inheritance!\n    */\n    exports.getBoLabelGroup = function(className, user) {\n      var lang = user && user.language ? user.language._id : ENGLISH_ID; //default to english\n    \n    \n      var keyPrefix = 'sys.dbui.bo.';\n      var baseKey = keyPrefix+className;\n    \n      var boMetaData;\n      \n      if(db[className]) {\n          boMetaData = db[className]._bo_meta_data;\n      }\n      else if(className.indexOf('#') > -1) {\n          var hashPos = className.indexOf('#');\n          var baseClass = className.substring(0, hashPos);\n          var field = className.substring(hashPos+1);\n          \n          var td = db[baseClass] && db[baseClass]._bo_meta_data.type_descriptor[field];\n          \n          if(td instanceof Array) {\n              td = td[0]\n          }\n          \n          if(!td || td.type !== 'composite') {\n              throw new Error('Invalid class name: '+className);\n          }\n          \n          boMetaData = {\n              type_descriptor:td.type_desc_map\n          };\n      }\n      else {\n          throw new Error('Invalid class name: '+className);\n      }\n    \n      var queryKeyList = [baseKey]; //LabelGroup keys we'll be asking for\n    \n      var fieldToLgKey = {}; //Maps a ref field name to correpsonding LabelGroup key\n    \n      //first, determine all the reference fields and build a list of corresponding LabelGroup keys.\n      _.forEach(boMetaData.type_descriptor, function(td, fieldName) {\n        if(td.type === 'reference') {\n          var myKey = keyPrefix+td.ref_class;\n          queryKeyList.push(myKey);\n          fieldToLgKey[fieldName] = myKey;\n        }\n      });\n    \n      //Query for all the necessary LabelGroup's\n      return db.LabelGroup.find({key:{$in:queryKeyList}, 'language._id':lang}).then(function(lgList){\n        var lgMap = _.indexBy(lgList, 'key');\n        var composite;\n        var initPromise;\n    \n        if(lgMap[baseKey]) {\n          composite = lgMap[baseKey].value;\n          initPromise = Q(true);\n        }\n        else {\n          initPromise = autogenLabelGroup(className).then(function(newLg) {\n            composite = newLg.value;\n          });\n        }\n    \n        return initPromise.then(function() {\n          _.forEach(fieldToLgKey, function(lgKey, fieldName) {\n            if(lgMap[lgKey]) {\n              var fieldPrefix = fieldName+'.';\n              var labelPrefix = ''; //(composite[fieldName] || fieldName)+': ';\n    \n              _.forEach(lgMap[lgKey].value, function(subLabel, subField) {\n                composite[fieldPrefix+subField] = labelPrefix+subLabel;\n              });\n            }\n          });\n    \n          return composite;\n        });\n      });\n    };\n    \n    \n    return exports;\n}",
	"name": "I18n",
	"path": "sys/api"
},
{
	"__ver": "sys:5",
	"_class": "Config",
	"_id": "076TmOduSve4_ZvYrqSLig",
	"allow_customize": false,
	"key": "sys.dbui.perspective.directives.AngularProvider",
	"rolespec": [
	],
	"system": true,
	"value": {
		"edit": {
			"layout": [
				"module",
				"path",
				"name",
				"type",
				"doc",
				"parameters",
				"function"
			]
		},
		"list": {
			"fields": [
				"path",
				"module",
				"name",
				"type",
				"doc"
			],
			"filter": {
				"path": {
					"$notcontains": "^dbui/|^noonian/"
				},
				"type": "directive"
			},
			"sort": {
				"path": "asc"
			},
			"title": "Angular Directives"
		},
		"view": {
			"layout": [
				"module",
				"path",
				"name",
				"type",
				"doc",
				"parameters",
				"function"
			]
		}
	}
},
{
	"__ver": "sys:1",
	"_class": "Config",
	"_id": "0KZWeNuMSJyW7QImA9AndA",
	"key": "sys.dbui.perspective.default.related[FieldType_fieldtypes].FieldTypeUiSpec",
	"system": true,
	"value": {
		"list": {
			"fields": [
				"key",
				"fieldtypes",
				"for_editing",
				"for_viewing",
				"for_editing_array",
				"for_viewing_array"
			]
		}
	}
},
{
	"__ver": "sys:2",
	"_class": "Config",
	"_id": "0tydbMgIRdudkdXTyXt7qA",
	"allow_customize": false,
	"key": "sys.dbui.perspective.default.RemotePackageRepository",
	"rolespec": [
	],
	"system": true,
	"value": {
		"edit": {
			"layout": [
				"name",
				[
					"packages",
					"package_keys"
				],
				"url",
				"auth"
			]
		},
		"list": {
			"fields": [
				"name",
				"packages",
				"package_keys"
			]
		},
		"view": {
			"layout": [
				"name",
				[
					"packages",
					"package_keys"
				],
				"url",
				"auth"
			],
			"recordActions": [
				"edit",
				"delete",
				{
					"icon": "fa-bolt",
					"label": "Run Update",
					"ws": "pkg/runUpdate"
				}
			]
		}
	}
},
{
	"__ver": "sys:3",
	"_class": "Config",
	"_id": "1Ot34-g6Q12L6OoxKi401A",
	"key": "sys.dbui.perspective.default.TwoFactorAuthLoginRequest",
	"system": false,
	"value": {
		"edit": {
			"layout": [
				"code",
				"created_date",
				"ip",
				"modified_date",
				"user",
				"validated"
			]
		},
		"list": {
			"fields": [
				"code",
				"created_date",
				"user"
			]
		},
		"view": {
			"layout": [
				"code",
				"created_date",
				"ip",
				"modified_date",
				"user",
				"validated"
			]
		}
	}
},
{
	"__ver": "sys:3",
	"_class": "Config",
	"_id": "1nme6hlATsews3AMdvHyaA",
	"allow_customize": false,
	"key": "sys.dbui.perspective.controllers.related[AngularModule_module].AngularProvider",
	"system": true,
	"value": {
		"list": {
			"fields": [
				"path",
				"name",
				"doc"
			],
			"filter": {
				"type": "controller"
			},
			"sort": {
				"path": "asc"
			},
			"title": "Controllers"
		}
	}
},
{
	"__ver": "sys:1",
	"_class": "Config",
	"_id": "2kCebqAhSq23kIfWjZ7H5Q",
	"allow_customize": false,
	"key": "sys.dbui.sidebar_menu",
	"rolespec": [
	],
	"system": false,
	"value": "dbui.menu.default_user"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Config",
	"_id": "447ODSNfR4S1BcDTKHehoA",
	"key": "sys.dbui.perspective.default.BusinessObjectPackageUpdate",
	"system": true,
	"value": {
		"edit": {
			"layout": [
				"updates",
				"target_object",
				"package"
			]
		},
		"list": {
			"fields": [
				"package",
				"target_object",
				"updates"
			]
		},
		"view": {
			"layout": [
				"package",
				"target_object",
				"updates"
			]
		}
	}
},
{
	"__pkg": "sys",
	"__ver": "sys:2",
	"_class": "Config",
	"_id": "4oreVV9bQE6POFFq8ruL1Q",
	"allow_customize": true,
	"key": "sys.dbui.perspective.default.BusinessObjectDef",
	"rolespec": [
	],
	"system": true,
	"value": {
		"edit": {
			"layout": [
				[
					"class_name",
					"system"
				],
				[
					"superclass",
					"abstract"
				],
				[
					"doc"
				],
				[
					"definition"
				]
			]
		},
		"list": {
			"fields": [
				"class_name",
				"doc"
			],
			"filter": {
				"system": {
					"$isfalse": ""
				}
			},
			"sort": {
				"class_name": "asc"
			}
		},
		"picker_list": {
			"fields": [
				"class_name",
				"system",
				"doc"
			],
			"sort": {
				"class_name": "asc"
			}
		},
		"view": {
			"layout": [
				[
					"class_name",
					"system"
				],
				[
					"superclass",
					"abstract"
				],
				[
					"doc"
				],
				[
					"definition"
				]
			],
			"related": [
				{
					"class": "DataTrigger",
					"field": "business_object"
				},
				{
					"class": "DataAccessControl",
					"field": "business_object"
				}
			]
		}
	}
},
{
	"__ver": "sys:1",
	"_class": "Config",
	"_id": "5wAcBhU-QWqnwR0HoTd5uw",
	"key": "sys.dbui.perspective.default.BusinessObjectDef",
	"system": false,
	"user": {
		"_disp": "admin",
		"_id": "vl22Nf2XTNym2-X90sxOag"
	},
	"value": {
		"list": {
			"savedQueries": [
				{
					"query": {
						"system": {
							"$istrue": true
						}
					},
					"title": "System BO's"
				}
			]
		}
	}
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Config",
	"_id": "6VBJYXFFQyq9ODPG8dZMSg",
	"key": "sys.dbui.perspective.default.DataAccessControl",
	"system": true,
	"value": {
		"edit": {
			"layout": [
				[
					"business_object"
				],
				[
					"allow_read",
					"allow_create"
				],
				[
					"allow_update",
					"allow_delete"
				],
				[
					"rolespec"
				],
				[
					"condition"
				],
				[
					"field_restrictions"
				]
			]
		},
		"list": {
			"fields": [
				"business_object",
				"rolespec",
				"allow_create",
				"allow_read",
				"allow_update",
				"allow_delete"
			],
			"sort": {
				"business_object": "asc"
			}
		},
		"view": {
			"layout": [
				[
					"business_object"
				],
				[
					"allow_read",
					"allow_create"
				],
				[
					"allow_update",
					"allow_delete"
				],
				[
					"rolespec"
				],
				[
					"condition"
				],
				[
					"field_restrictions"
				]
			]
		}
	}
},
{
	"__ver": "sys:3",
	"_class": "Config",
	"_id": "6eMazeR1Q_yJMeYWnj0VhQ",
	"allow_customize": true,
	"key": "sys.dbui.sidebar_menu",
	"rolespec": [
		"FnQ_eBYITOSC8kJA4Zul5g"
	],
	"system": false,
	"value": "dbui.menu.dev"
},
{
	"__pkg": "sys",
	"__ver": "sys:2",
	"_class": "Config",
	"_id": "6zyebkpAS_m3IGJNU3-txQ",
	"allow_customize": false,
	"key": "sys.dbui.perspective.default.WebService",
	"rolespec": [
	],
	"system": true,
	"value": {
		"edit": {
			"layout": [
				"path",
				"doc",
				"rolespec",
				"function"
			]
		},
		"list": {
			"fields": [
				"path",
				"rolespec",
				"doc"
			],
			"filter": {
				"path": {
					"$notcontains": "^/sys/|^/dbui/|^/pkg/"
				}
			},
			"savedQueries": [
				{
					"query": {
						"path": {
							"$contains": "^/sys/|^/dbui/|^/pkg/"
						}
					},
					"title": "System Webservices"
				}
			],
			"sort": {
				"path": "asc"
			}
		},
		"picker_list": {
			"fields": [
				"path",
				"rolespec",
				"doc"
			],
			"filter": {
				"path": {
					"$notcontains": "^/sys/|^/dbui/|^/pkg/"
				}
			},
			"savedQueries": [
				{
					"query": {
						"path": {
							"$contains": "^/sys/|^/dbui/|^/pkg/"
						}
					},
					"title": "System Webservices"
				}
			],
			"sort": {
				"path": "asc"
			}
		},
		"view": {
			"layout": [
				"path",
				"doc",
				"rolespec",
				"function"
			]
		}
	}
},
{
	"__ver": "sys:1",
	"_class": "Config",
	"_id": "7yVPwbASRIuobIrUyzuFLQ",
	"key": "sys.dbui.perspective.default.related[BusinessObjectPackage_package].UpdateLog",
	"system": false,
	"value": {
		"list": {
			"fields": [
				"timestamp",
				"object_class",
				"object_id",
				"update_type",
				"package",
				"external_pkg"
			],
			"sort": {
				"timestamp": "desc"
			}
		}
	}
},
{
	"__ver": "sys:5",
	"_class": "Config",
	"_id": "8hfoCeuHQbaV11P33vcTTw",
	"allow_customize": false,
	"key": "sys.dbui.perspective.non_perspectives.Config",
	"rolespec": [
	],
	"system": true,
	"value": {
		"edit": {
			"layout": [
				[
					"key"
				],
				[
					"value"
				],
				[
					"allow_customize",
					"user"
				],
				"rolespec"
			]
		},
		"list": {
			"fields": [
				"key",
				"value"
			],
			"filter": {
				"$and": [
					{
						"key": {
							"$notcontains": "sys.dbui.perspective"
						}
					},
					{
						"key": {
							"$notcontains": "sys.dbui.displayoptions"
						}
					}
				]
			},
			"sort": {
				"key": "asc"
			}
		},
		"view": {
			"layout": [
				"key",
				"value",
				[
					"allow_customize",
					"user"
				],
				"rolespec"
			]
		}
	}
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Config",
	"_id": "9TAnJ5tyQ7GxTX0sv3nXtw",
	"allow_customize": true,
	"key": "sys.dbui.perspective.default.Language",
	"system": true,
	"value": {
		"edit": {
			"layout": [
				"name",
				"code"
			]
		},
		"list": {
			"fields": [
				"name",
				"code"
			],
			"sort": {
				"name": "asc"
			}
		},
		"picker_list": {
			"fields": [
				"name"
			],
			"sort": {
				"name": "asc"
			}
		},
		"view": {
			"layout": [
				"name",
				"code"
			]
		}
	}
},
{
	"__pkg": "sys",
	"__ver": "sys:3",
	"_class": "Config",
	"_id": "BVZPlBKCSVaoqTN8h3lvTA",
	"allow_customize": false,
	"key": "sys.dbui.perspective.default.Config",
	"system": true,
	"value": {
		"edit": {
			"layout": [
				[
					"key"
				],
				[
					"value"
				],
				[
					"allow_customize",
					"user"
				],
				"rolespec"
			]
		},
		"list": {
			"fields": [
				"key",
				"value"
			],
			"sort": {
				"key": "asc"
			}
		},
		"view": {
			"layout": [
				"key",
				"value",
				[
					"allow_customize",
					"user"
				],
				"rolespec"
			]
		}
	}
},
{
	"__pkg": "sys",
	"__ver": "sys:5",
	"_class": "Config",
	"_id": "BfVWyf-jTjaOPaH3AZYgig",
	"allow_customize": false,
	"key": "sys.dbui.perspective.default.BusinessObjectPackage",
	"rolespec": [
	],
	"system": true,
	"value": {
		"edit": {
			"layout": [
				"package_file",
				"key",
				[
					"name",
					"enable_building"
				],
				"description",
				"build_config",
				"installed_version",
				[
					"major_version",
					"minor_version"
				],
				"dependencies",
				"manifest",
				"on_install_fn"
			]
		},
		"list": {
			"fields": [
				"key",
				"name",
				"enable_building",
				"major_version",
				"minor_version"
			]
		},
		"picker_list": {
			"fields": [
				"key",
				"name",
				"major_version",
				"minor_version"
			]
		},
		"view": {
			"layout": [
				"package_file",
				"key",
				[
					"name",
					"enable_building"
				],
				"description",
				"build_config",
				"installed_version",
				[
					"major_version",
					"minor_version"
				],
				"dependencies",
				"manifest",
				"on_install_fn"
			],
			"recordActions": [
				"edit",
				"delete",
				{
					"icon": "fa-cube",
					"label": "Generate Package",
					"ws": "pkg/buildPackage"
				},
				{
					"icon": "fa-download",
					"label": "Install Package",
					"ws": "pkg/installPackage"
				},
				{
					"icon": "fa-arrow-right",
					"label": "To Filesystem",
					"ws": "pkg/toFilesystem"
				}
			],
			"related": [
				{
					"class": "UpdateLog",
					"field": "package"
				}
			]
		}
	}
},
{
	"__ver": "sys:2",
	"_class": "Config",
	"_id": "CMHfC8YPTO6sEeNhLZmTVA",
	"allow_customize": false,
	"key": "sys.dbui.homeAction",
	"system": false,
	"value": {
		"params": {
			"key": "dbui.core.oob_home"
		},
		"state": "dbui.custompage"
	}
},
{
	"__ver": "sys:3",
	"_class": "Config",
	"_id": "CVk1ivsMS0qS1kCvrEk0dg",
	"allow_customize": false,
	"key": "sys.dbui.perspective.default.JsonResource",
	"rolespec": [
	],
	"system": false,
	"value": {
		"edit": {
			"layout": [
				"path",
				"name",
				"doc",
				"content",
				"rolespec"
			]
		},
		"list": {
			"fields": [
				"path",
				"name"
			]
		},
		"picker_list": {
			"fields": [
				"path",
				"name"
			]
		},
		"view": {
			"layout": [
				"path",
				"name",
				"doc",
				"content",
				"rolespec"
			]
		}
	}
},
{
	"__ver": "sys:6",
	"_class": "Config",
	"_id": "Cu-EL7B2SZyDpkAj_QzZIg",
	"allow_customize": false,
	"key": "sys.two_factor_auth",
	"rolespec": [
	],
	"system": false,
	"value": {
		"condition": "TEST_ROLE",
		"implementation": "SimpleTest",
		"refresh_period": "24",
		"userToPhone": {
			"phoneField": "phone",
			"refClass": "Person",
			"refField": "user"
		}
	}
},
{
	"__ver": "sys:1",
	"_class": "Config",
	"_id": "CzEs6oTgTrKrikVdgl4I2g",
	"key": "sys.dbui.perspective.factories.related[AngularModule_module].AngularTemplate",
	"system": true,
	"value": {
		"list": {
			"fields": [
				"path",
				"name",
				"module"
			],
			"sort": {
				"path": "asc"
			}
		}
	}
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Config",
	"_id": "DRm8hzYDQLiIv1iOV_bJig",
	"allow_customize": false,
	"key": "sys.dbui.perspective.default.FileResource",
	"system": true,
	"value": {
		"edit": {
			"layout": [
				"path",
				"name",
				"doc",
				"content",
				"rolespec"
			]
		},
		"folder": {
			"fields": [
				"content"
			],
			"pathField": "path"
		},
		"list": {
			"fields": [
				"path",
				"name",
				"content",
				"rolespec"
			]
		},
		"view": {
			"layout": [
				"path",
				"name",
				"doc",
				"content",
				"rolespec"
			]
		}
	}
},
{
	"__pkg": "sys",
	"__ver": "sys:3",
	"_class": "Config",
	"_id": "EYjxKQGORteqG0d9VRTxZA",
	"allow_customize": false,
	"key": "sys.dbui.perspective.default.QueryOp",
	"system": true,
	"value": {
		"edit": {
			"layout": [
				"name",
				[
					"types",
					"for_array"
				],
				"evaluate",
				"stringify",
				"toMongo"
			]
		},
		"list": {
			"fields": [
				"name",
				"types",
				"for_array"
			],
			"sort": {
				"name": "asc"
			}
		},
		"view": {
			"layout": [
				"name",
				[
					"types",
					"for_array"
				],
				"evaluate",
				"stringify",
				"toMongo"
			]
		}
	}
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Config",
	"_id": "EvzkCjcMT5eBgEiPDWaObA",
	"allow_customize": false,
	"key": "sys.dbui.perspective.default.WebResource",
	"system": true,
	"value": {
		"edit": {
			"layout": [
				"path",
				"name",
				"doc",
				"rolespec"
			]
		},
		"folder": {
			"fields": [
				"name"
			],
			"pathField": "path"
		},
		"list": {
			"fields": [
				"path",
				"name"
			],
			"sort": {
				"path": "asc"
			}
		},
		"view": {
			"layout": [
				"path",
				"name",
				"doc",
				"rolespec"
			]
		}
	}
},
{
	"__pkg": "sys",
	"__ver": "sys:3",
	"_class": "Config",
	"_id": "F4LgLaVTSKKPaDJuVk06zA",
	"allow_customize": false,
	"key": "sys.dbui.perspective",
	"rolespec": [
	],
	"system": false,
	"value": {
		"edit": {
			"actions": [
				"list",
				"new"
			],
			"recordActions": [
				"save",
				"delete",
				"view"
			]
		},
		"folder": {
			"actions": [
				"new"
			]
		},
		"list": {
			"actions": [
				"new"
			],
			"recordActions": [
				"view",
				"edit"
			],
			"tableActions": [
				"edit_perspective",
				"refresh_data",
				{
					"icon": "fa-external-link-square",
					"label": "Export CSV",
					"ui_action": "dbui.export_csv"
				}
			]
		},
		"view": {
			"actions": [
				"list",
				"new"
			],
			"recordActions": [
				"edit",
				"delete",
				"duplicate"
			]
		}
	}
},
{
	"__ver": "sys:9",
	"_class": "Config",
	"_id": "F51v_xUnQgehAn3ZVR8vgA",
	"allow_customize": false,
	"key": "sys.dbui.perspective.default.AngularApp",
	"rolespec": [
	],
	"system": true,
	"value": {
		"edit": {
			"layout": [
				"path",
				"name",
				"rolespec",
				"module",
				"css_dependencies",
				"js_dependencies",
				"config_function",
				"head",
				"body"
			]
		},
		"list": {
			"fields": [
				"path",
				"name",
				"module"
			]
		},
		"view": {
			"layout": [
				"path",
				"name",
				"rolespec",
				"module",
				"css_dependencies",
				"js_dependencies",
				"config_function",
				"head",
				"body"
			]
		}
	}
},
{
	"__ver": "sys:5",
	"_class": "Config",
	"_id": "GDzTJ1SERbyhOIKYYkNkNA",
	"allow_customize": false,
	"key": "sys.dbui.perspective.perspectives.Config",
	"rolespec": [
	],
	"system": true,
	"value": {
		"edit": {
			"layout": [
				[
					"key"
				],
				[
					"value"
				],
				[
					"allow_customize",
					"user"
				],
				"rolespec"
			]
		},
		"list": {
			"fields": [
				"key",
				"value"
			],
			"filter": {
				"$or": [
					{
						"key": {
							"$contains": "sys.dbui.perspective"
						}
					},
					{
						"key": {
							"$contains": "sys.dbui.displayoptions"
						}
					}
				]
			},
			"sort": {
				"key": "asc"
			},
			"title": "Perspectives"
		},
		"view": {
			"layout": [
				"key",
				"value",
				[
					"allow_customize",
					"user"
				],
				"rolespec"
			]
		}
	}
},
{
	"__ver": "sys:7",
	"_class": "Config",
	"_id": "GRaSJrg4QKWVnP6Dwda0vA",
	"allow_customize": false,
	"key": "sys.dbui.perspective.default.AngularProvider",
	"system": true,
	"value": {
		"edit": {
			"layout": [
				"module",
				"path",
				"name",
				"type",
				"doc",
				"parameters",
				"function"
			]
		},
		"list": {
			"fields": [
				"path",
				"module",
				"name",
				"type",
				"doc"
			],
			"sort": {
				"path": "asc"
			}
		},
		"picker_list": {
			"fields": [
				"path",
				"module",
				"name",
				"type",
				"doc"
			],
			"sort": {
				"path": "asc"
			}
		},
		"view": {
			"layout": [
				"module",
				"path",
				"name",
				"type",
				"doc",
				"parameters",
				"function"
			],
			"related": [
				{
					"class": "AngularTemplate",
					"field": "provider"
				}
			]
		}
	}
},
{
	"__ver": "sys:4",
	"_class": "Config",
	"_id": "Hj3COO0iQyufTftJqfUt_Q",
	"allow_customize": false,
	"key": "twilio.auth",
	"rolespec": [
	],
	"system": false,
	"value": {
		"phone": "+1##########",
		"sid": "TWILIO_SID",
		"token": "TWILIO_TOKEN"
	}
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Config",
	"_id": "HjJ3QzvGSda4mliXCksO_A",
	"key": "sys.dbui.perspective.default.related[BusinessObjectDef_business_object].DataAccessControl",
	"system": true,
	"value": {
		"list": {
			"fields": [
				"rolespec",
				"allow_create",
				"allow_read",
				"allow_update",
				"allow_delete"
			]
		}
	}
},
{
	"__ver": "sys:3",
	"_class": "Config",
	"_id": "I5AizP_DTgqHdp3MFvdsrw",
	"allow_customize": false,
	"key": "sys.dbui.perspective.default.ScheduleTrigger#schedule",
	"rolespec": [
	],
	"system": false,
	"value": {
		"edit": {
			"layout": [
				[
					"second",
					"day_of_month"
				],
				[
					"minute",
					"month"
				],
				[
					"hour",
					"day_of_week"
				]
			]
		},
		"view": {
			"layout": [
				"second",
				"minute",
				"hour",
				"day_of_month",
				"month",
				"day_of_week"
			]
		}
	}
},
{
	"__ver": "sys:8",
	"_class": "Config",
	"_id": "I_f0Ld-gSp2MtcPoVF9YaQ",
	"key": "sys.user.preferences",
	"system": false,
	"user": {
		"_disp": "admin",
		"_id": "vl22Nf2XTNym2-X90sxOag"
	},
	"value": {
		"selected_sidebar_menu": "dbui.menu.dev"
	}
},
{
	"__ver": "sys:1",
	"_class": "Config",
	"_id": "J9SNvBpBQAGYMkbPYRYPrA",
	"key": "sys.dbui.perspective.default.related[AngularModule_module].AngularProvider",
	"system": true,
	"value": {
		"list": {
			"fields": [
				"path",
				"module",
				"name",
				"type",
				"doc"
			],
			"sort": {
				"path": "asc"
			}
		}
	}
},
{
	"__ver": "sys:3",
	"_class": "Config",
	"_id": "Kohb_6sxTGC1eGdeRsCtMw",
	"allow_customize": false,
	"key": "sys.dbui.perspective.default.AngularTemplate",
	"rolespec": [
	],
	"system": true,
	"value": {
		"edit": {
			"layout": [
				[
					"module",
					"provider"
				],
				"path",
				"name",
				"doc",
				"content",
				"rolespec"
			]
		},
		"list": {
			"fields": [
				"path",
				"name",
				"module"
			],
			"filter": {
				"path": {
					"$notcontains": "^dbui/"
				}
			},
			"sort": {
				"path": "asc"
			}
		},
		"picker_list": {
			"fields": [
				"path",
				"name"
			],
			"sort": {
				"path": "asc"
			}
		},
		"view": {
			"layout": [
				[
					"module",
					"provider"
				],
				"path",
				"name",
				"doc",
				"content",
				"rolespec"
			]
		}
	}
},
{
	"__ver": "sys:3",
	"_class": "Config",
	"_id": "KpTzs_FUS9ylachpjVI_XA",
	"allow_customize": false,
	"key": "sys.dbui.perspective.default.Enumeration",
	"rolespec": [
	],
	"system": true,
	"value": {
		"edit": {
			"layout": [
				"name",
				"values"
			]
		},
		"list": {
			"fields": [
				"name",
				"values"
			]
		},
		"view": {
			"layout": [
				"name",
				"values"
			]
		}
	}
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Config",
	"_id": "LO0K56w7R4GWv3LZ7-tGJg",
	"allow_customize": true,
	"key": "sys.dbui.defaultPageSize",
	"system": false,
	"value": 10
},
{
	"__pkg": "sys",
	"__ver": "sys:2",
	"_class": "Config",
	"_id": "Oq6WcNJFSomqJf7Q3R_tyA",
	"allow_customize": false,
	"key": "sys.dbui.perspective.default.UiAction",
	"rolespec": [
	],
	"system": true,
	"value": {
		"edit": {
			"layout": [
				"key",
				"doc",
				"function"
			]
		},
		"list": {
			"fields": [
				"key",
				"doc"
			],
			"sort": {
				"key": "asc"
			}
		},
		"view": {
			"layout": [
				"key",
				"doc",
				"function"
			]
		}
	}
},
{
	"__ver": "sys:5",
	"_class": "Config",
	"_id": "OuZlkU4RRte4PhEc1osj-w",
	"allow_customize": false,
	"key": "sys.dbui.displayoptions",
	"system": false,
	"value": {
		"boolean": {
			"displayValue": {
				"false": {
					"class": "boolean-false",
					"text": "no"
				},
				"true": {
					"class": "boolean-true",
					"text": "yes"
				}
			}
		},
		"date": {
			"format": "MMMM dd, yyyy"
		},
		"function": {
			"displayTheme": {
				"clientside": "monokai",
				"default": "solarized_light",
				"serverside": "dawn"
			}
		},
		"object": {
			"displayTheme": "dawn"
		},
		"reference": {
			"enableViewLink": false
		},
		"sourcecode": {
			"displayTheme": "monokai"
		}
	}
},
{
	"__ver": "sys:5",
	"_class": "Config",
	"_id": "P2a0BxxZS-OTiottP1JsMw",
	"allow_customize": false,
	"key": "sys.dbui.perspective.default.JsResource",
	"system": true,
	"value": {
		"edit": {
			"layout": [
				"path",
				"name",
				"doc",
				"content",
				"rolespec"
			]
		},
		"list": {
			"fields": [
				"path",
				"name"
			]
		},
		"picker_list": {
			"fields": [
				"path",
				"name"
			]
		},
		"view": {
			"layout": [
				"path",
				"name",
				"doc",
				"content",
				"rolespec"
			]
		}
	}
},
{
	"__ver": "sys:1",
	"_class": "Config",
	"_id": "PbIVRpHHQ2Wtd3-bT_NeYg",
	"key": "sys.password_complexity",
	"system": false,
	"value": {
		"description": [
			"Must be at least 6 characters long.",
			"Must have at least one number",
			"Must have at least one uppercase letter",
			"Must have at least one lowercase letter",
			"Must have at least one special character (@#$%^&+=!)"
		],
		"regex": "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=!]).{6,}$"
	}
},
{
	"__ver": "sys:2",
	"_class": "Config",
	"_id": "QwJDuVeNSC-52XC8Iekbmw",
	"key": "sys.dbui.perspective.default.TestObject",
	"system": false,
	"value": {
		"edit": {
			"layout": [
				"date"
			]
		},
		"list": {
			"fields": [
				"date"
			]
		}
	}
},
{
	"__pkg": "sys",
	"__ver": "sys:25",
	"_class": "Config",
	"_id": "Sxds6jgoSeKcDIXuLM6ggg",
	"key": "sys.currentPackage",
	"system": false,
	"value": false
},
{
	"__ver": "sys:1",
	"_class": "Config",
	"_id": "TceD89EZTVa-uQncdIxkbA",
	"key": "sys.dbui.perspective.default.related[AngularModule_module].AngularTemplate",
	"system": true,
	"value": {
		"list": {
			"fields": [
				"path",
				"name",
				"module"
			],
			"sort": {
				"path": "asc"
			}
		}
	}
},
{
	"__ver": "sys:2",
	"_class": "Config",
	"_id": "Wno7cIleSF6nmkMi4vu_jA",
	"allow_customize": false,
	"key": "sys.enablePackaging",
	"system": false,
	"value": true
},
{
	"__ver": "sys:6",
	"_class": "Config",
	"_id": "Xhs0pIeIQ-WP_jsX6j9Mag",
	"allow_customize": false,
	"key": "sys.dbui.perspective.default.FieldTypeUiSpec",
	"system": true,
	"value": {
		"edit": {
			"layout": [
				"key",
				"fieldtypes",
				[
					"for_editing",
					"for_viewing"
				],
				[
					"for_editing_array",
					"for_viewing_array"
				],
				"doc",
				"template",
				"controller_fn",
				"link_fn"
			]
		},
		"list": {
			"fields": [
				"key",
				"fieldtypes",
				"for_editing",
				"for_viewing",
				"for_editing_array",
				"for_viewing_array"
			]
		},
		"view": {
			"layout": [
				"key",
				"fieldtypes",
				[
					"for_editing",
					"for_viewing"
				],
				[
					"for_editing_array",
					"for_viewing_array"
				],
				"doc",
				"link_fn",
				"controller_fn",
				"template"
			]
		}
	}
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Config",
	"_id": "XlkTgxHAQRSiic10iuV_Ig",
	"allow_customize": false,
	"key": "sys.dbui.perspective.default.CodeModule",
	"rolespec": [
	],
	"system": true,
	"value": {
		"edit": {
			"layout": [
				"name",
				"path",
				"doc",
				"code"
			]
		},
		"list": {
			"fields": [
				"path",
				"name",
				"doc"
			],
			"filter": {
				"path": {
					"$notcontains": "^sys/"
				}
			}
		},
		"view": {
			"layout": [
				"name",
				"path",
				"doc",
				"code"
			]
		}
	}
},
{
	"__ver": "sys:1",
	"_class": "Config",
	"_id": "Y-hXaNJuSNm5F-SS5dTZsQ",
	"key": "sys.dbui.perspective.default.DataExport",
	"system": true,
	"value": {
		"edit": {
			"layout": [
				"name",
				"content_type",
				"transform_fn"
			]
		},
		"list": {
			"fields": [
				"name",
				"content_type"
			]
		},
		"view": {
			"layout": [
				"name",
				"content_type",
				"transform_fn"
			]
		}
	}
},
{
	"__ver": "sys:15",
	"_class": "Config",
	"_id": "Y3qe_-s7QnKy0jB-nMI5xw",
	"allow_customize": false,
	"key": "sys.dbui.perspective.default.AngularModule",
	"system": true,
	"value": {
		"edit": {
			"layout": [
				"path",
				"name",
				"doc",
				"config_function",
				"js_dependencies",
				"css_dependencies",
				"external_mod_dependencies",
				"mod_dependencies"
			]
		},
		"list": {
			"fields": [
				"path",
				"name",
				"doc"
			]
		},
		"picker_list": {
			"fields": [
				"path",
				"name",
				"doc"
			]
		},
		"view": {
			"layout": [
				"path",
				"name",
				"doc",
				"config_function",
				"js_dependencies",
				"css_dependencies",
				"external_mod_dependencies",
				"mod_dependencies"
			],
			"related": [
				{
					"class": "AngularProvider",
					"field": "module",
					"perspective": "factories"
				},
				{
					"class": "AngularProvider",
					"field": "module",
					"perspective": "controllers"
				},
				{
					"class": "AngularProvider",
					"field": "module",
					"perspective": "directives"
				},
				{
					"class": "AngularProvider",
					"field": "module",
					"perspective": "filters"
				},
				{
					"class": "AngularTemplate",
					"field": "module"
				}
			]
		}
	}
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Config",
	"_id": "YH7PZXVaTAmHMb-cJlkeoA",
	"allow_customize": false,
	"key": "sys.dbui.perspective.default.ImageResource",
	"system": true,
	"value": {
		"edit": {
			"layout": [
				"path",
				"name",
				"doc",
				"content",
				"rolespec"
			]
		},
		"list": {
			"fields": [
				"path",
				"name"
			],
			"sort": {
				"path": "asc"
			}
		},
		"view": {
			"layout": [
				"path",
				"name",
				"doc",
				"content",
				"rolespec"
			]
		}
	}
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Config",
	"_id": "YN49yI-cQO-YJGTtKaav8Q",
	"allow_customize": false,
	"key": "sys.dbui.perspective.default.DataTrigger",
	"rolespec": [
	],
	"system": true,
	"value": {
		"edit": {
			"layout": [
				[
					"key"
				],
				[
					"business_object"
				],
				[
					"before_after",
					"on_delete"
				],
				[
					"on_create",
					"on_update"
				],
				[
					"doc"
				],
				[
					"action"
				]
			]
		},
		"list": {
			"fields": [
				"key",
				"business_object",
				"doc"
			],
			"filter": {
				"key": {
					"$notcontains": "^sys\\."
				}
			},
			"sort": {
				"key": "asc"
			}
		},
		"picker_list": {
			"fields": [
				"key",
				"business_object"
			],
			"sort": {
				"key": "asc"
			}
		},
		"view": {
			"layout": [
				[
					"key"
				],
				[
					"business_object"
				],
				[
					"before_after",
					"on_delete"
				],
				[
					"on_create",
					"on_update"
				],
				[
					"doc"
				],
				[
					"action"
				]
			]
		}
	}
},
{
	"__ver": "sys:4",
	"_class": "Config",
	"_id": "ZIyLu8ZCQV2K6GS2XqqbEA",
	"allow_customize": false,
	"key": "sys.dbui.perspective.default.QueryOpUiSpec",
	"system": true,
	"value": {
		"edit": {
			"layout": [
				"key",
				[
					"fieldtypes",
					"for_array"
				],
				"editors"
			]
		},
		"list": {
			"fields": [
				"key",
				"for_array",
				"fieldtypes"
			]
		},
		"view": {
			"layout": [
				"key",
				[
					"fieldtypes",
					"for_array"
				],
				"editors"
			]
		}
	}
},
{
	"__ver": "sys:1",
	"_class": "Config",
	"_id": "ZcYFrLsyQpSLpykRLi-nEA",
	"allow_customize": false,
	"key": "dummy",
	"rolespec": [
	],
	"system": false
},
{
	"__ver": "sys:1",
	"_class": "Config",
	"_id": "b3-wP1RKQAm56z4xRENVlg",
	"key": "sys.dbui.perspective.default.WebService",
	"system": false,
	"user": {
		"_disp": "admin",
		"_id": "vl22Nf2XTNym2-X90sxOag"
	},
	"value": {
		"list": {
			"savedQueries": [
				{
					"query": {
						"path": {
							"$contains": "^/sys/|^/dbui/|^/pkg/"
						}
					},
					"title": "System Webservices"
				}
			]
		}
	}
},
{
	"__ver": "sys:2",
	"_class": "Config",
	"_id": "cSzNMWAYT2Whr1OqDdHGyg",
	"allow_customize": false,
	"key": "sys.dbui.perspective.default.MemberFunction",
	"system": true,
	"value": {
		"edit": {
			"layout": [
				"business_object",
				"name",
				[
					"applies_to",
					"is_static"
				],
				"use_injection",
				"doc",
				"function"
			]
		},
		"list": {
			"fields": [
				"business_object",
				"name",
				"applies_to",
				"doc"
			]
		},
		"view": {
			"layout": [
				"business_object",
				"name",
				[
					"applies_to",
					"is_static"
				],
				"use_injection",
				"doc",
				"function"
			]
		}
	}
},
{
	"__ver": "sys:6",
	"_class": "Config",
	"_id": "cqb0vgELTiyDb6zfI6Tavg",
	"allow_customize": false,
	"key": "sys.dbui.perspective.controllers.AngularProvider",
	"rolespec": [
	],
	"system": true,
	"value": {
		"edit": {
			"layout": [
				"module",
				"path",
				"name",
				"type",
				"doc",
				"parameters",
				"function"
			]
		},
		"list": {
			"fields": [
				"path",
				"module",
				"name",
				"type",
				"doc"
			],
			"filter": {
				"path": {
					"$notcontains": "^dbui/"
				},
				"type": "controller"
			},
			"sort": {
				"path": "asc"
			},
			"title": "Angular Controllers"
		},
		"view": {
			"layout": [
				"module",
				"path",
				"name",
				"type",
				"doc",
				"parameters",
				"function"
			],
			"related": [
				{
					"class": "AngularTemplate",
					"field": "provider"
				}
			]
		}
	}
},
{
	"__ver": "sys:1",
	"_class": "Config",
	"_id": "dWglHelJQqe4iyrOHCd8BA",
	"allow_customize": false,
	"key": "sys.dbui.perspective.default.DbuiReport",
	"rolespec": [
	],
	"system": false,
	"value": {
		"edit": {
			"layout": [
				"name",
				"doc",
				"web_service",
				"input_typedef",
				"input_perspective",
				"output_typedef",
				"output_perspective"
			]
		},
		"list": {
			"fields": [
				"name",
				"doc",
				"web_service"
			]
		},
		"view": {
			"layout": [
				"name",
				"doc",
				"web_service",
				"input_typedef",
				"input_perspective",
				"output_typedef",
				"output_perspective"
			]
		}
	}
},
{
	"__ver": "sys:1",
	"_class": "Config",
	"_id": "dkwBaED1TUSMvFlVkNOwKw",
	"key": "sys.dbui.perspective.default.related[AngularModule_module].AngularModule",
	"system": true,
	"value": {
		"view": {
			"layout": [
				"path",
				"name",
				"description",
				"version",
				"config_function",
				"js_dependencies",
				"css_dependencies",
				"external_mod_dependencies",
				"mod_dependencies"
			],
			"related": [
				{
					"class": "AngularProvider",
					"field": "module"
				}
			]
		}
	}
},
{
	"__ver": "sys:2",
	"_class": "Config",
	"_id": "eSAFk0BgQ7iKh-q9q02ZUw",
	"key": "sys.dbui.perspective.factories.AngularModule",
	"system": true,
	"value": {
		"picker_list": {
			"fields": [
				"path",
				"name",
				"description"
			]
		},
		"view": {
			"layout": [
				"path",
				"name",
				"doc",
				"config_function",
				"js_dependencies",
				"css_dependencies",
				"external_mod_dependencies",
				"mod_dependencies"
			],
			"related": [
				{
					"class": "AngularProvider",
					"field": "module",
					"perspective": "factories"
				},
				{
					"class": "AngularProvider",
					"field": "module",
					"perspective": "controllers"
				},
				{
					"class": "AngularProvider",
					"field": "module",
					"perspective": "directives"
				},
				{
					"class": "AngularProvider",
					"field": "module",
					"perspective": "filters"
				},
				{
					"class": "AngularTemplate",
					"field": "module"
				}
			]
		}
	}
},
{
	"__ver": "sys:1",
	"_class": "Config",
	"_id": "g7Eq-Ra_Qc2oJFqjM8AoBQ",
	"key": "sys.dbui.perspective.default.related[BusinessObjectPackage_package].BusinessObjectPackageUpdate",
	"system": true,
	"value": {
		"list": {
			"fields": [
				"target_object",
				"updates"
			]
		}
	}
},
{
	"__ver": "sys:3",
	"_class": "Config",
	"_id": "hIGoBem9TQinCMTZh-tCTQ",
	"allow_customize": false,
	"key": "sys.dbui.perspective.default.PackageConflict",
	"rolespec": [
	],
	"system": false,
	"value": {
		"edit": {
			"layout": [
				"package",
				"conflict_type",
				[
					"object_class",
					"object_id"
				],
				[
					"installed_version_id",
					"package_version_id"
				],
				"installed_object",
				"merged_object",
				"diff"
			]
		},
		"list": {
			"fields": [
				"created_date",
				"package",
				"conflict_type",
				"object_class",
				"installed_version_id",
				"package_version_id"
			],
			"recordActions": [
				"view",
				{
					"icon": "fa-sign-in",
					"label": "View Object",
					"ui_action": "dbui.update_log_link"
				}
			],
			"sort": {
				"created_date": "asc"
			}
		},
		"view": {
			"layout": [
				[
					"package",
					"created_date"
				],
				"conflict_type",
				[
					"object_class",
					"object_id"
				],
				[
					"installed_version_id",
					"package_version_id"
				],
				"installed_object",
				"merged_object",
				"diff"
			],
			"recordActions": [
				"edit",
				"delete",
				{
					"icon": "fa-level-down",
					"label": "Install Merged",
					"ws": "pkg/resolvePackageConflict"
				}
			]
		}
	}
},
{
	"__ver": "sys:4",
	"_class": "Config",
	"_id": "hJiZxpRJRp-7ihmjq5qpMQ",
	"allow_customize": false,
	"key": "sys.dbui.perspective.default.DbuiCustomPage",
	"system": true,
	"value": {
		"edit": {
			"layout": [
				"key",
				"doc",
				"controller",
				"body"
			]
		},
		"list": {
			"fields": [
				"key",
				"doc"
			]
		},
		"view": {
			"layout": [
				"key",
				"doc",
				"controller",
				"body"
			]
		}
	}
},
{
	"__ver": "sys:2",
	"_class": "Config",
	"_id": "if2R-LabRcyDzpX_5X_ucQ",
	"key": "sys.dbui.perspective.controllers.related[AngularProvider_provider].AngularTemplate",
	"system": true,
	"value": {
		"list": {
			"fields": [
				"path",
				"name",
				"module"
			],
			"sort": {
				"path": "asc"
			}
		}
	}
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Config",
	"_id": "jSJbDp6BReSLHQW54XyBvQ",
	"key": "sys.dbui.perspective.default.Role",
	"system": true,
	"value": {
		"edit": {
			"layout": [
				"name"
			]
		},
		"list": {
			"fields": [
				"name"
			],
			"sort": {
				"name": "asc"
			}
		},
		"picker_list": {
			"fields": [
				"name"
			],
			"sort": {
				"name": "asc"
			}
		},
		"view": {
			"layout": [
				"name"
			]
		}
	}
},
{
	"__ver": "sys:3",
	"_class": "Config",
	"_id": "knpIXitAQh2Mf2d6ctQOow",
	"allow_customize": false,
	"key": "sys.dbui.perspective.directives.related[AngularModule_module].AngularProvider",
	"system": true,
	"value": {
		"list": {
			"fields": [
				"path",
				"name",
				"doc"
			],
			"filter": {
				"type": "directive"
			},
			"sort": {
				"path": "asc"
			},
			"title": "Directives"
		}
	}
},
{
	"__pkg": "sys",
	"__ver": "sys:3",
	"_class": "Config",
	"_id": "kvJ1SBi-QeqtaeRTwRO5Rg",
	"allow_customize": false,
	"key": "sys.dbui.perspective.default.Menu",
	"rolespec": [
	],
	"system": true,
	"value": {
		"edit": {
			"layout": [
				"key",
				"doc",
				"definition",
				"rolespec"
			]
		},
		"list": {
			"fields": [
				"key",
				"doc"
			],
			"sort": {
				"key": "asc"
			}
		},
		"view": {
			"layout": [
				"key",
				"doc",
				"definition",
				"definition_fn",
				"rolespec"
			]
		}
	}
},
{
	"__pkg": "sys",
	"__ver": "sys:4",
	"_class": "Config",
	"_id": "m7poGk4CSBKCO1X_X29-Vw",
	"allow_customize": false,
	"key": "sys.dbui.perspective.default.FieldType",
	"system": true,
	"value": {
		"edit": {
			"layout": [
				[
					"name"
				],
				[
					"doc"
				],
				[
					"mongo_type",
					"text_index"
				],
				[
					"get_validator"
				],
				[
					"to_db"
				],
				[
					"from_db"
				]
			]
		},
		"list": {
			"fields": [
				"name",
				"mongo_type",
				"doc"
			],
			"sort": {
				"name": "asc"
			}
		},
		"picker_list": {
			"fields": [
				"name",
				"mongo_type"
			],
			"sort": {
				"name": "asc"
			}
		},
		"view": {
			"layout": [
				[
					"name"
				],
				[
					"doc"
				],
				[
					"mongo_type",
					"text_index"
				],
				[
					"get_validator"
				],
				[
					"to_db"
				],
				[
					"from_db"
				]
			],
			"related": [
				{
					"class": "FieldTypeUiSpec",
					"field": "fieldtypes"
				}
			]
		}
	}
},
{
	"__ver": "sys:4",
	"_class": "Config",
	"_id": "mS7U_n_RRl-PY3SO_6tr2Q",
	"allow_customize": false,
	"key": "sys.dbui.perspective.default.DocTemplate",
	"rolespec": [
	],
	"system": false,
	"value": {
		"edit": {
			"layout": [
				[
					"key",
					"content_type"
				],
				"content"
			]
		},
		"list": {
			"fields": [
				"key",
				"content_type"
			]
		},
		"view": {
			"layout": [
				"key",
				"content",
				"content_type"
			]
		}
	}
},
{
	"__ver": "sys:5",
	"_class": "Config",
	"_id": "mXLpqs_6RYO6jfseoLep_g",
	"allow_customize": false,
	"key": "sys.dbui.perspective.factories.AngularProvider",
	"rolespec": [
	],
	"system": true,
	"value": {
		"edit": {
			"layout": [
				"module",
				"path",
				"name",
				"type",
				"doc",
				"parameters",
				"function"
			]
		},
		"list": {
			"fields": [
				"path",
				"module",
				"name",
				"type",
				"doc"
			],
			"filter": {
				"$and": [
					{
						"path": {
							"$notcontains": "^dbui/|^noonian/"
						}
					},
					{
						"$or": [
							{
								"type": "factory"
							},
							{
								"type": "service"
							},
							{
								"type": "provider"
							}
						]
					}
				]
			},
			"sort": {
				"path": "asc"
			},
			"title": "Angular Factories/Services/Providers"
		},
		"view": {
			"layout": [
				"module",
				"path",
				"name",
				"type",
				"doc",
				"parameters",
				"function"
			]
		}
	}
},
{
	"__ver": "sys:1",
	"_class": "Config",
	"_id": "o7ujH63ISeu4gR7Bjrrrgw",
	"allow_customize": false,
	"key": "sys.dbui.displayoptions.CssResource",
	"rolespec": [
	],
	"system": false,
	"value": {
		"content": {
			"aceConfig": {
				"mode": "preprocessor"
			}
		}
	}
},
{
	"__ver": "sys:1",
	"_class": "Config",
	"_id": "oot_vdKQTJqqhk2oqw97-g",
	"key": "sys.dbui.perspective.default.related[AngularProvider_provider].AngularTemplate",
	"system": true,
	"value": {
		"list": {
			"fields": [
				"path",
				"name",
				"module"
			],
			"sort": {
				"path": "asc"
			}
		}
	}
},
{
	"__pkg": "sys",
	"__ver": "sys:2",
	"_class": "Config",
	"_id": "qqVlSIILTbiGNUzOtHQqcg",
	"key": "sys.dbui.perspective.default.User",
	"system": true,
	"value": {
		"edit": {
			"layout": [
				"name",
				"roles",
				"password"
			]
		},
		"list": {
			"fields": [
				"name",
				"roles"
			],
			"sort": {
				"name": "asc"
			}
		},
		"picker_list": {
			"fields": [
				"name",
				"roles"
			],
			"sort": {
				"name": "asc"
			}
		},
		"view": {
			"layout": [
				"name",
				"roles",
				"password"
			]
		}
	}
},
{
	"__ver": "sys:8",
	"_class": "Config",
	"_id": "sQDsv1FXThuAxLRiAKJQIA",
	"allow_customize": false,
	"key": "sys.dbui.perspective.default.UpdateLog",
	"rolespec": [
	],
	"system": false,
	"value": {
		"edit": {
			"layout": [
				[
					"timestamp",
					"update_type"
				],
				[
					"object_class",
					"object_id",
					"updated_version"
				],
				[
					"package",
					"external_pkg"
				],
				"revert_patch"
			]
		},
		"list": {
			"fields": [
				"timestamp",
				"object_class",
				"object_id",
				"update_type",
				"package",
				"external_pkg"
			],
			"recordActions": [
				"view",
				{
					"icon": "fa-sign-in",
					"label": "View Object",
					"ui_action": "dbui.update_log_link"
				}
			],
			"sort": {
				"timestamp": "desc"
			}
		},
		"view": {
			"layout": [
				[
					"timestamp",
					"update_type"
				],
				[
					"object_class",
					"object_id",
					"updated_version"
				],
				[
					"package",
					"external_pkg"
				],
				"revert_patch"
			],
			"recordActions": [
				"edit",
				"delete",
				{
					"icon": "fa-sign-in",
					"label": "View Object",
					"ui_action": "dbui.update_log_link"
				}
			]
		}
	}
},
{
	"__ver": "sys:6",
	"_class": "Config",
	"_id": "s_sYihekR-CwwhMvagVpRQ",
	"allow_customize": false,
	"key": "sys.dbui.perspective.default.CssResource",
	"rolespec": [
	],
	"system": true,
	"value": {
		"edit": {
			"layout": [
				"path",
				"name",
				"doc",
				"preprocessor",
				"content",
				"rolespec"
			]
		},
		"list": {
			"fields": [
				"path",
				"name",
				"preprocessor"
			]
		},
		"picker_list": {
			"fields": [
				"path",
				"name"
			]
		},
		"view": {
			"layout": [
				"path",
				"name",
				"doc",
				"preprocessor",
				"content",
				"compiled_content",
				"rolespec"
			]
		}
	}
},
{
	"__pkg": "sys",
	"__ver": "sys:2",
	"_class": "Config",
	"_id": "spHxGeTiRsGzocGsaIIEMg",
	"allow_customize": false,
	"key": "sys.dbui.perspective.default.LabelGroup",
	"rolespec": [
	],
	"system": true,
	"value": {
		"edit": {
			"layout": [
				"key",
				"value",
				"language"
			]
		},
		"list": {
			"fields": [
				"key",
				"language"
			],
			"sort": {
				"key": "asc"
			}
		},
		"view": {
			"layout": [
				"key",
				"value",
				"language"
			]
		}
	}
},
{
	"__ver": "sys:2",
	"_class": "Config",
	"_id": "uPQXlOglR9yDx4p_ZEmV3g",
	"key": "sys.dbui.perspective.controllers.AngularTemplate",
	"system": true,
	"value": {
		"view": {
			"layout": [
				[
					"module",
					"provider"
				],
				"path",
				"name",
				"doc",
				"content",
				"rolespec"
			]
		}
	}
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Config",
	"_id": "vDdUnL3nQ6a1e9nTNiqLog",
	"allow_customize": false,
	"key": "sys.dbui.perspective.default.HtmlResource",
	"system": true,
	"value": {
		"edit": {
			"layout": [
				"path",
				"name",
				"doc",
				"content",
				"rolespec"
			]
		},
		"list": {
			"fields": [
				"path",
				"name"
			],
			"sort": {
				"path": "asc"
			}
		},
		"picker_list": {
			"fields": [
				"path",
				"name"
			],
			"sort": {
				"path": "asc"
			}
		},
		"view": {
			"layout": [
				"path",
				"name",
				"doc",
				"content",
				"rolespec"
			]
		}
	}
},
{
	"__ver": "sys:13",
	"_class": "Config",
	"_id": "w2U0lB56Sq2Mb-6r3WDBsw",
	"allow_customize": false,
	"key": "sys.dbui.navbar_menu",
	"rolespec": [
	],
	"system": true,
	"value": [
		{
			"classes": [
				"BusinessObjectDef",
				"CodeModule",
				"DataExport",
				"DataTrigger",
				"ScheduleTrigger",
				"Enumeration",
				"FieldType",
				"LabelGroup",
				"MemberFunction",
				"QueryOp",
				"WebService",
				"TwoFactorAuthImplementation"
			],
			"title": "Serverside/DB Dev"
		},
		{
			"classes": [
				"AngularApp",
				"AngularModule",
				"AngularProvider",
				"AngularTemplate",
				"DbuiCustomPage",
				"DbuiReport",
				"UiAction"
			],
			"title": "Clientside Dev"
		},
		{
			"classes": [
				"FieldTypeUiSpec",
				"QueryOpUiSpec"
			],
			"title": "Low-Level DBUI"
		},
		{
			"classes": [
				"WebResource",
				"CssResource",
				"FileResource",
				"HtmlResource",
				"ImageResource",
				"JsResource",
				"JsonResource"
			],
			"title": "Web Resources"
		},
		{
			"classes": [
				"Config",
				"DataAccessControl",
				"Menu",
				"Role",
				"User",
				"TwoFactorAuthLoginRequest"
			],
			"title": "Admin"
		},
		{
			"classes": [
				"Language"
			],
			"title": "Ref Data"
		},
		{
			"classes": [
				"BusinessObjectPackage",
				"UpdateLog",
				"PackageConflict",
				"RemotePackageRepository",
				"DocTemplate"
			],
			"title": "Packaging"
		}
	]
},
{
	"__ver": "sys:6",
	"_class": "Config",
	"_id": "x6rl0g-sRW2tse13At0wmg",
	"allow_customize": false,
	"key": "sys.dbui.perspective.default.ScheduleTrigger",
	"rolespec": [
	],
	"system": false,
	"value": {
		"edit": {
			"layout": [
				[
					"key",
					"enabled"
				],
				"schedule",
				"function"
			]
		},
		"list": {
			"fields": [
				"key",
				"schedule",
				"enabled",
				"last_execution"
			]
		},
		"view": {
			"layout": [
				[
					"key",
					"enabled"
				],
				"last_execution",
				"schedule",
				"function"
			]
		}
	}
},
{
	"__ver": "sys:2",
	"_class": "Config",
	"_id": "xcvMD6R0TmO0rycK3Vd1rA",
	"allow_customize": false,
	"key": "sys.dbui.perspective.filters.related[AngularModule_module].AngularProvider",
	"system": true,
	"value": {
		"list": {
			"fields": [
				"path",
				"name",
				"doc"
			],
			"filter": {
				"type": "filter"
			},
			"sort": {
				"path": "asc"
			},
			"title": "Filters"
		}
	}
},
{
	"__pkg": "sys",
	"__ver": "sys:2",
	"_class": "Config",
	"_id": "xmAXxOxKReCjsdFT3pu59w",
	"allow_customize": false,
	"key": "sys.dbui.perspective.default.related[BusinessObjectDef_business_object].DataTrigger",
	"rolespec": [
	],
	"system": true,
	"value": {
		"list": {
			"fields": [
				"key",
				"doc"
			],
			"sort": {
				"key": "asc"
			}
		}
	}
},
{
	"__ver": "sys:4",
	"_class": "Config",
	"_id": "yfTTwRezQFKAnbUGICed4w",
	"allow_customize": false,
	"key": "sys.dbui.perspective.default.TwoFactorAuthImplementation",
	"rolespec": [
	],
	"system": false,
	"value": {
		"edit": {
			"layout": [
				"name",
				"doc",
				"factory_fn"
			]
		},
		"list": {
			"fields": [
				"name",
				"doc"
			]
		},
		"view": {
			"layout": [
				"name",
				"doc",
				"factory_fn"
			]
		}
	}
},
{
	"__ver": "sys:3",
	"_class": "Config",
	"_id": "yjoQfy6JT9OfNzPFSEHqEQ",
	"allow_customize": false,
	"key": "sys.instanceName",
	"rolespec": [
	],
	"system": false,
	"value": "Noonian"
},
{
	"__ver": "sys:5",
	"_class": "Config",
	"_id": "zk3SuXVIRi6GMnCej9_nUQ",
	"allow_customize": false,
	"key": "sys.dbui.perspective.filters.AngularProvider",
	"rolespec": [
	],
	"system": true,
	"value": {
		"edit": {
			"layout": [
				"module",
				"path",
				"name",
				"type",
				"doc",
				"parameters",
				"function"
			]
		},
		"list": {
			"fields": [
				"path",
				"module",
				"name",
				"type",
				"doc"
			],
			"filter": {
				"path": {
					"$notcontains": "^dbui/|^noonian/"
				},
				"type": "filter"
			},
			"sort": {
				"path": "asc"
			},
			"title": "Angular Filters"
		},
		"view": {
			"layout": [
				"module",
				"path",
				"name",
				"type",
				"doc",
				"parameters",
				"function"
			]
		}
	}
},
{
	"__ver": "sys:3",
	"_class": "Config",
	"_id": "zqq006kzRgiWjMdclIEQ7Q",
	"allow_customize": false,
	"key": "sys.dbui.perspective.factories.related[AngularModule_module].AngularProvider",
	"system": true,
	"value": {
		"list": {
			"fields": [
				"path",
				"name",
				"type",
				"doc"
			],
			"filter": {
				"$or": [
					{
						"type": "factory"
					},
					{
						"type": "service"
					},
					{
						"type": "provider"
					}
				]
			},
			"sort": {
				"path": "asc"
			},
			"title": "Factories/Services/Providers"
		}
	}
},
{
	"__t": "CssResource",
	"__ver": "sys:25",
	"_class": "CssResource",
	"_id": "mF2-m7xwSv-GOiV7I-YPNg",
	"content": "\n#banner {\n    border-bottom: none;\n    margin-top: -20px;\n}\n\n#banner h1 {\n    font-size: 60px;\n    line-height: 1;\n    letter-spacing: -1px;\n}\n\n.hero-unit {\n    position: relative;\n    padding: 10px 15px;\n    color: #F5F5F5;\n    text-align: center;\n    text-shadow: 0 1px 0 rgba(0, 0, 0, 0.1);\n    background: #4393B9;\n}\n\n.footer {\n    text-align: center;\n    padding: 30px 0;\n    margin-top: 70px;\n    border-top: 1px solid #E5E5E5;\n}\n\n.dbui-header {\n    padding: 10px 15px;\n    color: #F5F5F5;\n    text-shadow: 0 1px 0 rgba(0, 0, 0, 0.1);\n    background: #4393B9;\n    border-radius: 0 0 12px 12px;\n    /*margin-top:-20px;*/\n    margin-bottom:10px;\n}\n\n.dbui-sub-header-alt {\n    padding: 10px 15px;\n    color: #F5F5F5;\n    text-shadow: 0 1px 0 rgba(0, 0, 0, 0.1);\n    background: #4393B9;\n    border-radius: 6px 6px 0 0;\n}\n\n.dbui-sub-header {\n    padding: 10px 15px;\n    color: #4393B9;\n    text-shadow: 0 1px 0 rgba(0, 0, 0, 0.1);\n    background: #F5F5F5;\n    border-radius: 6px 6px 0 0;\n}\n\n.dbui-sub-section-content {\n  border: 1px solid rgb(238, 238, 238);\n}\n\n.dbui-form-container {\n  border: 1px solid rgb(238, 238, 238);\n  \n}\n\n/** for subsections in view/edit forms **/\n.dbui-subsection-container {\n  border: 1px solid rgb(238, 238, 238);\n  border-radius: 6px;\n  padding: 10px 0 10px 0;\n  margin-bottom: 20px;\n  padding-right: 20px;\n}\n\n.dbui-subsection-header {\n    padding: 10px 15px;\n    color: #4393B9;\n    text-shadow: 0 1px 0 rgba(0, 0, 0, 0.1);\n    background: #F5F5F5;\n    border-radius: 6px 6px 0 0;\n    margin-top: -10px; /*cancel subsection padding*/\n    margin-bottom:10px;\n    cursor: pointer;\n}\n\n.dbui-subsection-header:hover {\n    background: #F0F0F0;\n}\n\n/**************************************/\n\n/** action buttons **/\n\n.btn-action {\n    padding: 6px 6px;\n    font-size: x-small;\n    margin-top: 4px;\n    margin-left: 12px;\n    height:35px;\n    opacity:0.8;\n    background-color: hsl(0, 0%, 57%) !important; background-repeat: repeat-x; filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=\"#fcfcfc\", endColorstr=\"#919191\"); background-image: -khtml-gradient(linear, left top, left bottom, from(#fcfcfc), to(#919191)); background-image: -moz-linear-gradient(top, #fcfcfc, #919191); background-image: -ms-linear-gradient(top, #fcfcfc, #919191); background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #fcfcfc), color-stop(100%, #919191)); background-image: -webkit-linear-gradient(top, #fcfcfc, #919191); background-image: -o-linear-gradient(top, #fcfcfc, #919191); background-image: linear-gradient(#fcfcfc, #919191); border-color: #919191 #919191 hsl(0, 0%, 46.5%); color: #333 !important; text-shadow: 0 1px 1px rgba(255, 255, 255, 0.69); -webkit-font-smoothing: antialiased;\n\n}\n\n.btn-action:hover {\n    opacity:1;\n    text-shadow: 2px 2px rgb(210, 210, 210);\n}\n\n\na.folder_view_folder {\n  color:#333;\n  font-weight:bold;\n}\n\na.folder_view_folder:hover {\n  text-decoration:none;\n}\n\na.folder_view_folder:active {\n  text-decoration:none;\n}\n\n.text-bold {\n  font-weight: bolder\n}\n\n.datatable_btn {\n  opacity:.5;\n  padding-left:6px;\n}\n.datatable_btn:hover {\n  opacity:1;\n}\n\n.datatable-group-title {\n  font-weight: bold;\n  background-color:#EEE;\n}\n\n.array-editor-row {\n  margin-left:0px;\n  margin-right:0px;\n  /*border-bottom: #ccc 1px solid;*/\n}\n\n.dbui-edit-field-reference input{\n  max-width:400px;\n}\n\n.array-editor-row .dbui-view-field-reference {\n padding-top:4px;\n}\n\n.dbui-view-field {\n    padding:8px;\n\n}\n\n.dbui-field-viewer {\n  display: block;\n  min-width:25%;\n  max-width:80%;\n\npadding: 6px 12px;\nfont-size: 14px;\nline-height: 1.42857;\ncolor: #555;\nbackground-color: #FFF;\nbackground-image: none;\nborder: 1px solid #CCC;\nborder-radius: 4px;\n}\n\n.querybuilder {\n  border: solid 1px lightgray;\n  padding: 25px;\n  border-radius: 8px;\n  margin: 10px;\n}\n.querybuilder-clausegroup-container {\n  background-color: #EEEEEE;\n  border-radius:8px;\n  padding:8px;\n}\n\n.query-editor-term a {\n  text-decoration: none;\n}\n\n.query-editor-term .dropdown-menu {\n  max-height: 300px;\noverflow-y: auto;\npadding:0;\n}\n\n.query-editor-term .dropdown-menu a {\n  border-bottom: 1px solid lightgray;\n  padding-top:10px;\n  padding-bottom: 10px;\n}\n\nlabel {\n  cursor: pointer;\n}\n\n\n.dbui-view-label span {\n\n    font-weight: bold;\n    text-shadow: 0 1px 0 rgba(0, 0, 0, 0.1);\n\n    /*color: #F5F5F5;\n    background: #AAAAAA;\n    padding:6px;\n    border-radius: 6px;*/\n}\n\n/*.dbui-view-container {\n    background: #EEEEEE;\n}\n\n.dbui-view-container .dbui-view-array-elem {\n  padding 2px;\n  background: #E5E5E5;\n}*/\n\n.readable-on-background {\n    text-shadow: 0px 0px 5px white;\n    color:black;\n}\n\n.dbui-view-field-boolean {\n  max-width: 50px;\n}\n\n.dbui-view-field-boolean .boolean-true {\n    font-weight:bold;\n    color:green;\n}\n.dbui-view-field-boolean .boolean-false {\n    font-weight:bold;\n    color:red;\n}\n.field-view-empty {\n    font-style:italic;\n}\n\n.dbui-edit-field-Array {\n  border: 1px solid #CCC;\n  border-radius: 4px;\n}\n\nlabel.required-field {\n    color:red;\n}\n\n.query-editor-term div {\n  display:inline;\n}\n\n.page-size-selector {\n  margin:15px;\n}\n\n.ace_editor { height: 500px; }\n\n\n.searchbox {\n  padding:5px;\n}\n\n.dbui-edit-field-date ul {\n  min-width:292px;\n}\n\n\n.dbui-table-data {\n  margin-top:10px;\n}\n\n.dbui-table-data thead {\n  border-top: 1px solid lightgray;\n  border-left: 1px solid lightgray;\n  border-right: 1px solid lightgray;\n}\n\n.basic-picker-list {\n  max-height: 300px;\n  overflow-y: scroll;\n}\n\n.basic-picker-list .list-group-item {\n  cursor:pointer;\n}\n\n.basic-picker-list .list-group-item:hover {\n  cursor:pointer;\n  background:#F5F5F5;\n}\n\n.basic-picker-list .selected-item {\n  font-weight: bolder;\n  color:#262626;\n  background-color: #F5F5F5;\n\n}\n\n.picker-list-title {\n  padding: 10px 10px 10px 20px;\n  font-weight: bold;\n  color: #4393B9;\n  text-shadow: 0 1px 0 rgba(0, 0, 0, 0.1);\n  background: #F5F5F5;\n  border-radius: 9px 9px 0 0;\n}\n\n/*\n * Global add-ons\n */\n\n.sub-header {\n  padding-bottom: 10px;\n  border-bottom: 1px solid #eee;\n}\n\n\n\n.action-bar {\n  background:#EEEEEE;\n  margin-bottom: 15px;\n  padding: 6px 10px 6px 10px;\n  border-radius: 6px;\n}\n\n.action-bar-upper {\n  background:#EEEEEE;\n  padding: 12px;\n  border-radius: 6px 6px 0 0;\n\n}\n\n.action-bar-lower {\n  background:#EEEEEE;\n  padding: 12px;\n  border-radius: 0 0 6px 6px;\n  margin-bottom:15px;\n}\n\n.save-warn {\n    background-color:#f2dede !important\n}\n\n/*\n * Top navigation\n * Hide default border to remove 1px line.\n */\n.navbar-fixed-top {\n  border: 0;\n}\n\n/*\n * Sidebar\n */\n\n/* Hide for mobile, show later */\n\n\n#sidebar_nav span {\n  background: #4393B9;\n  color:#F5F5F5;\n  padding: 10px 20px 10px 20px;\n  border-radius: 8px;\n}\n\n\n.nav-sidebar-submenu-header {\n  color: #F5F5F5;\n  background-color: #4393B9;\n  padding: 5px;\n  font-weight: bold;\n  margin: 3px 5px 0px 5px;\n  border-radius: 3px;\n}\n\n\n/*@media (max-width: 992px) {\n.sidebar_main {\n  display: none;\n}\n  .sidebar_nav {\n    display:block;\n    background: #4393B9;\n    color:#F5F5F5 !important;\n    border-radius: 4px;\n  }\n}\n\n@media (min-width: 992px) {\n  .sidebar_main {\n    display: block;\n  }\n  .sidebar_nav {\n    display: none;\n  }\n\n}*/\n\n\n.panel-sidebar > .panel-heading {\n    color: #F5F5F5;\n    text-shadow: 0 1px 0 rgba(0, 0, 0, 0.1);\n    background: #4393B9;\n}\n\na.accordion-toggle:hover {\n    text-decoration: none;\n}\n\n.btn-primary {\n     background-color: hsl(0, 0%, 57%) !important; background-repeat: repeat-x; filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=\"#fcfcfc\", endColorstr=\"#919191\"); background-image: -khtml-gradient(linear, left top, left bottom, from(#fcfcfc), to(#919191)); background-image: -moz-linear-gradient(top, #fcfcfc, #919191); background-image: -ms-linear-gradient(top, #fcfcfc, #919191); background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #fcfcfc), color-stop(100%, #919191)); background-image: -webkit-linear-gradient(top, #fcfcfc, #919191); background-image: -o-linear-gradient(top, #fcfcfc, #919191); background-image: linear-gradient(#fcfcfc, #919191); border-color: #919191 #919191 hsl(0, 0%, 46.5%); color: #333 !important; text-shadow: 0 1px 1px rgba(255, 255, 255, 0.69); -webkit-font-smoothing: antialiased;\n}\n\n\n.dbui-field-viewer pre {\n  white-space: pre-line;\n  word-break:normal;\n}\n\n/*\n * Main content\n\n\n.main {\n  padding: 20px;\n}\n@media (min-width: 768px) {\n  .main {\n    padding-right: 40px;\n    padding-left: 40px;\n  }\n}\n.main .page-header {\n  margin-top: 0;\n}\n */\n\n/*\n * Placeholder dashboard ideas\n\n\n.placeholders {\n  margin-bottom: 30px;\n  text-align: center;\n}\n.placeholders h4 {\n  margin-bottom: 0;\n}\n.placeholder {\n  margin-bottom: 20px;\n}\n.placeholder img {\n  display: inline-block;\n  border-radius: 50%;\n} */\n\n\n/**\n * Bootstrap Fonts\n\n\n@font-face {\n    font-family: 'Glyphicons Halflings';\n    src: url('../bower_components/bootstrap/fonts/glyphicons-halflings-regular.eot');\n    src: url('../bower_components/bootstrap/fonts/glyphicons-halflings-regular.eot?#iefix') format('embedded-opentype'),\n    url('../bower_components/bootstrap/fonts/glyphicons-halflings-regular.woff') format('woff'),\n    url('../bower_components/bootstrap/fonts/glyphicons-halflings-regular.ttf') format('truetype'),\n    url('../bower_components/bootstrap/fonts/glyphicons-halflings-regular.svg#glyphicons_halflingsregular') format('svg');\n}\n */\n/**\n *Font Awesome Fonts\n\n\n@font-face {\n    font-family: 'FontAwesome';\n    src: url('../bower_components/font-awesome/fonts/fontawesome-webfont.eot?v=4.1.0');\n    src: url('../bower_components/font-awesome/fonts/fontawesome-webfont.eot?#iefix&v=4.1.0') format('embedded-opentype'),\n    url('../bower_components/font-awesome/fonts/fontawesome-webfont.woff?v=4.1.0') format('woff'),\n    url('../bower_components/font-awesome/fonts/fontawesome-webfont.ttf?v=4.1.0') format('truetype'),\n    url('../bower_components/font-awesome/fonts/fontawesome-webfont.svg?v=4.1.0#fontawesomeregular') format('svg');\n    font-weight: normal;\n    font-style: normal;\n}\n*/\n/**\n * App-wide Styles\n */\n\n.browsehappy {\n    margin: 0.2em 0;\n    background: #ccc;\n    color: #000;\n    padding: 0.2em 0;\n}\n\n .gridButton {\n \tcursor:pointer;\n \tcolor:gray;\n \tpadding: 2px;\n }\n\n .gridButton:hover {\n \tcolor:#4393B9;\n }\n\n .physical_address_editor label {\n  margin-right:10px;\n  margin-left:20px;\n }\n\n\n.alert-popover {\n    max-width:100%;\n}\n\n.alert-popover .popover-content {\n    max-height:300px;\n    overflow-y:auto;\n}\n\n\n/* Breadcrumb stuff */\n.breadcrumb-pin {\n    opacity:0.25;\n    color:gray;\n    cursor:pointer;\n}\n\n.pinned {\n    font-weight: bolder;\n}\n\n.pinned .breadcrumb-pin {\n    opacity:0.75;\n}\n\n.breadcrumb-pin:hover {\n    opacity:1;\n}\n\n.pinned .breadcrumb-pin i {\n    color:#4393B9;\n}\n\n\n/* alert queue at bottom left of screen */\n#alerts-queue {\n  position: fixed;\n  padding: 0 10px;\n  margin-top: 20px;\n  width: 480px;\n  max-width: 100%;\n  z-index: 999;\n    bottom:0;\n    right:0;\n\n}\n\n\n",
	"name": "app.css",
	"path": "dbui/css",
	"rolespec": [
	]
},
{
	"__t": "CssResource",
	"__ver": "sys:4",
	"_class": "CssResource",
	"_id": "o4W541R8SOaAsLdTAFRwBw",
	"content": null,
	"doc": "\"Shadow\" record for file on filesystem.",
	"name": "bootstrap.min.css",
	"path": "bower_components/bootstrap/dist/css",
	"rolespec": null
},
{
	"__t": "CssResource",
	"__ver": "sys:3",
	"_class": "CssResource",
	"_id": "rTEg0q5bQbiYsTXNOFCBvQ",
	"content": null,
	"doc": "\"Shadow\" record for file on filesystem.",
	"name": "font-awesome.min.css",
	"path": "bower_components/font-awesome/css",
	"rolespec": null
},
{
	"__ver": "sys:1",
	"_class": "DataExport",
	"_id": "Vs_E0HrSSk6_aNtNUvexaw",
	"content_type": "text/csv",
	"name": "CSV - Human Readable",
	"transform_fn": "function (getInputStream, outputStream, className, params, db, i18n, nodeRequire, Q, _) {\n    var csv = nodeRequire('csv');\n    var moment = nodeRequire('moment');\n    var typeConverter = {\n        _identity: function(val) {return val;},\n        _array: function(val) {\n            var conv = typeConverter[this.type] || typeConverter._identity;\n            var ret = '', comma='';\n            val = val || [];\n            for(var i=0; i < val.length; i++) {\n                ret += comma+conv(val[i]);\n                comma=', ';\n            }\n            \n            return ret;\n        },\n        date: function(val) {\n            if(val) {\n                return moment(val).format('LL');\n            }\n            \n            return '';\n        },\n        reference: function(val) {\n            return val ? val._disp : '';\n        },\n        boolean: function(val) {\n            return val ? 'true' : 'false';\n        },\n        physical_address : function(val) {\n            if(val) {\n                return (val.address||'')+'\\n'+(val.city||'')+', '+(val.state||'')+' '+(val.zip||'');\n            }\n            return '';\n        }\n    };\n    \n    var deferred = Q.defer();\n    \n    var metaData = db[className]._bo_meta_data;\n    \n    var fieldList = params.fields;\n    \n    if(!fieldList) {\n      fieldList = Object.keys(metaData.type_descriptor);\n    }\n    else if(_.isString(fieldList)) {\n        fieldList = JSON.parse(fieldList);\n    }\n    \n    var lang = params.language || 'en';\n    i18n.getBoLabelGroup(className, lang).then(function(labelGroup) {\n        \n        var columns = {};\n        var fieldTypeConverters = {};\n    \n        _.forEach(fieldList, function(f) {\n            columns[f] = labelGroup[f] || f;\n            var td = metaData.getTypeDescriptor(f);\n            // console.log(\"%s: %j\", f, td);\n            if(td) {\n                if(_.isArray(td))\n                    fieldTypeConverters[f] = typeConverter._array.bind(td[0]);\n                else\n                    fieldTypeConverters[f] = td ? typeConverter[td.type] : null;\n            }\n        });\n        \n        var stringifier = csv.stringify({ header: true, columns: columns });\n        stringifier.pipe(outputStream);\n        \n        var inputStream = getInputStream();\n        \n        inputStream.on('data', function(obj) {\n            var ret = {};\n            _.forEach(fieldList, function(f) {\n                var fieldVal = _.get(obj, f);\n                var conv = fieldTypeConverters[f];\n                if(conv != null) {\n                    ret[f] = conv(fieldVal);\n                }\n                else {\n                    ret[f] = fieldVal;\n                }\n            });\n            stringifier.write(ret);\n        });\n        \n        inputStream.on('end', function() {\n            stringifier.end();\n            deferred.resolve(true);\n        });\n        \n        inputStream.on('error', function(err) {\n            stringifier.end();\n            deferred.reject(err);\n        });\n        \n        inputStream.resume();\n    });\n    \n    \n    \n    \n    return deferred.promise;\n}"
},
{
	"__ver": "sys:2",
	"_class": "DataTrigger",
	"_id": "-aT_dJmKS5uF3MP_nVLLIg",
	"action": "function () {\n    this.system = false;\n    if(!this.language) {\n        this.language = {_id:'-9vPfv2lEeSFtiimx_V4dw'};\n    }\n}",
	"before_after": "before",
	"business_object": {
		"_disp": "LabelGroup",
		"_id": "A_eCG8jqToSYTvnyiSYqRA",
		"system": true
	},
	"doc": "Defaults language field to English if it isn't set.",
	"key": "sys.LabelGroup.before_create",
	"on_create": true,
	"on_delete": false,
	"on_update": false
},
{
	"__ver": "sys:1",
	"_class": "DataTrigger",
	"_id": "IPWKy2naTimBBtj-HykGvA",
	"action": "function (nodeRequire, Q) {\n    if(\n        (this.preprocessor === 'sass' || this.preprocessor === 'scss') &&\n        this.content\n    ) {\n        var deferred = Q.defer();\n        var sass = nodeRequire('node-sass');\n        \n        var THIS = this;\n        \n        sass.render( {\n                data:this.content\n            },\n            function(err, result) {\n                if(err) {\n                    console.error(err.message);\n                    return deferred.reject(err);\n                }\n                THIS.compiled_content = result.css.toString();\n                deferred.resolve(THIS);\n            }\n        )\n        \n        return deferred.promise;\n    }\n    \n}",
	"before_after": "before",
	"business_object": {
		"_disp": "CssResource",
		"_id": "_7EZRGUeRYaiyU-YSZonhQ"
	},
	"doc": "Compile sass/scss into compiled_content when appropriate",
	"key": "sys.CssResource.before_save",
	"on_create": true,
	"on_delete": false,
	"on_update": true
},
{
	"__ver": "sys:2",
	"_class": "DataTrigger",
	"_id": "LomdQQiYRR-FjCWfD4DNzg",
	"action": "function () {\n    this.system = false;\n}",
	"before_after": "before",
	"business_object": {
		"_disp": "Config",
		"_id": "fz7jb19XR5K4aclPQdkjIw",
		"system": true
	},
	"doc": "Set system=false",
	"key": "sys.Config.before_create",
	"on_create": true,
	"on_delete": false,
	"on_update": false
},
{
	"__ver": "sys:5",
	"_class": "DataTrigger",
	"_id": "P7GzOrKTQAKP0UY8s8e5xA",
	"action": "function () {\n    if(this.function) {\n        if(!this.parameters || !this.parameters.length) {\n            \n              var paramRegex = /\\(([\\s\\S]*?)\\)/; //Captures the string between open and close paren\n              var splitRegex = /[ ,\\n\\r\\t]+/;     //Matches whitespace and commas to split the param list into param names\n            \n              var execResult = paramRegex.exec(this.function);\n            \n              if(!execResult || !execResult[1])\n                return;\n            \n              var paramString = execResult[1].trim();\n            \n              if (paramString.length === 0)\n                return;\n            \n            \n            this.parameters = paramString.split(splitRegex);\n        }\n    }\n}",
	"before_after": "before",
	"business_object": {
		"_disp": "AngularProvider",
		"_id": "ZWSBEFYOT6WlJG95iIm_rw",
		"system": true
	},
	"doc": "When an AngularProvider is saved, parse out the parameters in the function definition and put into this.parameters array.  (If the parameters array isn't already populated!)",
	"key": "sys.AngularProvider.before_save",
	"on_create": true,
	"on_delete": false,
	"on_update": true
},
{
	"__ver": "sys:2",
	"_class": "DataTrigger",
	"_id": "TIi-Pfd1Sai81ENuQKBjvA",
	"action": "function (db, _) {\n    var ENGLISH_ID='-9vPfv2lEeSFtiimx_V4dw';\n    var THIS = this;\n    var labelGroupKey = 'db.enum.'+this.name;\n    db.LabelGroup.findOne({key:labelGroupKey, language:ENGLISH_ID}).then(function(lg) {\n        if(!lg) {\n            console.log('Generating LabelGroup for '+labelGroupKey);\n            var labelMap = {};\n            lg = new db.LabelGroup({\n               key:labelGroupKey,\n               language:{_id:ENGLISH_ID},\n               value:labelMap\n            });\n            \n            _.forEach(THIS.values, function(val) {\n                labelMap[val] = _.startCase(val);\n            });\n            lg.save();\n        }    \n    })\n    \n}",
	"before_after": "after",
	"business_object": {
		"_disp": "Enumeration",
		"_id": "gzp1tQoUTfek9ib8xQZp7Q",
		"system": true
	},
	"doc": "Generate an English LabelGroup when an enumeration is created.",
	"key": "sys.Enumeration.after_create",
	"on_create": true,
	"on_delete": false,
	"on_update": false
},
{
	"__ver": "sys:5",
	"_class": "DbuiCustomPage",
	"_id": "2fHM4oJ_TUKJth8FgnTr0g",
	"body": "<div>\n    <div class=\"col-md-12 dbui-header\">\n      <h3>Password Change</h3>\n    </div>\n    <div class=\"row\"><div class=\"col-md-12 \"><p>Please type in your new password below:</p></div></div>\n    <div class=\"row\">\n        <div class=\"col-md-4 col-md-offset-1\">\n            <p class=\"alert\" ng-class=\"messageClass\">{{message}} <ul ng-show=\"complexityRequirements\"><li ng-repeat=\"c in complexityRequirements\">{{c}}</li></ul></p>\n            <form class=\"form-horizontal\">\n                <div class=\"form-group\">\n                  <label for=\"pw\" class=\"control-label\">New Password</label>\n                  <input name=\"pw\" type=\"password\" class=\"form-control\" ng-model=\"pw\"/>\n                </div>\n                <div class=\"form-group\">\n                  <label for=\"pwConfirm\" class=\"control-label\">Confirm New Password</label>\n                  <input name=\"pwConfirm\" type=\"password\" class=\"form-control\" ng-model=\"pwConfirm\" />\n                </div>\n                <button class=\"btn btn-default\" value=\"Submit\" ng-disabled=\"!pw || (pw != pwConfirm)\" ng-click=\"submitChange()\">Change Password</button>\n            </form>\n        </div>\n    </div>\n\n</div>",
	"controller": "function ($scope, NoonAuth, NoonConfig) {\n    \n    $scope.submitChange = function() {\n        \n        NoonAuth.changePassword($scope.pw).then(function(result) {\n            if(result == 'success') {\n                $scope.message = 'Password successfully changed';\n                $scope.messageClass = 'alert-success';\n                $scope.pw = $scope.pwConfirm = '';\n            }\n            else if(result == '$complexity_requirements') {\n                $scope.messageClass = 'alert-danger';\n                $scope.message = \"Your password does not meet complexity requirements.\";\n                NoonConfig.getParameter('sys.password_complexity').then(function(spec) {\n                     $scope.complexityRequirements = spec.description;\n                });\n            }\n            else {   \n                $scope.message = result;\n                $scope.messageClass = 'alert-danger';\n            }\n        },\n        function(err) {\n            alert(err);\n            $scope.message = err;\n            $scope.messageClass = 'alert-danger';\n        });\n    };\n    \n    $scope.disableSumbit = function () {\n        return !$scope.pw || ($scope.pw != $scope.pwConfirm);\n    }\n}",
	"doc": "A \"user profile\" page.  Currently it is just an interface to change one's own password.\n@todo include an automatically-generated list of inputs that allows a user to set values for \"allow customize\" config keys.",
	"key": "dbui.core.user_profile"
},
{
	"__ver": "sys:1",
	"_class": "DbuiCustomPage",
	"_id": "g8O7qmAZQ-Khw4FHXQdlfg",
	"body": "<div>\n    <div class=\"col-md-12 dbui-header\">\n      <h3>{{reportLabels._report_title}}</h3>\n    </div>\n    <div class=\"row\"><div class=\"col-md-12 \"><p>{{reportLabels._report_desc}}</p></div></div>\n    <div class=\"row\">\n        <div class=\"col-md-10 col-md-offset-1\" ng-if=\"inputObj && reportLabels\">\n            <dbui-object-editor the-object=\"inputObj\" perspective=\"inputPerspective\"></dbui-object-editor>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-md-10 col-md-offset-1\" ng-if=\"inputObj && reportLabels\">\n            <button class=\"btn btn-primary btn-block\" ng-click=\"submit()\">Submit</button>\n        </div>\n    </div>\n    \n    <div ng-if=\"resultObj\">\n        <dbui-object-viewer the-object=\"resultObj\" perspective=\"outputPerspective\"></dbui-object-viewer> \n    </div>\n    \n\n</div>",
	"controller": "function (db, Dbui, NoonI18n, NoonWebService, BusinessObjectModelFactory, $stateParams) {\n    \n    var inputModel;\n    var outputModel;\n    \n    \n    \n    NoonWebService.call('dbui/getReportSpec', {id:$stateParams.id}).then(function(result) {\n        \n        var reportSpec = $scope.reportSpec = result.reportSpec;\n        var labels = $scope.reportLabels = result.labels;\n        \n        // db.makeCompositeBo(reportSpec.name+'#input', reportSpec.input_typedef, {});\n        inputModel = BusinessObjectModelFactory.getConstructor(\n              reportSpec.input_typedef, \n              reportSpec.name+'#input', \n              labels._input_fields\n        );\n        $scope.inputObj = new inputModel({});\n        console.log($scope.inputObj)\n        \n        $scope.inputPerspective = reportSpec.input_perspective;\n        $scope.inputPerspective.layout = Dbui.normalizeLayout($scope.inputPerspective.layout);\n        \n        \n        outputModel = BusinessObjectModelFactory.getConstructor(\n              reportSpec.output_typedef, \n              reportSpec.name+'#output', \n              labels._output_fields\n        );\n        \n        $scope.outputPerspective = reportSpec.output_perspective;\n        $scope.outputPerspective.layout = Dbui.normalizeLayout($scope.outputPerspective.layout);\n        \n    });\n    \n    \n    $scope.submit = function() {\n        NoonWebService.call($scope.reportSpec.web_service.path, {input:$scope.inputObj}).then(function(resp) {\n            $scope.resultObj = new outputModel(resp); \n            console.log($scope.resultObj);\n        });\n    };\n    \n}",
	"doc": "Provides UI for generating a report for a DbuiReport",
	"key": "dbui.report"
},
{
	"__ver": "sys:5",
	"_class": "DbuiCustomPage",
	"_id": "wGwX2SpXRjWE7iLAAQkROQ",
	"body": "<div>\n    <div class=\"row\">\n        <div class=\"col-md-12 dbui-header\">\n          <h3>Welcome to Noonian DBUI!</h3>\n        </div>\n    </div>\n    \n    <div class=\"row\">\n        <div class=\"col-md-offset-1 col-md-8 \">\n            <p>If you're reading this, you can celebrate a succssful installation of Noonian.  At some point in the future this default \"out-of-the-box\" home page will be replaced with some useful \"getting started\" information.</p>\n            <p>For now, it is hoped that you'll be satisfied with a link to the documentation:  <a href=\"https://noonian.org\" target=\"_blank\">https://noonian.org</a></p>\n        </div>\n    </div>\n    \n</div>",
	"doc": "The \"out-of-the-box\" home page.",
	"key": "dbui.core.oob_home"
},
{
	"__ver": "sys:1",
	"_class": "DocTemplate",
	"_id": "4ErFTHwWQS2ptwkBB1UZWg",
	"content": "= Package: {{package.name}} ({{package.key}}) =\n:{{package.description}}\n\n== Server-side Contents ==\n=== BusinessObject Classes ===\n{{#businessObjectDefs}}\n==== {{class_name}} ====\n:{{doc}}\n{{/businessObjectDefs}}\n\n=== Web Services ===\n{{#webServices}}\n==== {{path}} ====\n:{{doc}}\n{{/webServices}}\n\n=== Data Triggers === \n{{#dataTriggers}}\n==== {{key}} ====\n:<u>'''{{before_after}}''': {{business_object._disp}} {{#on_create}} CREATE {{/on_create}}  {{#on_update}} UPDATE {{/on_update}} {{#on_delete}}DELETE{{/on_delete}}</u> \n\n:{{doc}}\n{{/dataTriggers}}\n\n== Client-side Contents ==\n=== Perspectives ===\n{{#perspectives}}\n==== {{name}} ====\n{{#classes}}\n * {{.}}\n{{/classes}}\n{{/perspectives}}\n\n=== Custom Pages ===\n{{#customPages}}\n==== {{key}} ====\n:{{doc}}\n{{/customPages}}\n\n=== UI Actions === \n{{#uiActions}}\n==== {{key}} ====\n:{{doc}}\n{{/uiActions}}",
	"content_type": "text/plain",
	"key": "sys.package_doc"
},
{
	"__ver": "sys:1",
	"_class": "Enumeration",
	"_id": "aGtg2ZyaRACD6m0S-ulCog",
	"name": "CssPreprocessor",
	"values": [
		"css",
		"sass",
		"scss"
	]
},
{
	"__ver": "sys:1",
	"_class": "Enumeration",
	"_id": "ziaKbpUeTYC8t691DU1tug",
	"name": "TimeDuration",
	"values": [
		"milliseconds",
		"seconds",
		"minutes",
		"hours",
		"days",
		"weeks",
		"months",
		"years"
	]
},
{
	"__ver": "sys:1",
	"_class": "FieldType",
	"_id": "2RQWYKymQMmfYqEGxXVtoA",
	"doc": "A physical address: street, city, state, zip.  \n\n@todo refactor to utilize a more general 'named composite' mechanism for defining field types like this.\n@todo geoloc support",
	"mongo_type": "Mixed",
	"name": "physical_address",
	"text_index": false
},
{
	"__pkg": "sys",
	"__ver": "sys:2",
	"_class": "FieldType",
	"_id": "9_TB_-ppQnCpm3EKkO8naw",
	"doc": "A representation of a path along some sort of abstract tree whose nodes are named with simple strings, e.g. a path on a filesystem.  Useful for organizing data hierarchically.\n\n@param {string} seperator - character that separates nodes on a path, such as \"/\" or \".\"",
	"mongo_type": "String",
	"name": "path",
	"text_index": true
},
{
	"__pkg": "sys",
	"__ver": "sys:2",
	"_class": "FieldType",
	"_id": "DDssakmDQoeACryXT377xw",
	"doc": "A phone number.  Upon save to database, any formatting characters (parens, dashes, whitespace) are removed to insure only digits are stored in DB.",
	"mongo_type": "String",
	"name": "phone",
	"text_index": true,
	"to_db": "function (value) {\n    if(value && 'string' === typeof value) {\n        //remove all non-digits\n        var pieces = value.split(/\\D/);\n        value = pieces.join('');\n    }\n    \n    return value;\n}"
},
{
	"__pkg": "sys",
	"__ver": "sys:4",
	"_class": "FieldType",
	"_id": "EaQUGA7oS7qKanG4QbvYbQ",
	"doc": "A floating point number; i.e. a numeric value allowing a decimal point.  Can optionally constrain to a range of values.\n\n@param {Number} [min] - minimum permitted value\n@param {Number} [max] - maximum permitted value",
	"get_validator": "function (typeDesc) {\n    var v = {\n        validator:'isFloat',\n        message: \"$incompatible-type\"\n    }\n    \n    if(typeDesc.min || typeDesc.max) {\n        v = [v];\n        v.push({\n            validator:'isFloat',\n            arguments:[{min:td.min, max:td.max}],\n            message: \"$out-of-range\"\n        });\n    }\n    \n    return v;\n}",
	"mongo_type": "Number",
	"name": "float",
	"text_index": false
},
{
	"__ver": "sys:2",
	"_class": "FieldType",
	"_id": "EqIuGj81QTyVDFA7qRQNHg",
	"doc": "Text block for documenting code or software modules.  Can utilze JSDoc tags {@link http://usejsdoc.org}",
	"mongo_type": "String",
	"name": "jsdoc",
	"text_index": true
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "FieldType",
	"_id": "JMHHYAPlSgKuC5alDvehWA",
	"doc": "A URL string.",
	"get_validator": "function () {\n    return {\n        validator:'isURL',\n        message: \"$incompatible-type\"\n    };\n}",
	"mongo_type": "String",
	"name": "url",
	"text_index": true
},
{
	"__pkg": "sys",
	"__ver": "sys:2",
	"_class": "FieldType",
	"_id": "L0RpjYeuS-uVqxj00KzEZg",
	"doc": "An RGB color.  Stored as a string formatted as standard css color spec: \"#RRGGBB\"",
	"get_validator": "function () {\n    return {\n        validator:'isHexColor',\n        message: \"$incompatible-type\"\n    };\n}",
	"mongo_type": "String",
	"name": "color",
	"text_index": false
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "FieldType",
	"_id": "PkJTkOpsStGYcReZiDoEnQ",
	"doc": "A password.  Can optionally be stored in mongo as a hash instead of plaintext string.\n\n@param {boolean} [hash] - if true, a hash is stored in mongo (generated using {@link https://www.npmjs.com/package/bcrypt|bcrypt} library) instead of plain string.  When a plain string is the value of a password field when save() is called, toDb logic converts it into a hash.  When the value is pulled from the DB, it is augmented with a \"matches()\" function that performs the comparison against a plain-text string.",
	"from_db": "function (value, typeDesc) {\n    if(typeDesc.hash) {\n        var bcrypt = require('bcrypt');\n        value = value || {};\n        value.matches = function(toCheck) {\n          return bcrypt.compareSync(toCheck, this.hash);  \n        };\n    }\n    return value;\n}",
	"get_validator": "function (typeDesc) {\n    return function(value) {\n        return (typeof value === 'string') ||\n            ( typeDesc.hash &&\n            typeof value === 'object' &&\n            value.hasOwnProperty(\"hash\")\n            );\n    }\n}",
	"mongo_type": "Mixed",
	"name": "password",
	"text_index": false,
	"to_db": "function (value, typeDesc) {\n\tif(typeDesc.hash) {\n\t    var bcrypt = require('bcrypt');\n\t\t//If we're supposed to store a hash, but a string was set for this field...\n\t\tif(typeof value === 'string') {\n\t\t\t//...then change it into a hash\n\t\t\tvar salt = bcrypt.genSaltSync();\n\t\t\tvar hash = bcrypt.hashSync(value, salt);\n\t\t\treturn {\n\t\t\t    hash:hash\n            };\n\t\t}\n\t}\n\n\treturn value;\n}"
},
{
	"__pkg": "sys",
	"__ver": "sys:2",
	"_class": "FieldType",
	"_id": "Qywi2S8xT86_tQl4leIXNA",
	"doc": "A block of text.",
	"mongo_type": "String",
	"name": "text",
	"text_index": true
},
{
	"__pkg": "sys",
	"__ver": "sys:2",
	"_class": "FieldType",
	"_id": "S8eHnlXxQJqIPLM2q8HniQ",
	"doc": "An email address.",
	"get_validator": "function () {\n    return {\n        validator:'isEmail',\n        message: \"$incompatible-type\"\n    };\n}",
	"mongo_type": "String",
	"name": "email",
	"text_index": true
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "FieldType",
	"_id": "SRrCNHZCTvW6sTMtR3a0iQ",
	"doc": "A full-fledged date/time value, which can be represented as a javascript Date or ISO 8601 string.",
	"get_validator": "function () {\n    return {\n        validator:'isDate',\n        message: \"$incompatible-type\"\n    };\n}",
	"mongo_type": "Date",
	"name": "datetime",
	"text_index": false
},
{
	"__pkg": "sys",
	"__ver": "sys:4",
	"_class": "FieldType",
	"_id": "WiUvP7txRQiF6tPM9FpFIw",
	"doc": "Standard boolean value of true or false.  Supports a \"trinary\" mode which allows values of true, false, or null.\n\n@param {string} [subtype] - if present, and equal to \"trinary\", system will allow 'null' value in addition to true/false",
	"get_validator": "function () {\n    return {\n        validator:'isBoolean',\n        message: \"$incompatible-type\"\n    };\n}",
	"mongo_type": "Boolean",
	"name": "boolean",
	"text_index": false,
	"to_db": "function (value) {\n    //Allow for case-insensitive string values \"false\"\n    if(typeof value === 'string') {\n        var valMap = {\n            'false':false,\n            'true':true,\n            'null':null\n        };\n    \treturn valMap[value.toLowerCase()];\n    }\n    \n    if(value === undefined)\n        value = null;\n    \n    return value;\n}"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "FieldType",
	"_id": "ZD_vX9d-RLqxGTOdZntz6Q",
	"doc": "Simple string value.  Can be limited to a specific set of values via the 'enum' parameter.\n\n@param {string[]} [enum] - array of permitted values for the field",
	"get_validator": "function (typeDesc) {\n    if(typeDesc.regex) {\n        return {\n            validator:'matches',\n            arguments: [typeDesc.regex, typeDesc.regex_modifiers],\n            message: '$regex-mismatch'\n        }\n    }\n    \n    return null;\n}",
	"mongo_type": "String",
	"name": "string",
	"text_index": true
},
{
	"__pkg": "sys",
	"__ver": "sys:2",
	"_class": "FieldType",
	"_id": "aeOhqBixSbigoy3yBkyScQ",
	"doc": "A role \"specification\", i.e. a concise way of representing a set of roles that apply to a given resource or permission.  Stored as an array of id's of Role objects, the semantics of which are \"a user with one of these roles is granted access to this resource or permission\".  An empty array or null value is a way of specifying \"no restriction\".",
	"mongo_type": "Mixed",
	"name": "rolespec",
	"text_index": false
},
{
	"__pkg": "sys",
	"__ver": "sys:2",
	"_class": "FieldType",
	"_id": "bHeoPzsMScORdzjtX6GdoA",
	"doc": "A reference to a Business Object.  \n\n@param {string} [ref_class] - name of Business Object class being referenced.  If omitted from the type descriptor, the individual values of the field must have a ref_class attribute.",
	"mongo_type": "Mixed",
	"name": "reference",
	"text_index": false
},
{
	"__ver": "sys:3",
	"_class": "FieldType",
	"_id": "cKFhGuY3SZ6_2YWKwkpqCA",
	"doc": "An amount of money, in a particular currency.  Stored in mongo as an object with 'amount' and 'currency' attributes.\n\n@todo this is pretty much a placeholder at this time; everything is forced to 'USD' for currency.",
	"from_db": "function (value) {\n    //for new we're pretending like all money values are just USD, even though we're storing a more complex data structure.\n    // in the future we need a more robust money data type\n    if(value && 'object' === typeof value) {\n        return value.amount;\n    }\n    \n    return value;\n}",
	"mongo_type": "Mixed",
	"name": "money",
	"text_index": false,
	"to_db": "function (value) {\n    if(!value) {\n        return null;\n    }\n    \n    if('object' === typeof value) {\n        return value;\n    }\n    \n    if('string' === typeof value) {\n        value = +value;\n    }\n    \n    if(isNaN(value)) {\n        return null;\n    }\n    \n    return {\n        amount:value,\n        currency:'USD'\n    };\n\n    \n}"
},
{
	"__pkg": "sys",
	"__ver": "sys:2",
	"_class": "FieldType",
	"_id": "e-rYyVWHQoKi1om5SUBMcA",
	"doc": "A javascript function.\n\n@param {string} [applicable] - either \"clientside\" or \"serverside\" to indicate the context in which the function is meaningful (in web browser, or in node.js).",
	"mongo_type": "Function",
	"name": "function",
	"text_index": false
},
{
	"__ver": "sys:5",
	"_class": "FieldType",
	"_id": "ePi7MsceQMqn3qnVBlHkNA",
	"doc": "A field type that is composed of various fields of it's own.  A composite field's own type descriptor contains a \"type_desc_map\" which has the same format as a BusinessObjectDef's descriptor, effectively making it a \"Second-class\" Business Object in a sense.  A value for a composite field receives a \"_bo_meta_data\" property, that in turn has a type_desc_map field and a class_name of \"OwnerClass#field_name\".  The type_desc_map is equipped with a 'construct' function, which is used to instantiate one of these \"second-class\" business objects. \n\n{@link CompositeFieldType}\n\n@param {Object} type_desc_map - a mapping of the type's \"sub-field\" names to their corresponding type descriptors. {@link TypeDescMap}",
	"from_db": "function (value, typeDesc, fieldName) {\n    if(!value)\n    return value;\n    var parent_meta = this._bo_meta_data;\n    \n    if(!value._bo_meta_data) {\n        Object.defineProperty(value, '_bo_meta_data', { \n            enumerable:false, writable:false, \n            value: {\n                type_desc_map:typeDesc.type_desc_map,\n                class_name: parent_meta.class_name+'#'+fieldName,\n                getTypeDescriptor:function(path) {\n                    return parent_meta.getTypeDescriptor(fieldName+'.'+path)\n                }\n            }\n        });\n    }\n    \n    return value;\n}",
	"mongo_type": "Mixed",
	"name": "composite",
	"text_index": false,
	"to_db": "function (value, typeDesc, fieldName) {\n    var ret = value;\n    if(value && value._bo_meta_data) {\n        ret = {};\n        var myTd = typeDesc.type_desc_map;\n        for(var f in myTd) {\n            if(f.indexOf('_') !== 0)\n                ret[f] = value[f];\n        }\n    }\n    return ret;\n}"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "FieldType",
	"_id": "gxJBuQp7RkKLIV0cazfFnA",
	"doc": "An integer numeric value, i.e. no decimal point.   Can optionally constrain to a range of values.\n\n@param {Number} [min] - minimum permitted value\n@param {Number} [max] - maximum permitted value",
	"get_validator": "function (typeDesc) {\n    var v = {\n        validator:'isInt',\n        message: \"$incompatible-type\"\n    };\n    \n    if(typeDesc.min || typeDesc.max) {\n        v = [v];\n        v.push({\n            validator:'isInt',\n            arguments:[{min:typeDesc.min, max:typeDesc.max}],\n            message: \"$out-of-range\"\n        });\n    }\n    \n    return v;\n}",
	"mongo_type": "Number",
	"name": "integer",
	"text_index": false
},
{
	"__ver": "sys:1",
	"_class": "FieldType",
	"_id": "jOZVJVLOTmGK6Ppf7JNnCw",
	"doc": "Represents a duration of time",
	"mongo_type": "Mixed",
	"name": "duration",
	"text_index": false
},
{
	"__pkg": "sys",
	"__ver": "sys:3",
	"_class": "FieldType",
	"_id": "lpmwbanlQH20mCWioX0H1g",
	"doc": "A graphical image: png, jpeg, etc.  Stored in mongo as an object containing properties for metadata ('name', 'type'), and base64-encoded binary data ('data', 'thumbData').  \n\nThe format of the binary data is in fact a proper \"data URL\" ({@link https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs}) that can be rendered in the browser by placing in an html <img> tag's src attribute.\n\n@todo possibly add parameter to specify storage preference (base64 property, fs.chunks, ...)",
	"mongo_type": "Mixed",
	"name": "image",
	"text_index": false
},
{
	"__pkg": "sys",
	"__ver": "sys:8",
	"_class": "FieldType",
	"_id": "nplFum9LRdWvt5TW1LyulQ",
	"doc": "A simple date:  a day/month/year.  No time or timezone information.  Stored in Mongo as a string formatted yyyy-MM-dd.\n\n@todo add typedesc parameter 'resolution' to allow month/year or just year.",
	"get_validator": "function () {\n    return {\n        validator:function(v) {\n            return /\\d{4}-\\d{2}-\\d{2}/.test(v);\n        },\n        message: \"$incompatible-type\"\n    };\n}",
	"mongo_type": "String",
	"name": "date",
	"text_index": false,
	"to_db": "function (value) {\n    var properFormat = /^\\d{4}-\\d{2}-\\d{2}$/;\n    \n    if(properFormat.test(value)) {\n        return value;\n    }\n    else if(value) {\n        var d = new Date(value);\n        \n        if(d.toString() === 'Invalid Date') {\n            return null;\n        }\n        \n        var yyyy = d.getFullYear();\n        var mm = d.getMonth()+1;\n        var dd = d.getDate();\n        \n        mm = mm < 10 ? '0'+mm : ''+mm;\n        dd = dd < 10 ? '0'+dd : ''+dd;\n        \n        return yyyy+'-'+mm+'-'+dd;\n    }\n    \n    return null;\n}"
},
{
	"__pkg": "sys",
	"__ver": "sys:5",
	"_class": "FieldType",
	"_id": "uMEzxXwVSgmj_dbfeY-fLA",
	"doc": "An arbitrary JSON object.  Can actually be an object, an array, a primitive, or null.",
	"from_db": "function (value) {\n    //Unescape any keys that start with uFF04 (unicode $)\n    // or have unicode period\n    var ud = '\\uFF04';\n    var udot = '\\uFF0E';\n    \n    var callStack = [];\n    var unescapeDollars = function(obj) {\n        if(typeof obj === 'object' && callStack.indexOf(obj) === -1) {\n            callStack.push(obj);\n            for(var key in obj) {\n                if(!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n                unescapeDollars(obj[key]);\n                if(typeof key === 'string') {\n                    if(key.indexOf(ud)===0) {\n                        var newKey = '$'+key.substring(1);\n                        obj[newKey] = obj[key];\n                        delete obj[key];\n                    }\n                    if(key.indexOf(udot) > -1) {\n                        var newKey = key.replace(/\\uFF0E/g, '.');\n                        obj[newKey] = obj[key];\n                        delete obj[key];\n                    }\n                }\n            }\n            callStack.pop();\n        }\n    };\n    \n    unescapeDollars(value);\n    return value;\n}",
	"mongo_type": "Mixed",
	"name": "object",
	"text_index": false,
	"to_db": "function (value) {\n    //https://docs.mongodb.org/manual/faq/developers/#dollar-sign-operator-escaping\n    //Escape any keys that start with $ or contain one or more dots\n    var ud = '\\uFF04';\n    var udot = '\\uFF0E';\n    \n    var callStack = [];\n    var escapeDollars = function(obj) {\n        if(typeof obj === 'object' && callStack.indexOf(obj) === -1) {\n            callStack.push(obj);\n            for(var key in obj) {\n                if(!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n                escapeDollars(obj[key]);\n                if(typeof key === 'string') {\n                    if(key.indexOf('$')===0) {\n                        var newKey = ud+key.substring(1);\n                        obj[newKey] = obj[key];\n                        delete obj[key];\n                    }\n                    if(key.indexOf('.') > -1) {\n                        var newKey = key.replace(/\\./g, udot);\n                        obj[newKey] = obj[key];\n                        delete obj[key];\n                    }\n                }\n            }\n            callStack.pop();\n        }\n    };\n    \n    escapeDollars(value);\n    return value;\n}"
},
{
	"__ver": "sys:3",
	"_class": "FieldType",
	"_id": "uavtEE5AT2q5WcEcsWYTpw",
	"doc": "A \"clock time\" value, e.g. 1:30 PM.  Stored in database with millisecond-precision, as a string formatted as the time portion of an ISO 8601 date/time string.  (No timezone information stored, however).\n\n@todo add support for a \"resolution\" parameter, to specify if seconds/milliseconds should be stored.",
	"mongo_type": "String",
	"name": "time",
	"text_index": false
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "FieldType",
	"_id": "vOaH1F-HRhefePjYFAGCBA",
	"doc": "A block of sourcecode.\n\n@param {string} language - name of programming language; corresponds to Ace editor \"mode\" parameter",
	"mongo_type": "String",
	"name": "sourcecode",
	"text_index": false
},
{
	"__pkg": "sys",
	"__ver": "sys:2",
	"_class": "FieldType",
	"_id": "vxlB7gSPTWqq98tG5lCcPQ",
	"doc": "An arbitrary file attachment.  The actual content of the file is stored in mongoDB's special collections \"fs.files\" and \"fs.chunks\", with the value of an \"attachment\" type field being a reference to the object in fs.files.",
	"mongo_type": "Mixed",
	"name": "attachment",
	"text_index": false
},
{
	"__pkg": "sys",
	"__ver": "sys:3",
	"_class": "FieldType",
	"_id": "z_2NESmpQ-29ACeUMhflNQ",
	"doc": "An \"enumerated\" type - a value selected from a limited set of possible values.  The list of possible values is specified by referencing an {@link Enumeration} object by name.\n\n@param {string} enum - name of Enumeration",
	"mongo_type": "String",
	"name": "enum",
	"text_index": true
},
{
	"__ver": "sys:3",
	"_class": "FieldTypeUiSpec",
	"_id": "0EOzSaCaS2OrxRIr2WfbXA",
	"controller_fn": "function ($scope) {\n\n    var fc = $scope.fieldCustomizations;\n    $scope.format = (fc && fc.format) ? fc.format : 'MMMM dd, yyyy';\n\n  }",
	"doc": "Displays date by simply running it through angular's *date* filter.  {@link https://docs.angularjs.org/api/ng/filter/date} \n\n@param {string} [format] - format string for date.  If not present, defaults to \"MMMM dd, yyyy\"",
	"fieldtypes": [
		{
			"_disp": "date",
			"_id": "nplFum9LRdWvt5TW1LyulQ",
			"name": "date"
		}
	],
	"for_editing": false,
	"for_editing_array": false,
	"for_viewing": true,
	"for_viewing_array": false,
	"key": "dbui.core.date.view",
	"template": "<div>\n  <span>{{displayValue | date:format}}</span>\n</div>"
},
{
	"__ver": "sys:1",
	"_class": "FieldTypeUiSpec",
	"_id": "1-8wwUmiSpSdYgICK078Vw",
	"controller_fn": "function ($scope, NoonI18n) {\n    \n    NoonI18n.getEnumerationValues('TimeDuration').$promise.then(function(enumValues){\n\n      if($scope.typeDesc.units && $scope.typeDesc.units.length) {\n        $scope.units = [];\n        var keepVals = {};\n\n        for(var i=0; i < $scope.typeDesc.units.length; i++) {\n          keepVals[$scope.typeDesc.units[i]] = true;\n        }\n\n        for(var i=0; i < enumValues.length; i++) {\n          var curr = enumValues[i];\n          if(keepVals[curr.value] || ($scope.binding && $scope.binding.value && curr.value === $scope.binding.value.unit)) {\n            $scope.units.push(curr);\n          }\n        }\n      }\n      else {\n        $scope.units = enumValues;\n      }\n    });\n    \n}",
	"fieldtypes": [
		{
			"_disp": "duration",
			"_id": "jOZVJVLOTmGK6Ppf7JNnCw",
			"name": "duration"
		}
	],
	"for_editing": true,
	"for_editing_array": false,
	"for_viewing": false,
	"for_viewing_array": false,
	"key": "dbui.core.duration.edit",
	"template": "<div >\n  <input class=\"form-control\" style=\"width:40%;display:inline-block\" type=\"number\" step=\"any\" ng-model=\"binding.value.number\" elem-id=\"{{elemId}}.number\">\n  <select class=\"form-control\" style=\"width:40%;display:inline-block\" ng-options=\"unit.value as unit.label for unit in units\" ng-model=\"binding.value.unit\" elem-id=\"{{elemId}}.unit\"></select>\n</div>"
},
{
	"__ver": "sys:4",
	"_class": "FieldTypeUiSpec",
	"_id": "2HV6rNCrSySh_05yfcg50w",
	"doc": "Displays boolean value as text, optionally stylized by css classes specified in fieldCustomizations.\n\n@param {Object} [displayValue] - maps values ('true', 'false', 'null') to Objects specifying 'text' and css 'class' to be used for display",
	"fieldtypes": [
		{
			"_disp": "boolean",
			"_id": "WiUvP7txRQiF6tPM9FpFIw",
			"name": "boolean"
		}
	],
	"for_editing": false,
	"for_editing_array": false,
	"for_viewing": true,
	"for_viewing_array": false,
	"key": "dbui.core.boolean.view",
	"template": "<div class=\"dbui-view-field-boolean\" >\n  <span ng-if=\"fieldCustomizations.displayValue\" ng-class=\"fieldCustomizations.displayValue[''+displayValue].class\">{{fieldCustomizations.displayValue[''+displayValue].text}}</span>\n  <span ng-if=\"!fieldCustomizations.displayValue\">{{displayValue}}</span>\n</div>"
},
{
	"__ver": "sys:8",
	"_class": "FieldTypeUiSpec",
	"_id": "3G2t7niJSRmrRluTIU9cSg",
	"controller_fn": "function ($scope, DbuiAction) {\n    $scope.viewRefObj = function() {\n      var td = $scope.typeDesc;\n      var displayValue = $scope.displayValue;\n      if(displayValue) {\n          var action = DbuiAction.unalias('dialog-view');\n          var args = {\n              className:  td.ref_class || displayValue.ref_class,\n              targetObj: displayValue\n          };\n          DbuiAction.invokeAction(null, null, action, args);\n      }\n    };\n\n}",
	"doc": "Renders the \"_disp\" value from the reference object, if present.  Optionally, can render as a clickable link to invoke a view dialog of the referenced object.\n\n@param {boolean} [enableViewLink] - if true, renders the text as a clickable link that invokes the \"dialog-view\" action.",
	"fieldtypes": [
		{
			"_disp": "reference",
			"_id": "bHeoPzsMScORdzjtX6GdoA",
			"name": "reference"
		}
	],
	"for_editing": false,
	"for_editing_array": false,
	"for_viewing": true,
	"for_viewing_array": false,
	"key": "dbui.core.reference.view",
	"template": "<div ng-switch=\"fieldCustomizations.enableViewLink\">\n  <a href ng-switch-when=\"true\" ng-click=\"viewRefObj()\">{{displayValue.ref_class ? displayValue.ref_class+':' : ''}} {{ displayValue._disp }}</a>\n  <span ng-switch-default>{{displayValue.ref_class ? displayValue.ref_class+':' : ''}} {{ displayValue._disp }}</span>\n</div>"
},
{
	"__ver": "sys:10",
	"_class": "FieldTypeUiSpec",
	"_id": "3puRzrB0QWKw9aKe7RVZ9g",
	"controller_fn": "function ($scope, $filter) {\n    \n    var td = $scope.typeDesc;\n    var fc = $scope.fieldCustomizations;\n\n\n    var theme = 'dawn';\n    if(fc && fc.displayTheme) {\n        \n        if(typeof fc.displayTheme === 'string'){\n            theme = fc.displayTheme;\n        }\n        else {\n            var appliesKey = td.applicable || 'default';\n            if(fc.displayTheme[appliesKey]) {\n                theme = fc.displayTheme[appliesKey];\n            }\n        }\n        \n    }\n    \n    $scope.aceInit = {\n      theme:theme,\n      mode: 'json',\n      useWrapMode : true,\n      showGutter: true\n    };\n    \n    \n    $scope.aceInit.onLoad = function(editor) {\n        $scope.aceEditor = editor;\n        editor.$blockScrolling = Infinity;\n        // var session = editor.getSession(); //http://ajaxorg.github.io/ace/#nav=api&api=edit_session\n    };\n    \n    \n    $scope.aceInit.onChange = function() {\n        $scope.updateNgModel($scope.aceEditor.getValue());\n    };\n    \n    \n    //called when underlying ngModel changes.\n    $scope.onModelChange = function(valueObj) {\n        var valueStr = (valueObj !== null) ? $filter('json')(valueObj) : '';\n        \n        if(valueStr === undefined) {\n            valueStr = '';\n        }\n        \n        $scope.aceEditor.setValue(valueStr, -1);\n    };\n\n}",
	"doc": "Displays an {@link https://ace.c9.io|Ace editor}, and utilizes the {@link https://github.com/angular-ui/ui-ace|ui-ace} angular directive wrapper.\n\nUtilizes angular's $filter('json') to render object value to editor, and angular.fromJson to parse editor value into bound value.\n\n@param {Object|string} [displayTheme] name of theme to use for editor (if string), or an object mapping the type descriptors \"applicable\" value ('clientside','serverside' or 'default') to theme name.",
	"fieldtypes": [
		{
			"_disp": "object",
			"_id": "uMEzxXwVSgmj_dbfeY-fLA",
			"name": "object"
		}
	],
	"for_editing": true,
	"for_editing_array": false,
	"for_viewing": false,
	"for_viewing_array": false,
	"key": "dbui.core.object.edit",
	"link_fn": "function (scope, iElement, iAttributes, ngModel) {\n    \n    //Sets $viewValue directly when ace editor value changes\n    scope.updateNgModel = function(valueStr) {\n        //Content of editor changed -> update binding.value\n        try {\n          var valueObj = angular.fromJson(valueStr);\n\n          if(valueObj === '') {\n            ngModel.$setViewValue(null);\n            scope.valid = true;\n          }\n          else {\n            ngModel.$setViewValue(valueObj);\n            scope.valid = true;\n          }\n        } catch(e) {\n          scope.valid = false;\n        }\n      };\n      \n      //When a change to ngModel occurs, $render is called to notify us to update the UI\n      ngModel.$render = function() {\n          //Grab $viewValue, tell the controller about it\n          scope.onModelChange(ngModel.$viewValue);\n      };\n      \n      \n        // ngModel.$formatters.push(function(modelValue) {\n        //     console.log('format', modelValue);\n        //     return {value:modelValue};\n        // });\n        \n        // ngModel.$parsers.push(function(viewValue) {\n        //     console.log('parse', viewValue);\n        //     return viewValue.value;\n        // });\n      \n    \n    //Communicate to dbuiFieldEditor to SKIP set-up of ngModel binding to scope.binding.value:\n    return false; \n}",
	"template": "<div class=\"dbui-edit-field-object\">\n  <div ui-ace=\"aceInit\"></div>\n</div>"
},
{
	"__ver": "sys:4",
	"_class": "FieldTypeUiSpec",
	"_id": "3y_egv2CQ1aiRhukfvJIRg",
	"doc": "Renders text content to a <pre> tag.  Optionally truncating w/ ellipsis if \"abbreviated\" parameter present.  Also adds a \"title\" attribute so that mouse-over shows complete text in a tooltip.\n\n@param {boolean} [abbreviated] - if true, displays only first 30 characters with '...'",
	"fieldtypes": [
		{
			"_disp": "text",
			"_id": "Qywi2S8xT86_tQl4leIXNA",
			"name": "text"
		},
		{
			"_disp": "jsdoc",
			"_id": "EqIuGj81QTyVDFA7qRQNHg",
			"name": "jsdoc"
		}
	],
	"for_editing": false,
	"for_editing_array": false,
	"for_viewing": true,
	"for_viewing_array": false,
	"key": "dbui.core.text.view",
	"template": "<div>\n    <span ng-show=\"displayValue\" title=\"{{displayValue}}\">\n\t<pre>{{ abbreviated && displayValue.length > 30 ? displayValue.substring(0, 30)+'...' : displayValue}}</pre>\n\t</span>\n</div>"
},
{
	"__ver": "sys:1",
	"_class": "FieldTypeUiSpec",
	"_id": "7SaoAuyKRd6WbIu1ANryEw",
	"controller_fn": "function ($scope, $stateParams, Dbui) {\n    console.log('dbui.core.Array.composite.view', $scope);\n    //Little editable datatable\n    \n    var fc = $scope.fieldCustomizations;\n    var td = $scope.typeDesc[0];\n    \n    var stub = td.construct({});\n    \n    $scope.objMetaData = stub._bo_meta_data;\n    \n    \n    //Action object to remove an item from the array:\n    var removeAction = {\n      icon:'fa-remove',\n      fn:function(args) {\n        if(args) {\n          $scope.binding.value.splice(args.index, 1);\n        }\n        return true;\n      }\n    };\n    \n    //Config object for \n    $scope.tableConfig = fc.table_config || {\n      cellEdit:false,    //allow 'global' edit (all fields editable) TODO configure from fieldCustomizations\n      recordActions:[]\n    };\n    \n    //Use 'list' perspective for editing an array of composites:\n    if(fc.list_perspective) {\n        var p = angular.copy(fc.list_perspective);\n        $scope.subPerspective = p;\n    }\n    else {\n        Dbui.getPerspective($stateParams.perspective, stub._bo_meta_data.class_name, 'list').then(function(subPerspective) {\n            $scope.subPerspective = subPerspective;\n        });\n    }\n    \n    \n    //Ensure empty array binding when binding.value is null:\n    var unwatchFn = $scope.$watch('displayValue', function(newBinding) {\n        if(!newBinding) {\n            $scope.displayValue = [];\n        }\n        unwatchFn();\n    });\n    \n\n}",
	"fieldtypes": [
		{
			"_disp": "composite",
			"_id": "ePi7MsceQMqn3qnVBlHkNA",
			"name": "composite"
		}
	],
	"for_editing": false,
	"for_editing_array": false,
	"for_viewing": false,
	"for_viewing_array": true,
	"key": "dbui.core.Array.composite.view",
	"template": "<div ng-if=\"displayValue && subPerspective\">\n    <dbui-object-table ng-if=\"subPerspective.orientation !== 'vertical'\" ng-model=\"displayValue\" perspective=\"subPerspective\" object-meta-data=\"objMetaData\" config=\"tableConfig\"></dbui-object-table>\n    <dbui-vertical-table ng-if=\"subPerspective.orientation === 'vertical'\" ng-model=\"displayValue\" perspective=\"subPerspective\" object-meta-data=\"objMetaData\" config=\"tableConfig\"></dbui-vertical-table>\n</div>"
},
{
	"__ver": "sys:19",
	"_class": "FieldTypeUiSpec",
	"_id": "9uHrzJ-IQPqu-IK3bywR3A",
	"controller_fn": "function ($scope) {\n\n    $scope.itemTypeDesc = $scope.typeDesc[0];\n\n    $scope.editing = -1;\n\n    $scope.addItem = function() {\n      if(!$scope.binding.value) {\n        $scope.binding.value = [];\n      }\n      \n      var objArray = $scope.binding.value;\n\n      objArray.push(null);\n      $scope.editing = objArray.length-1;\n    };\n\n    $scope.editItem = function(index) {\n      $scope.editing = index;\n    };\n\n    $scope.removeItem = function(index) {\n      $scope.binding.value.splice(index, 1);\n    };\n\n    $scope.doneEditing = function() {\n      $scope.editing = -1;\n    };\n\n  }",
	"fieldtypes": [
	],
	"for_editing": false,
	"for_editing_array": true,
	"for_viewing": false,
	"for_viewing_array": false,
	"key": "dbui.core.Array.*.edit",
	"link_fn": null,
	"template": "<div class=\"dbui-edit-field-Array dbui-edit-container\" >\n  <div ng-repeat=\"item in binding.value track by $index\" class=\"row array-editor-row\">\n    <div class=\"input-group\" style=\"width:auto\">\n      <span class=\"btn btn-default input-group-addon\" ng-hide=\"$index == editing\" ng-click=\"removeItem($index)\"><i class=\"fa fa-lg fa-remove \"></i></span>\n      <span class=\"btn btn-default input-group-addon\" ng-hide=\"$index != editing\" ng-click=\"doneEditing()\"><i class=\"fa fa-lg fa-check \"></i></span>\n      <span class=\"btn btn-default input-group-addon\" ng-hide=\"$index == editing\" ng-click=\"editItem($index)\"><i class=\"fa fa-lg fa-pencil \"></i></span>\n   \n      <dbui-field-editor ng-hide=\"$index != editing\" type-desc=\"itemTypeDesc\" ng-model=\"binding.value[$index]\" class=\"dbui-edit-container\"></dbui-field-editor>\n      <dbui-field-viewer ng-hide=\"$index == editing\" type-desc=\"itemTypeDesc\" display-value=\"binding.value[$index]\"  class=\"form-control dbui-view-array-elem\" ></dbui-field-viewer>\n    </div>\n  </div>\n  <div class=\"row array-editor-row\">\n   <div class=\"col-md-12\" style=\"text-align:center\"><span class=\"btn btn-default\" ng-click=\"addItem()\">&nbsp;&nbsp;&nbsp;<i class=\"fa fa-lg fa-plus \"></i>&nbsp;&nbsp;&nbsp;</span></div>\n </div>\n</div>"
},
{
	"__ver": "sys:5",
	"_class": "FieldTypeUiSpec",
	"_id": "BvydEKALTzK9ALeB_zibrg",
	"doc": "Renders a simple text box for editing path.\n\n@todo should support auto-suggestion of path nodes using existing values in DB",
	"fieldtypes": [
		{
			"_disp": "path",
			"_id": "9_TB_-ppQnCpm3EKkO8naw",
			"name": "path"
		}
	],
	"for_editing": true,
	"for_editing_array": false,
	"for_viewing": false,
	"for_viewing_array": false,
	"key": "dbui.core.path.edit",
	"template": "<div class=\"dbui-edit-field-path\">\n\t<input type=\"text\" class=\"form-control\" id=\"{{elemId}}\" ng-model=\"binding.value\"/>\n</div>"
},
{
	"__ver": "sys:18",
	"_class": "FieldTypeUiSpec",
	"_id": "DG2H5d3ARH23lwhvepe0QQ",
	"controller_fn": "function ($scope, NoonI18n) {\n    \n    var fc = $scope.fieldCustomizations;\n\n    $scope.enumValues = [];\n\n    NoonI18n.getEnumerationValues($scope.typeDesc.enum).$promise.then(function(enumValues){\n\n      if(fc && fc.restrict && fc.restrict.length > 0) {\n        var keepVals = {};\n\n        for(var i=0; i < fc.restrict.length; i++) {\n          keepVals[fc.restrict[i]] = true;\n        }\n\n        for(var i=0; i < enumValues.length; i++) {\n          var curr = enumValues[i];\n          if(keepVals[curr.value] || ($scope.binding && curr.value === $scope.binding.value)) {\n            $scope.enumValues.push(curr);\n          }\n        }\n      }\n      else {\n        $scope.enumValues = enumValues;\n      }\n    });\n\n}",
	"doc": "Displays a simple dropdown of the enumerated values to select from.  Labels for the values are internationalized using the \"db.enum.<EnumName>' LabelGroup, if present.  If the 'restrict' parameter is present, the selectable values are limited to the specified list.  \n\n@param {string[]} [restrict] - a list of values to display in the dropdown (a subset of the Enumeration's values)",
	"fieldtypes": [
		{
			"_disp": "enum",
			"_id": "z_2NESmpQ-29ACeUMhflNQ",
			"name": "enum"
		}
	],
	"for_editing": true,
	"for_editing_array": false,
	"for_viewing": false,
	"for_viewing_array": false,
	"key": "dbui.core.enum.edit",
	"template": "<div class=\"dbui-edit-field-string\">\n   <select ng-if=\"typeDesc.enum && enumValues\" class=\"form-control\" id=\"{{elemId}}\" ng-model=\"binding.value\"\n    ng-options=\"val.value as val.label for val in enumValues\"></select>\n</div>"
},
{
	"__ver": "sys:6",
	"_class": "FieldTypeUiSpec",
	"_id": "EI-Y7M75RauzkC2TI-IuQw",
	"controller_fn": "function ($scope) {\n    $scope.clear = function() {\n      $scope.binding.value = null;\n    }\n}",
	"doc": "Utilizes a \"file\" input to allow selecting image files from client-side filesystem, in conjunction with custom {@link ImageData} directive to convert selected images to the expected data URLs.",
	"fieldtypes": [
		{
			"_disp": "image",
			"_id": "lpmwbanlQH20mCWioX0H1g",
			"name": "image"
		}
	],
	"for_editing": true,
	"for_editing_array": false,
	"for_viewing": false,
	"for_viewing_array": false,
	"key": "dbui.core.image.edit",
	"template": "<div class=\"dbui-edit-field-image\">\n  <input id=\"{{elemId}}\" type=\"file\" accept=\"image/*\"\n    image-data=\"binding.value\" />\n  <img ng-show=\"binding.value\" ng-src=\"{{binding.value.thumbData}}\"/>\n  <button ng-show=\"binding.value\" ng-click=\"clear()\">clear</button>\n</div>"
},
{
	"__ver": "sys:2",
	"_class": "FieldTypeUiSpec",
	"_id": "EUIsdoYuRRy1Wz6mtiH8Wg",
	"doc": "Simply renders an image's thumbData in an <img> tag.",
	"fieldtypes": [
		{
			"_disp": "image",
			"_id": "lpmwbanlQH20mCWioX0H1g",
			"name": "image"
		}
	],
	"for_editing": false,
	"for_editing_array": false,
	"for_viewing": true,
	"for_viewing_array": false,
	"key": "dbui.core.image.view",
	"template": "<div class=\"dbui-view-field-image\">\n  <img ng-src=\"{{displayValue.thumbData}}\"/>\n</div>"
},
{
	"__ver": "sys:7",
	"_class": "FieldTypeUiSpec",
	"_id": "ElEWFvl1T-u5DaRVdBhxCA",
	"controller_fn": "function ($scope) {\n    var fc = $scope.fieldCustomizations;\n    \n    if(fc && fc.dropdown) {\n      var td = $scope.typeDesc;\n      var min = td.min || 0;\n      var max = td.max;\n      $scope.valueRange = _.range(min, max+1);\n    }\n}",
	"doc": "Renders a \"number\" input box, or alternatively a select element if \"dropdown\" parameter is set.\n\n@param {boolean} dropdown - utilize a dropdown box instead of a text box.  if true, dropdown allows integers between type descriptor's min and max values.",
	"fieldtypes": [
		{
			"_disp": "integer",
			"_id": "gxJBuQp7RkKLIV0cazfFnA",
			"name": "integer"
		},
		{
			"_disp": "float",
			"_id": "EaQUGA7oS7qKanG4QbvYbQ",
			"name": "float"
		}
	],
	"for_editing": true,
	"for_editing_array": false,
	"for_viewing": false,
	"for_viewing_array": false,
	"key": "dbui.core.numeric.edit",
	"template": "<div class=\"dbui-edit-field-integer\">\n<input ng-if=\"!fieldCustomizations.dropdown\" type=\"number\" class=\"form-control\" placeholder=\"(empty)\" id=\"{{elemId}}\" ng-model=\"binding.value\">\n  <select ng-if=\"fieldCustomizations.dropdown\" class=\"form-control\" id=\"{{elemId}}\" ng-model=\"binding.value\" ng-options=\"n for n in valueRange\"></select>\n</div>\n"
},
{
	"__ver": "sys:2",
	"_class": "FieldTypeUiSpec",
	"_id": "FKpvB_JNSoOF2tVEuXEkIQ",
	"doc": "Simply render component values to a couple of divs.",
	"fieldtypes": [
		{
			"_disp": "physical_address",
			"_id": "2RQWYKymQMmfYqEGxXVtoA",
			"name": "physical_address"
		}
	],
	"for_editing": false,
	"for_editing_array": false,
	"for_viewing": true,
	"for_viewing_array": false,
	"key": "dbui.core.physical_address.view",
	"template": "<div>\n  <div>{{displayValue.address}}</div>\n  <div>{{displayValue.city}}, {{displayValue.state}}  {{displayValue.zip}}</div>\n</div>"
},
{
	"__ver": "sys:10",
	"_class": "FieldTypeUiSpec",
	"_id": "HYHluWpfQxqDTEhWxSIWkA",
	"controller_fn": "function ($scope, $stateParams, Dbui) {\n\n    //Little editable datatable\n    \n    var fc = $scope.fieldCustomizations || {};\n    var td = $scope.typeDesc[0];\n    \n    var stub = td.construct({});\n    \n    $scope.objMetaData = stub._bo_meta_data;\n    \n    \n    //Action object to remove an item from the array:\n    var removeAction = {\n      icon:'fa-remove',\n      fn:function(args) {\n        if(args) {\n          $scope.binding.value.splice(args.index, 1);\n        }\n        return true;\n      }\n    };\n    \n    //Config object for \n    $scope.tableConfig = fc.table_config || {\n      cellEdit:true,    //allow 'global' edit (all fields editable) TODO configure from fieldCustomizations\n      recordActions:[     //actions to be appended to any perspective actions.\n          removeAction\n      ]\n    };\n    \n    //Use 'list' perspective for editing an array of composites:\n    if(fc.list_perspective) {\n        var p = angular.copy(fc.list_perspective);\n        p.layout = Dbui.normalizeLayout(p.layout);\n        $scope.subPerspective = p;\n    }\n    else {\n        Dbui.getPerspective($stateParams.perspective, stub._bo_meta_data.class_name, 'list').then(function(subPerspective) {\n            $scope.subPerspective = subPerspective;\n        });\n    }\n    \n    \n    //Ensure empty array binding when binding.value is null:\n    var unwatchFn = $scope.$watch('binding.value', function(newBinding) {\n        if(!newBinding) {\n            $scope.binding.value = [];\n        }\n        unwatchFn();\n    });\n    \n    \n    \n    $scope.addItem = function() {\n      var newObj = td.construct({});\n      $scope.binding.value.push(newObj);\n    }\n\n}",
	"fieldtypes": [
		{
			"_disp": "composite",
			"_id": "ePi7MsceQMqn3qnVBlHkNA",
			"name": "composite"
		}
	],
	"for_editing": false,
	"for_editing_array": true,
	"for_viewing": false,
	"for_viewing_array": false,
	"key": "dbui.core.Array.composite.edit",
	"template": "<div ng-if=\"binding.value && subPerspective\">\n    <dbui-object-table ng-if=\"subPerspective.orientation !== 'vertical'\" ng-model=\"binding.value\" perspective=\"subPerspective\" object-meta-data=\"objMetaData\" config=\"tableConfig\"></dbui-object-table>\n    <dbui-vertical-table ng-if=\"subPerspective.orientation === 'vertical'\" ng-model=\"binding.value\" perspective=\"subPerspective\" object-meta-data=\"objMetaData\" config=\"tableConfig\"></dbui-vertical-table>\n    <div class=\"row\">\n        <div class=\"col-md-12\" style=\"text-align:center\"><span class=\"btn btn-default\" ng-click=\"addItem()\">&nbsp;&nbsp;&nbsp;<i class=\"fa fa-lg fa-plus \" ></i>&nbsp;&nbsp;&nbsp;</span></div>\n    </div>\n</div>"
},
{
	"__ver": "sys:36",
	"_class": "FieldTypeUiSpec",
	"_id": "JUG__Q2uSEaMeHlf4NXebQ",
	"controller_fn": "function ($scope) {\n    var fc = $scope.fieldCustomizations;\n    $scope.displayFormat = (fc && fc.format) ? fc.format : 'MMMM dd, yyyy';\n\n\n}",
	"doc": "Utilizes dateStringEditor custom directive, which provides a text box with a date-picker button ({@link https://angular-ui.github.io/bootstrap/#/datepicker|ui-bootstrap})\n\n@param {string} [format] - format string for date {@link https://docs.angularjs.org/api/ng/filter/date} \n  if not present, defaults to \"MMMM dd, yyyy\"",
	"fieldtypes": [
		{
			"_disp": "date",
			"_id": "nplFum9LRdWvt5TW1LyulQ",
			"name": "date"
		}
	],
	"for_editing": true,
	"for_editing_array": false,
	"for_viewing": false,
	"for_viewing_array": false,
	"key": "dbui.core.date.edit",
	"link_fn": null,
	"template": "<div class=\"dbui-edit-field-date\">\n    <date-string-editor ng-model=\"binding.value\" display-format=\"{{displayFormat}}\" elem-id=\"{{elemId}}\"></date-string-editor>\n</div>"
},
{
	"__ver": "sys:2",
	"_class": "FieldTypeUiSpec",
	"_id": "L3YQRK0mSJGE1EK4_FDCCg",
	"controller_fn": "function ($scope) {\n\n    $scope.clear = function() {\n      $scope.binding.value = null;\n      $scope.clearFile();\n    }\n\n\n  }",
	"fieldtypes": [
		{
			"_disp": "attachment",
			"_id": "vxlB7gSPTWqq98tG5lCcPQ",
			"name": "attachment"
		}
	],
	"for_editing": true,
	"for_editing_array": false,
	"for_viewing": false,
	"for_viewing_array": false,
	"key": "dbui.core.attachment.edit",
	"template": "<div class=\"dbui-edit-field-attachment form-inline\">\n    <input type=\"file\" id=\"{{elemId}}\" class=\"ng-hide\" attachment-uploader=\"binding.value\" />\n    <button class=\"form-control\" ng-show=\"!binding.value\" ng-click=\"initiateUpload()\">Upload File</button>\n    <span ng-show=\"uploading\"><i class=\"fa fa-2x fa-spinner fa-pulse\"></i> uploading...</span>\n    <div ng-show=\"binding.value\">\n        <span>{{binding.value.filename}}</span>\n        <button class=\"form-control\" ng-show=\"binding.value\" ng-click=\"clear()\">x</button>\n    </div>\n</div>"
},
{
	"__ver": "sys:2",
	"_class": "FieldTypeUiSpec",
	"_id": "LT7gGfGtSX6ruO8MqG-C0w",
	"controller_fn": "function ($scope) {\n    //TODO get from geography pkg\n    $scope.states = [\n      \"AL\",\"AK\",\"AZ\",\"AR\",\"CA\",\"CO\",\"CT\",\"DE\",\"FL\",\"GA\",\n      \"HI\",\"ID\",\"IL\",\"IN\",\"IA\",\"KS\",\"KY\",\"LA\",\"ME\",\"MD\",\n      \"MA\",\"MI\",\"MN\",\"MS\",\"MO\",\"MT\",\"NE\",\"NV\",\"NH\",\"NJ\",\n      \"NM\",\"NY\",\"NC\",\"ND\",\"OH\",\"OK\",\"OR\",\"PA\",\"RI\",\"SC\",\n      \"SD\",\"TN\",\"TX\",\"UT\",\"VT\",\"VA\",\"WA\",\"WV\",\"WI\",\"WY\"\n    ];\n  }",
	"doc": "Renders a basic form: text elements for address, city, and zip; a dropdown for states (hard-coded list of states for now).\n\n@todo integrate more robust geographical data (e.g. zipcode and state database)",
	"fieldtypes": [
		{
			"_disp": "physical_address",
			"_id": "2RQWYKymQMmfYqEGxXVtoA",
			"name": "physical_address"
		}
	],
	"for_editing": true,
	"for_editing_array": false,
	"for_viewing": false,
	"for_viewing_array": false,
	"key": "dbui.core.physical_address.edit",
	"template": "<div class=\"physical_address_editor\" id=\"{{elemId}}\">\n\t<div><label for=\"{{elemId}}.address\">Street</label><input type=\"text\" id=\"{{elemId}}.address\" ng-model=\"binding.value.address\">\n\t</div>\n\t<div><label for=\"{{elemId}}.city\">City</label><input type=\"text\" id=\"{{elemId}}.city\" ng-model=\"binding.value.city\">\n    <label for=\"{{elemId}}.state\">State</label><select id=\"{{elemId}}.state\" ng-model=\"binding.value.state\"\n        ng-options=\"val for val in states\"></select></div>\n    <div><label for=\"{{elemId}}.zip\">Zip</label><input type=\"text\" id=\"{{elemId}}.zip\" ng-model=\"binding.value.zip\"></div>\n</div>"
},
{
	"__ver": "sys:8",
	"_class": "FieldTypeUiSpec",
	"_id": "NpOPK9reRguXCb0M8WqvIA",
	"controller_fn": "function ($scope) {\n\n    var fc = $scope.fieldCustomizations;\n    $scope.format = (fc && fc.format) ? fc.format : 'h:mm a';\n\n    $scope.$watch('displayValue', function() {\n        var parsed = /(\\d{2}):(\\d{2}):(\\d{2}).(\\d{3})/.exec($scope.displayValue);\n        if(parsed && parsed.length >= 3) {\n            var h = +parsed[1];\n            var m = +parsed[2];\n            \n            //seconds/millis optional\n            var s = parsed.length >= 4 ? +parsed[3] : 0;\n            var ms = parsed.length >= 5 ? +parsed[4] : 0;\n            \n            \n            $scope.displayDate = new Date(1900, 0, 1, h, m, s, ms);\n        }\n        else {\n            $scope.displayDate = $scope.displayValue;\n        }    \n    });\n            \n  }",
	"doc": "Displays time string by running it through angular's $filter('date')  {@link https://docs.angularjs.org/api/ng/filter/date} \n\n@param {string} [format] - format string for date.  If not present, defaults to \"'h:mm a\"",
	"fieldtypes": [
		{
			"_disp": "time",
			"_id": "uavtEE5AT2q5WcEcsWYTpw",
			"name": "time"
		}
	],
	"for_editing": false,
	"for_editing_array": false,
	"for_viewing": true,
	"for_viewing_array": false,
	"key": "dbui.core.time.view",
	"template": "<div>\n  <span>{{displayDate | date:format}}</span>\n</div>"
},
{
	"__ver": "sys:1",
	"_class": "FieldTypeUiSpec",
	"_id": "QYBXXHdmQzuWMhjDeBgVLA",
	"controller_fn": "function (NoonI18n) {\n    NoonI18n.getEnumerationValues('TimeDuration')\n      .$promise.then(function(result) {\n        var labelMap = {};\n        for(var i=0; i < result.length; i++) {\n          labelMap[result[i].value] = result[i].label;\n        }\n        $scope.enumLabels = labelMap;\n    });\n}",
	"fieldtypes": [
		{
			"_disp": "duration",
			"_id": "jOZVJVLOTmGK6Ppf7JNnCw",
			"name": "duration"
		}
	],
	"for_editing": false,
	"for_editing_array": false,
	"for_viewing": true,
	"for_viewing_array": false,
	"key": "dbui.core.duration.view",
	"template": "<div>\n  <span>{{displayValue.number}} {{enumLabels[displayValue.unit]}}</span>\n</div>"
},
{
	"__ver": "sys:15",
	"_class": "FieldTypeUiSpec",
	"_id": "QyMv30pcQse-jnzkfWucLg",
	"doc": "Renders a text box for editing string, or a dropdown if type descriptor has an \"enum\" value, allowing selection from the allowed values.",
	"fieldtypes": [
		{
			"_disp": "string",
			"_id": "ZD_vX9d-RLqxGTOdZntz6Q",
			"name": "string"
		}
	],
	"for_editing": true,
	"for_editing_array": false,
	"for_viewing": false,
	"for_viewing_array": false,
	"key": "dbui.core.string.edit",
	"template": "<div class=\"dbui-edit-field-string\">\n    <input type=\"text\" ng-if=\"!typeDesc.enum\" class=\"form-control\" id=\"{{elemId}}\" ng-model=\"binding.value\">\n    <select ng-if=\"typeDesc.enum\" class=\"form-control\" id=\"{{elemId}}\" ng-model=\"binding.value\" ng-options=\"val for val in typeDesc.enum\"></select>\n</div>"
},
{
	"__ver": "sys:4",
	"_class": "FieldTypeUiSpec",
	"_id": "SkSJmUFsQ2O7xgNpyQf5Vg",
	"controller_fn": "function ($scope, Dbui) {\n    \n    Dbui.getRoleMap().then(function(roleMap) {\n        $scope.roleNames = [];\n        _.forEach($scope.displayValue, function(roleId) {\n           $scope.roleNames.push(roleMap[roleId]);\n           $scope.roleNames.sort();\n        });\n    });\n    \n}",
	"doc": "Lists the names of the roles in the rolespec, or \"(no restriction)\" if list is empty.",
	"fieldtypes": [
		{
			"_disp": "rolespec",
			"_id": "aeOhqBixSbigoy3yBkyScQ",
			"name": "rolespec"
		}
	],
	"for_editing": false,
	"for_editing_array": false,
	"for_viewing": true,
	"for_viewing_array": false,
	"key": "dbui.core.rolespec.view",
	"template": "<div>\n  <span ng-if=\"!displayValue || !displayValue.length\"><i>(no restriction)</i></span>\n  <span ng-repeat=\"role in roleNames\">\n    <strong>{{role}}</strong><span ng-if=\"!$last\">, </span>\n  </span>\n</div>"
},
{
	"__ver": "sys:7",
	"_class": "FieldTypeUiSpec",
	"_id": "T7NihP3ySOSCy3Z-DKrweA",
	"controller_fn": "function ($scope) {\n    var fc = $scope.fieldCustomizations || {};\n    var td = $scope.typeDesc;\n\n    if(td.subtype === 'trinary') {\n      var displayValue = fc.displayValue || {};\n      if(!displayValue['false']) {\n        displayValue['false'] = {text:'false'};\n      }\n      if(!displayValue['true']) {\n        displayValue['true'] = {text:'true'};\n      }\n      if(!displayValue['null']) {\n        displayValue['null'] = {text:'null'};\n      }\n\n      $scope.booleanValues = [\n        {value:true, label:displayValue['true'].text},\n        {value:false, label:displayValue['false'].text},\n        {value:null, label:displayValue['null'].text}\n      ];\n    }\n\n    $scope.$watch('binding.value', function(newValue) {\n      if($scope.binding && newValue === undefined)\n        $scope.binding.value = (td.subtype === 'trinary') ? null : false;\n    });\n\n\n}",
	"doc": "Displays a checkbox (for a standard true/false boolean) or a dropdown (for a \"trinary\" or nullable boolean).\n\n@param {Object} [displayValue] - maps values ('true', 'false', 'null') to Objects specifying 'text' and css 'class' to be used for display",
	"fieldtypes": [
		{
			"_disp": "boolean",
			"_id": "WiUvP7txRQiF6tPM9FpFIw",
			"name": "boolean"
		}
	],
	"for_editing": true,
	"for_editing_array": false,
	"for_viewing": false,
	"for_viewing_array": false,
	"key": "dbui.core.boolean.edit",
	"template": "<div class=\"dbui-edit-field-boolean col-sm-2 col-md-2 col-lg-2\">\n\t<input ng-if=\"!typeDesc.subtype\" type=\"checkbox\" class=\"form-control\" id=\"{{elemId}}\" ng-model=\"binding.value\">\n\t<select ng-if=\"typeDesc.subtype == 'trinary' \" class=\"form-control\" id=\"{{elemId}}\" ng-model=\"binding.value\"\n\t    ng-options=\"val.value as val.label for val in booleanValues\">\n\t</select>\n</div>"
},
{
	"__ver": "sys:10",
	"_class": "FieldTypeUiSpec",
	"_id": "WGbVcsKwRWe3KL1p8OqS9A",
	"controller_fn": "function ($scope, NoonI18n) {\n    $scope.itemTypeDesc = $scope.typeDesc[0];\n    \n    var fc = $scope.fieldCustomizations;\n\n    $scope.enumValues = [];\n\n    NoonI18n.getEnumerationValues($scope.itemTypeDesc.enum).$promise.then(function(enumValues){\n        \n      if(fc && fc.restrict && fc.restrict.length > 0) {\n        var keepVals = {};\n\n        for(var i=0; i < fc.restrict.length; i++) {\n          keepVals[fc.restrict[i]] = true;\n        }\n\n        for(var i=0; i < enumValues.length; i++) {\n          var curr = enumValues[i];\n          if(keepVals[curr.value] || curr.value === $scope.binding.value) {\n            $scope.enumValues.push(curr);\n          }\n        }\n      }\n      else {\n        $scope.enumValues = enumValues;\n      }\n    });\n\n\n\n    $scope.selectedValues = {};\n\n    var initialized = false;\n\n\n    $scope.$watchCollection('selectedValues', function(newVal) {\n      if(!initialized) return;\n\n      var valArray = [];\n\n      for(var v in $scope.selectedValues) {\n        if($scope.selectedValues[v])\n          valArray.push(v);\n      }\n      $scope.binding.value = valArray;\n    });\n\n    $scope.$watchCollection('binding.value', function(valArray) {\n      var selectedValues = {};\n      if(valArray) {\n        for(var i=0; i < valArray.length; i++) {\n          selectedValues[valArray[i]] = true;\n        }\n        $scope.selectedValues = selectedValues;\n      }\n      initialized = true;\n    });\n\n}",
	"doc": "Displays the Enumeration values as a group of checkboxes, allowing multiple to be selected.",
	"fieldtypes": [
		{
			"_disp": "enum",
			"_id": "z_2NESmpQ-29ACeUMhflNQ",
			"name": "enum"
		}
	],
	"for_editing": false,
	"for_editing_array": true,
	"for_viewing": false,
	"for_viewing_array": false,
	"key": "dbui.core.Array.enum.edit",
	"template": "<div class=\"dbui-edit-field-string\">\n  <div class=\"form-group\">\n    <div class=\"row\" ng-repeat=\"ev in enumValues\">\n      <div class=\"col-md-11 col-md-offset-1\">\n          <label class=\"checkbox\" >\n            <input type=\"checkbox\" name=\"{{bindProperty}}_{{ev.value}}\" ng-model=\"selectedValues[ev.value]\"> {{ev.label}}\n          </label>\n      </div>  \n    </div>\n  </div>\n</div>"
},
{
	"__ver": "sys:10",
	"_class": "FieldTypeUiSpec",
	"_id": "XBBQrHkGT_K4MPJTItuYcQ",
	"controller_fn": "function ($scope, $filter, $parse) {\n    var td = $scope.typeDesc;\n    var fc = $scope.fieldCustomizations;\n    var context = $scope.contextObject;\n\n    var modeMap = {\n      'function':'javascript',\n      'object':'json',\n      'sourcecode':(td.language ? td.language : 'javascript')\n    };\n    \n    var mode = modeMap[td.type];\n\n    var theme = 'dawn';\n    if(fc && fc.displayTheme) {\n        \n        if(typeof fc.displayTheme === 'string'){\n            theme = fc.displayTheme;\n        }\n        else {\n            var appliesKey = td.applicable || 'default';\n            if(fc.displayTheme[appliesKey]) {\n                theme = fc.displayTheme[appliesKey];\n            }\n        }\n        \n    }\n    \n    if(fc && fc.aceConfig && fc.aceConfig.mode) {\n        var getMode = $parse(fc.aceConfig.mode);\n        mode = getMode(context) || mode;\n    }\n\n\n    var aceLoaded = function(editor) {\n        \n      $scope.aceEditor = editor;\n      editor.$blockScrolling = Infinity;\n      \n      var valueObj = $scope.displayValue;\n      if(td.type === 'object') {\n        valueObj = (valueObj != null) ? $filter('json')(valueObj) : '';\n      }\n      \n      editor.setValue(valueObj, -1);\n    };\n\n    $scope.aceInit = {\n      theme:theme,\n      mode:mode,\n      useWrapMode : true,\n      showGutter: true,\n      onLoad: aceLoaded\n    };\n\n}",
	"doc": "Displays an {@link https://ace.c9.io|Ace editor} in read-only mode for various source-code data types.  Utilizes the {@link https://github.com/angular-ui/ui-ace|ui-ace} angular directive wrapper.  Optionally can simply render without ace editor if \"abbreviated\" parameter is present.\n\n@param {Object|string} [displayTheme] - name of theme to use for editor (if string), or an object mapping the type descriptors \"applicable\" value ('clientside','serverside' or 'default') to theme name.\n@param {boolean} [abbreviated] - if true, simply renders as text without using Ace editor and fancy formatting.",
	"fieldtypes": [
		{
			"_disp": "sourcecode",
			"_id": "vOaH1F-HRhefePjYFAGCBA",
			"name": "sourcecode"
		},
		{
			"_disp": "function",
			"_id": "e-rYyVWHQoKi1om5SUBMcA",
			"name": "function"
		},
		{
			"_disp": "object",
			"_id": "uMEzxXwVSgmj_dbfeY-fLA",
			"name": "object"
		}
	],
	"for_editing": false,
	"for_editing_array": false,
	"for_viewing": true,
	"for_viewing_array": false,
	"key": "dbui.core.ace_viewer",
	"template": "<div class=\"dbui-view-field-object\">\n  <div ng-if=\"!abbreviated\" ui-ace=\"aceInit\" readonly></div>\n  <div ng-if=\"abbreviated\">{{displayValue}}</div>\n</div>"
},
{
	"__ver": "sys:5",
	"_class": "FieldTypeUiSpec",
	"_id": "Y3uU16OvRQGDqyKMxt8RNA",
	"controller_fn": "function ($scope) {\n    var fc = $scope.fieldCustomizations;\n    $scope.displayFormat = (fc && fc.format) ? fc.format : 'h:mm a';\n}",
	"doc": "Utilizes a timeStringEditor custom directive for editing with a textbox and a \"time-picker\" dropdown.\n\n@param {string} [format] - format string for time; if not present, defaults to \"h:mm a\"",
	"fieldtypes": [
		{
			"_disp": "time",
			"_id": "uavtEE5AT2q5WcEcsWYTpw",
			"name": "time"
		}
	],
	"for_editing": true,
	"for_editing_array": false,
	"for_viewing": false,
	"for_viewing_array": false,
	"key": "dbui.core.time.edit",
	"template": "<div class=\"dbui-edit-field-date\">\n    <time-string-editor ng-model=\"binding.value\" display-format=\"{{displayFormat}}\" elem-id=\"{{elemId}}\"></date-string-editor>\n</div>"
},
{
	"__ver": "sys:4",
	"_class": "FieldTypeUiSpec",
	"_id": "Z758y2u8Tb6kTGT17ngymQ",
	"fieldtypes": [
		{
			"_disp": "email",
			"_id": "S8eHnlXxQJqIPLM2q8HniQ",
			"name": "email"
		}
	],
	"for_editing": true,
	"for_editing_array": false,
	"for_viewing": false,
	"for_viewing_array": false,
	"key": "dbui.core.email.edit",
	"template": "<div class=\"dbui-edit-field-email\">\n  <input type=\"email\" class=\"form-control\" id=\"{{elemId}}\" ng-model=\"binding.value\"></input>\n</div>\n"
},
{
	"__ver": "sys:4",
	"_class": "FieldTypeUiSpec",
	"_id": "Za2of_r5Qk2Uo5jkZOvgMg",
	"controller_fn": "function ($scope, NoonI18n) {\n    $scope.itemTypeDesc = $scope.typeDesc[0];\n\n    NoonI18n.getEnumerationValues($scope.itemTypeDesc.enum)\n      .$promise.then(function(result) {\n        var labelMap = {};\n        for(var i=0; i < result.length; i++) {\n          labelMap[result[i].value] = result[i].label;\n        }\n        $scope.enumLabels = labelMap;\n    });\n\n}",
	"doc": "Simple comma-separated list display of values.  Labels are internationalized using the \"db.enum.<EnumName>\" LabelGroup, if present.",
	"fieldtypes": [
		{
			"_disp": "enum",
			"_id": "z_2NESmpQ-29ACeUMhflNQ",
			"name": "enum"
		}
	],
	"for_editing": false,
	"for_editing_array": false,
	"for_viewing": false,
	"for_viewing_array": true,
	"key": "dbui.core.Array.enum.view",
	"template": "<div class=\"dbui-view-container\">\n  <span ng-repeat=\"item in displayValue\">\n    <strong>{{enumLabels[item]}}</strong><span ng-if=\"!$last\">, </span>\n  </span>\n</div>"
},
{
	"__ver": "sys:9",
	"_class": "FieldTypeUiSpec",
	"_id": "_nWPVWaMRlezcACfs6ZLHw",
	"controller_fn": "function ($scope, NoonI18n) {\n    // var fc = $scope.fieldCustomizations;\n\n    $scope.labelFor = {};\n\n    NoonI18n.getEnumerationValues($scope.typeDesc.enum).$promise.then(function(enumValues){\n        \n      for(var i=0; i < enumValues.length; i++) {\n        $scope.labelFor[enumValues[i].value] = enumValues[i].label;\n      }\n      \n    });\n\n}",
	"doc": "Simple display of the value -  internationalized using the \"db.enum.<EnumName>\" LabelGroup, if present.",
	"fieldtypes": [
		{
			"_disp": "enum",
			"_id": "z_2NESmpQ-29ACeUMhflNQ",
			"name": "enum"
		}
	],
	"for_editing": false,
	"for_editing_array": false,
	"for_viewing": true,
	"for_viewing_array": false,
	"key": "dbui.core.enum.view",
	"template": "<div>\n  <span>{{labelFor[displayValue]}}</span>\n</div>"
},
{
	"__ver": "sys:4",
	"_class": "FieldTypeUiSpec",
	"_id": "chdRzdWGRbWw-4eOY2bnWA",
	"doc": "Renders an html element of type \"url\", providing a textbox for typing in a url.",
	"fieldtypes": [
		{
			"_disp": "url",
			"_id": "JMHHYAPlSgKuC5alDvehWA",
			"name": "url"
		}
	],
	"for_editing": true,
	"for_editing_array": false,
	"for_viewing": false,
	"for_viewing_array": false,
	"key": "dbui.core.url.edit",
	"template": "<div class=\"dbui-edit-field-url\">\n  <input type=\"url\" class=\"form-control\" id=\"{{elemId}}\" ng-model=\"binding.value\"/>\n</div>\n"
},
{
	"__ver": "sys:3",
	"_class": "FieldTypeUiSpec",
	"_id": "e9vFlgCpSPaPzAGGPNA9Ug",
	"controller_fn": "function ($scope) {\n    $scope.$watch('displayValue', function() {\n        \n        var fc = $scope.fieldCustomizations;\n        var dv = $scope.displayValue;\n        \n        if($scope.abbreviated) {\n            var maxShown = fc && fc.abbrevDisplayMax || 5;\n            if(dv && dv.length > maxShown) {\n                $scope.displayArr = [];\n                $scope.ellipsis = true;\n                \n                for(var i=0; i < maxShown; i++) {\n                    $scope.displayArr.push(dv[i]);\n                }\n                return;\n            }\n        }\n        \n        $scope.displayArr = dv;\n    });\n}",
	"fieldtypes": [
	],
	"for_editing": false,
	"for_editing_array": false,
	"for_viewing": false,
	"for_viewing_array": true,
	"key": "dbui.core.Array.*.view",
	"template": "<div class=\"dbui-view-field-Array dbui-view-container\">\n  <div ng-repeat=\"item in displayArr\" class=\"row\">\n    <dbui-field-viewer ng-if=\"item != null\" type-desc=\"typeDesc[0]\" field-customizations=\"fieldCustomizations\" abbreviated=\"abbreviated\" display-value=\"item\" class=\"col-xs-12\" ></dbui-field-viewer>\n    <div ng-if=\"item == null\" >(empty)</div>\n  </div>\n  <div ng-if=\"ellipsis\">...</div>\n</div>"
},
{
	"__ver": "sys:2",
	"_class": "FieldTypeUiSpec",
	"_id": "ey4E7-xHTFekIa4P4aeqtA",
	"controller_fn": "function ($scope) {\n    var origValue = false;\n    $scope.newPassword = '';\n\n    $scope.valueChanged = function() {\n      if(!origValue)\n        origValue = $scope.binding.value;\n\n      $scope.binding.value = $scope.newPassword || origValue;\n    }\n}",
	"doc": "Renders a text box for setting the password.  Contains logic so that when textbox is left blank, the field value is left unchanged.",
	"fieldtypes": [
		{
			"_disp": "password",
			"_id": "PkJTkOpsStGYcReZiDoEnQ",
			"name": "password"
		}
	],
	"for_editing": true,
	"for_editing_array": false,
	"for_viewing": false,
	"for_viewing_array": false,
	"key": "dbui.core.password.edit",
	"template": "<div class=\"dbui-edit-field-string\">\n  <input type=\"text\" class=\"form-control\" id=\"{{elemId}}\" placeholder=\"(unchanged)\" ng-model=\"newPassword\" ng-change=\"valueChanged()\"/>\n</div>"
},
{
	"__ver": "sys:3",
	"_class": "FieldTypeUiSpec",
	"_id": "ghqIrx4MT3qrnJwpZ5cHsA",
	"doc": "Simple input text box, augmented with a decoration that shows the color.  \n\n@todo utilize some fancy color picker component.",
	"fieldtypes": [
		{
			"_disp": "color",
			"_id": "L0RpjYeuS-uVqxj00KzEZg",
			"name": "color"
		}
	],
	"for_editing": true,
	"for_editing_array": false,
	"for_viewing": false,
	"for_viewing_array": false,
	"key": "dbui.core.color.edit",
	"template": "<div class=\"input-group\">\n    <span class=\"input-group-addon\" ng-style=\"{'background-color':binding.value}\"><i class=\"fa fa-lg fa-adjust\"></i></span>\n\t<input type=\"text\" class=\"form-control\" id=\"{{elemId}}\" placeholder=\"(empty)\"  ng-model=\"binding.value\">\n</div>"
},
{
	"__ver": "sys:6",
	"_class": "FieldTypeUiSpec",
	"_id": "giVO3IurRbqdZ3WnhgHPHA",
	"doc": "Renders a simple textarea for editing text content.",
	"fieldtypes": [
		{
			"_disp": "text",
			"_id": "Qywi2S8xT86_tQl4leIXNA",
			"name": "text"
		},
		{
			"_disp": "jsdoc",
			"_id": "EqIuGj81QTyVDFA7qRQNHg",
			"name": "jsdoc"
		}
	],
	"for_editing": true,
	"for_editing_array": false,
	"for_viewing": false,
	"for_viewing_array": false,
	"key": "dbui.core.text.edit",
	"template": "<div class=\"dbui-edit-field-text\">\n\t<textarea id=\"{{elemId}}\" class=\"form-control\" spellcheck=\"false\" ng-model=\"binding.value\"></textarea>\n</div>"
},
{
	"__ver": "sys:29",
	"_class": "FieldTypeUiSpec",
	"_id": "iLXjm75iRgGisekV6pczvg",
	"controller_fn": "function ($scope) {\n    $scope.dateOptions = {\n      formatYear: 'yyyy'\n    };\n    var fc = $scope.fieldCustomizations;\n    $scope.dateFormat = (fc && fc.dateFormat) ? fc.dateFormat : 'MMMM dd, yyyy';\n    $scope.timeFormat = (fc && fc.timeFormat) ? fc.timeFormat : 'h:mm a';\n\n}",
	"doc": "Utilizes a dateStringEditor custom directive for the month/day/year portion of the datetime, providing a text box with a date-picker button ({@link https://angular-ui.github.io/bootstrap/#/datepicker|ui-bootstrap})\n\nUtilizes a timeStringEditor custom directive for the hour/minute/second portion of the datetime, providing a textbox with a \"time-picker\" dropdown\n\n@param {string} [dateFormat] - format string for date portion {@link https://docs.angularjs.org/api/ng/filter/date} \n  if not present, defaults to \"MMMM dd, yyyy\"\n@param {string} [timeFormat] - format string for time portion\n  if not present, defaults to \"h:mm a\"",
	"fieldtypes": [
		{
			"_disp": "datetime",
			"_id": "SRrCNHZCTvW6sTMtR3a0iQ",
			"name": "datetime"
		}
	],
	"for_editing": true,
	"for_editing_array": false,
	"for_viewing": false,
	"for_viewing_array": false,
	"key": "dbui.core.datetime.edit",
	"link_fn": "function (scope, ngModel, $filter, uibDateParser) {\n    var formatter = $filter('date');\n    var dateFormat = 'yyyy-MM-dd';\n    var timeFormat = 'HH:mm:ss.sss';\n    var fullFormat = dateFormat + ' ' + timeFormat;\n    \n    var splitDate = function(d) {\n        return {dateStr: formatter(d, dateFormat), timeStr: formatter(d, timeFormat)};  //format in **local time zone**\n    }\n    \n    //1. Wire up converter for ng-model object (Date object or iso string)--> internal $viewValue representation (binding{dateStr,timeStr})\n    ngModel.$formatters.push(function(modelValue) {\n        if(modelValue) {\n            \n            if(typeof modelValue === 'string') {\n                modelValue = new Date(modelValue);\n            }\n            \n            if(modelValue instanceof Date && !isNaN(modelValue.getTime())) {\n                return splitDate(modelValue);\n            }\n        }\n        return {dateStr:null, timeStr:null};\n    });\n    \n    //2. Wire up converter for internal $viewValue representation (binding{dateStr,timeStr}) --> ng-model object (Date object)\n    ngModel.$parsers.push(function(viewValue) {\n        if(viewValue) {\n            try {\n                var defaultVals;\n                if(!viewValue.dateStr || !viewValue.timeStr) \n                    defaultVals = splitDate(new Date());\n                    \n                var dateStr = viewValue.dateStr || defaultVals.dateStr;\n                var timeStr = viewValue.timeStr || defaultVals.timeStr;\n                var fullStr = dateStr + ' ' + timeStr;\n                \n                return uibDateParser.parse(fullStr, fullFormat); //parsed to **local time zone**\n                \n            } catch(e) {console.error(e);}\n        }\n        \n        return null;\n    });\n    \n    //3. Wire up trigger for scope object --> $viewValue\n    scope.$watch('binding', function() {\n        //must *replace* the viewValue object in order for change to propogate to ng-model!\n        if(scope.binding) {\n            ngModel.$setViewValue({dateStr:scope.binding.dateStr, timeStr:scope.binding.timeStr});\n        }\n    }, \n    true); \n    \n    //4. Wire up callback for $viewValue update --> scope object\n    ngModel.$render = function() {\n        scope.binding = ngModel.$viewValue;\n    };\n    \n    return false;\n}",
	"template": "<div class=\"row\">\n  <div class=\"col-sm-6\">\n    <date-string-editor ng-model=\"binding.dateStr\" display-format=\"{{dateFormat}}\" elem-id=\"{{elemId}}.date\"></date-string-editor>\n  </div>\n  \n  <div class=\"col-sm-6\">\n      <time-string-editor ng-model=\"binding.timeStr\" display-format=\"{{timeFormat}}\" elem-id=\"{{elemId}}.time\"></time-string-editor>\n  </div>\n</div>"
},
{
	"__ver": "sys:5",
	"_class": "FieldTypeUiSpec",
	"_id": "k46CuIUYRU2t6MV-r3PrXQ",
	"controller_fn": "function ($scope) {\n\n    var fc = $scope.fieldCustomizations;\n    $scope.format = (fc && fc.format) ? fc.format : 'MMMM dd, yyyy  h:mm a';\n\n  }",
	"doc": "Displays date by simply running it through angular's *date* filter.  {@link https://docs.angularjs.org/api/ng/filter/date} \n\n@param {string} [format] - format string for date.  If not present, defaults to \"'MMMM dd, yyyy  h:mm a\"",
	"fieldtypes": [
		{
			"_disp": "datetime",
			"_id": "SRrCNHZCTvW6sTMtR3a0iQ",
			"name": "datetime"
		}
	],
	"for_editing": false,
	"for_editing_array": false,
	"for_viewing": true,
	"for_viewing_array": false,
	"key": "dbui.core.datetime.view",
	"template": "<div>\n  <span>{{displayValue | date:format}}</span>\n</div>"
},
{
	"__ver": "sys:1",
	"_class": "FieldTypeUiSpec",
	"_id": "lnxD7faIRSm03jtJItuU8w",
	"fieldtypes": [
		{
			"_disp": "attachment",
			"_id": "vxlB7gSPTWqq98tG5lCcPQ",
			"name": "attachment"
		}
	],
	"for_editing": false,
	"for_editing_array": false,
	"for_viewing": true,
	"for_viewing_array": false,
	"key": "dbui.core.attachment.view",
	"template": "<div>\n  <a target=\"_blank\" ng-href=\"attachment_ws/download/{{displayValue.attachment_id}}\"><i class=\"fa fa-download\"></i> {{ displayValue.filename }}</a>\n</div>"
},
{
	"__ver": "sys:2",
	"_class": "FieldTypeUiSpec",
	"_id": "mOJCSStLQ42WAXr3yJEMJA",
	"fieldtypes": [
		{
			"_disp": "phone",
			"_id": "DDssakmDQoeACryXT377xw",
			"name": "phone"
		}
	],
	"for_editing": true,
	"for_editing_array": false,
	"for_viewing": false,
	"for_viewing_array": false,
	"key": "dbui.core.phone.edit",
	"template": "<div class=\"dbui-edit-field-phone\">\n  <input type=\"text\" class=\"form-control\" id=\"{{elemId}}\" ng-model=\"binding.value\"/>\n</div>"
},
{
	"__ver": "sys:3",
	"_class": "FieldTypeUiSpec",
	"_id": "nGNxfDMsRACXhSG0G_509Q",
	"controller_fn": "function ($scope, $stateParams, Dbui) {\n    \n    var displayValue = $scope.displayValue;\n    \n    //If composite field being viewed has a _disp, that's what is displayed.\n    // otherwise a dbui-object-viewer directive is used.\n    if(displayValue && !displayValue._disp) {\n        //'composite' type descriptors have a 'construct' function which instantiates a proper BO-like 'sub-object'\n        var td = $scope.typeDesc;\n        var stub = td.construct({});\n        \n        Dbui.getPerspective($stateParams.perspective, stub._bo_meta_data.class_name, 'view').then(function(subPerspective) {\n            $scope.subPerspective = subPerspective;\n        });\n    }\n    \n}",
	"fieldtypes": [
		{
			"_disp": "composite",
			"_id": "ePi7MsceQMqn3qnVBlHkNA",
			"name": "composite"
		}
	],
	"for_editing": false,
	"for_editing_array": false,
	"for_viewing": true,
	"for_viewing_array": false,
	"key": "dbui.core.composite.view",
	"template": "<div>\n    <span ng-if=\"displayValue._disp\">{{ displayValue._disp }}</span>\n    <dbui-object-viewer ng-if=\"!displayValue._disp && subPerspective\" the-object=\"displayValue\" perspective=\"subPerspective\"></dbui-object-viewer>\n</div>"
},
{
	"__ver": "sys:3",
	"_class": "FieldTypeUiSpec",
	"_id": "nRL5-PUBSTCrnHeAH6ZiPw",
	"doc": "Renders a \"number\" input box for the numeric value, with a dollar sign icon to visually indicate that a dollar amount is to be typed in.",
	"fieldtypes": [
		{
			"_disp": "money",
			"_id": "cKFhGuY3SZ6_2YWKwkpqCA",
			"name": "money"
		}
	],
	"for_editing": true,
	"for_editing_array": false,
	"for_viewing": false,
	"for_viewing_array": false,
	"key": "dbui.core.money.edit",
	"template": "<div class=\"input-group\">\n  <span class=\"input-group-addon\"><i class=\"fa fa-lg fa-dollar\"></i></span>\n  <input type=\"number\" class=\"form-control\" id=\"{{elemId}}\" ng-model=\"binding.value\">\n</div>"
},
{
	"__ver": "sys:22",
	"_class": "FieldTypeUiSpec",
	"_id": "nzwhA-zvRsS0i_cousGbiQ",
	"controller_fn": "function ($scope, $parse) {\n    \n    var td = $scope.typeDesc;\n    var fc = $scope.fieldCustomizations;\n    var context = $scope.contextObject;\n    \n\n    var modeMap = {\n      'function':'javascript',\n      'sourcecode':(td.language ? td.language : 'javascript')\n    };\n\n    var mode = modeMap[td.type];\n    \n    var theme = 'dawn';\n    if(fc && fc.displayTheme) {\n        \n        if(typeof fc.displayTheme === 'string'){\n            theme = fc.displayTheme;\n        }\n        else {\n            var appliesKey = td.applicable || 'default';\n            if(fc.displayTheme[appliesKey]) {\n                theme = fc.displayTheme[appliesKey];\n            }\n        }\n        \n    }\n    \n    if(fc && fc.aceConfig) {\n        if(fc.aceConfig.mode) {\n            var getMode = $parse(fc.aceConfig.mode);\n            mode = getMode(context) || mode;\n            \n            $scope.$watch(\n                function(currentscope) {\n                    return getMode(context) || mode;\n                }, \n                \n                function(newVal, oldVal) {\n                    if(newVal) {\n                        $scope.aceInit.mode = newVal;\n                    }\n                }\n            );\n        }\n    }\n    \n\n    $scope.aceInit = {\n      theme:theme,\n      mode: mode,\n      useWrapMode : true,\n      showGutter: true,\n      require: ['ace/ext/language_tools'],\n      advanced: {\n          enableSnippets: false,\n          enableBasicAutocompletion: true,\n          enableLiveAutocompletion: true\n      }\n    };\n    \n    $scope.aceInit.onLoad = function(editor) {\n        $scope.aceEditor = editor;\n        editor.$blockScrolling = Infinity;\n        // var session = editor.getSession(); //http://ajaxorg.github.io/ace/#nav=api&api=edit_session\n    };\n    \n    \n\n}",
	"doc": "Displays an {@link https://ace.c9.io|Ace editor} for sourcecode and function data types.  Utilizes the {@link https://github.com/angular-ui/ui-ace|ui-ace} angular directive wrapper.\n\n@param {Object|string} [displayTheme] name of theme to use for editor (if string), or an object mapping the type descriptors \"applicable\" value ('clientside','serverside' or 'default') to theme name.",
	"fieldtypes": [
		{
			"_disp": "sourcecode",
			"_id": "vOaH1F-HRhefePjYFAGCBA",
			"name": "sourcecode"
		},
		{
			"_disp": "function",
			"_id": "e-rYyVWHQoKi1om5SUBMcA",
			"name": "function"
		}
	],
	"for_editing": true,
	"for_editing_array": false,
	"for_viewing": false,
	"for_viewing_array": false,
	"key": "dbui.core.ace_editor_simple",
	"link_fn": null,
	"template": "<div class=\"dbui-edit-field-object\">\n  <div ui-ace=\"aceInit\" ng-model=\"binding.value\"></div>\n</div>"
},
{
	"__ver": "sys:2",
	"_class": "FieldTypeUiSpec",
	"_id": "plX-2sUOSiW3dlXKZKLTQw",
	"doc": "Simply displays the color hex string, and sets it's own css background-color.",
	"fieldtypes": [
		{
			"_disp": "color",
			"_id": "L0RpjYeuS-uVqxj00KzEZg",
			"name": "color"
		}
	],
	"for_editing": false,
	"for_editing_array": false,
	"for_viewing": true,
	"for_viewing_array": false,
	"key": "dbui.core.color.view",
	"template": "<div ng-style=\"{'background-color':displayValue}\">\n    <span>{{displayValue}}</span>\n</div>"
},
{
	"__ver": "sys:14",
	"_class": "FieldTypeUiSpec",
	"_id": "rYbkzgFbRE6ba2QK6FbaNg",
	"controller_fn": "function ($scope, $stateParams, db, Dbui, DbuiObjectPicker, DbuiAction, NoonWebService) {\n    var td = $scope.typeDesc;\n    var refClass = td.ref_class;\n    var fc = $scope.fieldCustomizations;\n    \n    $scope.getRefs = function(val) {\n        \n      //Text search for val; limit to a handful, sort so that those with _disp values containing val are at the top.\n    //   return db[refClass].find({$fulltextsearch:val}, {}, {limit:10}).$promise;\n        var query = {class_name:refClass, search_term:val};\n        if(fc && fc.filter) {\n            query.filter = fc.filter;\n        }\n        return NoonWebService.call('dbui/getReferenceTypeahead', query);\n    };\n\n    $scope.onSelect = function($item) {\n        $scope.binding.value = {_id:$item._id, _disp:$item._disp};\n    };\n\n    $scope.lostFocus = function() {\n        var boundVal = $scope.binding.value;\n        if( !boundVal || $scope.refDisplayText !== boundVal._disp) {\n          $scope.binding.value = null;\n          $scope.refDisplayText = '';\n        }\n    }\n\n    $scope.showPicker = function() {\n        DbuiObjectPicker.showPickerDialog(refClass, $stateParams.perspective, true, $scope.onSelect);\n    }\n\n    $scope.$watch('binding.value', function(newValue) {\n        if(newValue)\n          $scope.refDisplayText = newValue._disp;\n        else\n          $scope.refDisplayText = '';\n    });\n\n    $scope.invokeAction = function(a) {\n        DbuiAction.invokeAction($stateParams.perspective, ($scope.binding && $scope.binding.value), a);\n    };\n    \n    $scope.viewRefObj = function() {\n      var displayValue = $scope.binding.value;\n      if(displayValue) {\n          var action = DbuiAction.unalias('dialog-view');\n          var args = {\n              className:  td.ref_class || displayValue.ref_class,\n              targetObj: displayValue\n          };\n          DbuiAction.invokeAction(null, null, action, args);\n      }\n    };\n}",
	"doc": "Renders a textbox alongside a \"picker\" button.  The textbox provides auto-complete as a value is typed in, and a reference can be selected from the dropdown that appears.  Alternatively, the \"picker\" button can be clicked, allowing the referenced value to be selected from a data table in a dialog box ({@link DbuiObjectPicker}).",
	"fieldtypes": [
		{
			"_disp": "reference",
			"_id": "bHeoPzsMScORdzjtX6GdoA",
			"name": "reference",
			"ref_class": null
		}
	],
	"for_editing": true,
	"for_editing_array": false,
	"for_viewing": false,
	"for_viewing_array": false,
	"key": "dbui.core.reference.edit",
	"template": "<div class=\"dbui-edit-field-reference\">\n\t<p class=\"input-group\">\n\t<span class=\"input-group-btn\">\n      <button type=\"button\" class=\"btn btn-default\" ng-click=\"showPicker()\"><i class=\"fa fa-ellipsis-h\"></i></button>\n       <button type=\"button\"  ng-show=\"fieldCustomizations.enableViewLink && binding.value\" class=\"btn btn-default\" ng-click=\"viewRefObj()\"><i class=\"fa fa-eye\"></i></button>\n    </span>\n\t<input type=\"text\" class=\"form-control\" autocomplete=\"off\" id=\"{{elemId}}\" ng-model=\"refDisplayText\"\n\t placeholder=\"(empty)\"\n   ng-blur=\"lostFocus()\"\n\t uib-typeahead=\"stub._disp for stub in getRefs($viewValue)\"\n   typeahead-on-select=\"onSelect($item, $model, $label)\">\n   <div ng-if=\"fieldCustomizations.fieldActions\">\n       <button type=\"button\" ng-repeat=\"action in fieldCustomizations.fieldActions\" class=\"btn btn-action\" ng-click=\"invokeAction(action)\"><i class=\"fa fa-lg\" ng-class=\"action.icon\" ></i> {{ action.label }}</button>\n   </div>\n   </p>\n</div>"
},
{
	"__ver": "sys:7",
	"_class": "FieldTypeUiSpec",
	"_id": "s8cKD6C4SYmGKhog3B4zhg",
	"doc": "Simplest field viewer template for \"string-like\" types.  Simply renders value into a span element.",
	"fieldtypes": [
		{
			"_disp": "string",
			"_id": "ZD_vX9d-RLqxGTOdZntz6Q",
			"name": "string"
		},
		{
			"_disp": "integer",
			"_id": "gxJBuQp7RkKLIV0cazfFnA",
			"name": "integer"
		},
		{
			"_disp": "email",
			"_id": "S8eHnlXxQJqIPLM2q8HniQ",
			"name": "email"
		},
		{
			"_disp": "password",
			"_id": "PkJTkOpsStGYcReZiDoEnQ",
			"name": "password"
		},
		{
			"_disp": "path",
			"_id": "9_TB_-ppQnCpm3EKkO8naw",
			"name": "path"
		},
		{
			"_disp": "url",
			"_id": "JMHHYAPlSgKuC5alDvehWA",
			"name": "url"
		},
		{
			"_disp": "float",
			"_id": "EaQUGA7oS7qKanG4QbvYbQ",
			"name": "float"
		}
	],
	"for_editing": false,
	"for_editing_array": false,
	"for_viewing": true,
	"for_viewing_array": false,
	"key": "dbui.core.stringlike.view",
	"template": "<div>\n  <span>{{displayValue}}</span>\n</div>"
},
{
	"__ver": "sys:1",
	"_class": "FieldTypeUiSpec",
	"_id": "tfbLyH5LTdej83BgiANlHQ",
	"fieldtypes": [
		{
			"_disp": "phone",
			"_id": "DDssakmDQoeACryXT377xw",
			"name": "phone"
		}
	],
	"for_editing": false,
	"for_editing_array": false,
	"for_viewing": true,
	"for_viewing_array": false,
	"key": "dbui.core.phone.view",
	"template": "<div>\n  <span>{{displayValue | phoneFormat}}</span>\n</div>"
},
{
	"__ver": "sys:8",
	"_class": "FieldTypeUiSpec",
	"_id": "vZafim91SDeMAEcOVdBS3g",
	"controller_fn": "function ($scope, $stateParams, Dbui) {\n\n    var fc = $scope.fieldCustomizations;\n    var td = $scope.typeDesc;\n    \n    //'composite' type descriptors have a 'construct' function which instantiates a proper BO-like 'sub-object'\n    var stub = td.construct({});\n    \n    Dbui.getPerspective($stateParams.perspective, stub._bo_meta_data.class_name, 'edit').then(function(subPerspective) {\n        $scope.subPerspective = subPerspective;\n    });\n    \n    //Watch for the initial assignment to binding.value... if null, construct an empty 'sub-object'.\n    var unwatchFn = $scope.$watch('binding.value', function(newBinding) {\n        if(!newBinding) {\n            $scope.binding.value = stub;\n        }\n        // console.log('COMPOSITE EDITOR', $scope.binding.value);\n        unwatchFn();\n    });\n    \n    $scope.formStatus = {};\n}",
	"fieldtypes": [
		{
			"_disp": "composite",
			"_id": "ePi7MsceQMqn3qnVBlHkNA",
			"name": "composite"
		}
	],
	"for_editing": true,
	"for_editing_array": false,
	"for_viewing": false,
	"for_viewing_array": false,
	"key": "dbui.core.composite.edit",
	"link_fn": "function (scope) {\n    var i=1;\n    scope.$watch('formStatus.isDirty', function(fs) {\n        if(!fs) {\n            //Set parent to pristine whenever child object-editor reports back clean\n            scope.linkStatus = i++; \n        }\n    });\n    \n    \n    return true;\n}",
	"template": "<div ng-if=\"subPerspective\">\n    <dbui-object-editor the-object=\"binding.value\" perspective=\"subPerspective\" form-status=\"formStatus\" ></dbui-object-editor>\n</div>"
},
{
	"__ver": "sys:6",
	"_class": "FieldTypeUiSpec",
	"_id": "v_YymGX0TNCkdQtOuHgPDA",
	"controller_fn": "function ($scope, Dbui) {\n    \n    Dbui.getRoleMap().then(function(roleMap) {\n        \n        $scope.allRoles = [];\n        _.forEach(roleMap, function(name, id){\n            $scope.allRoles.push({\n                _id:id,\n                name:name\n            });\n        });\n    });\n\n}",
	"fieldtypes": [
		{
			"_disp": "rolespec",
			"_id": "aeOhqBixSbigoy3yBkyScQ",
			"name": "rolespec"
		}
	],
	"for_editing": true,
	"for_editing_array": false,
	"for_viewing": false,
	"for_viewing_array": false,
	"key": "dbui.core.rolespec.edit",
	"link_fn": "function (scope, ngModel) {\n  //viewValue: selectedValues\n  //modelValue: [ 'role_id1', ...]\n\n  //$formatter: formats ng-model value -> $viewValue\n  ngModel.$formatters.push(function(modelValue) {\n      var selectedValues = {};\n      \n      if(modelValue) {\n          for(var i=0; i < modelValue.length; i++) {\n              selectedValues[modelValue[i]] = true;\n          }\n      }\n    \n    return [selectedValues];\n  });\n\n  //$parser: parses $viewValue -> ng-model value\n  ngModel.$parsers.push(function(viewValue) {\n      var idArray = [];\n      var selectedValues = viewValue && viewValue.length ? viewValue[0] : {};\n      \n      if(selectedValues) {\n          for(var v in selectedValues) {\n              if(selectedValues[v])\n                idArray.push(v);\n          }\n      }\n      \n      return idArray;\n  });\n\n  //$watch: our scope -> $viewValue\n  scope.$watch('selectedValues', function() {\n    ngModel.$setViewValue([scope.selectedValues]);\n\n  }, true );\n\n  //$render: $viewValue -> our scope\n  ngModel.$render = function() {\n    scope.selectedValues = ngModel.$viewValue[0];\n  };\n  \n  return false;\n}",
	"template": "<div class=\"dbui-edit-field-Array dbui-edit-container\" >\n  <div class=\"row\" ng-repeat=\"val in allRoles\">\n    <div class=\"col-md-offset-1 col-md-6\">\n        <label class=\"checkbox\" >\n          <input type=\"checkbox\" name=\"{{elemId}}_{{$index}}\" ng-model=\"selectedValues[val._id]\"> {{val.name}} </input>\n        </label>\n    </div>\n  </div>\n</div>\n"
},
{
	"__ver": "sys:2",
	"_class": "FieldTypeUiSpec",
	"_id": "yOXK_1eERwCC7K4QGkFciA",
	"doc": "Renders the value, utilizing custom {@link CurrencyFormat} filter.",
	"fieldtypes": [
		{
			"_disp": "money",
			"_id": "cKFhGuY3SZ6_2YWKwkpqCA",
			"name": "money"
		}
	],
	"for_editing": false,
	"for_editing_array": false,
	"for_viewing": true,
	"for_viewing_array": false,
	"key": "dbui.core.money.view",
	"template": "<div>\n  <span>{{displayValue | currencyFormat}}</span>\n</div>"
},
{
	"__ver": "sys:2",
	"_class": "FieldTypeUiSpec",
	"_id": "yzItsBrUQr-SZfH53sXVVQ",
	"controller_fn": "function ($scope) {\n    $scope.tinymceOptions = {\n        plugins: 'link code table textcolor colorpicker',\n        toolbar: 'undo redo | styleselect bold italic underline | forecolor backcolor | alignleft aligncenter alignright | table | code',\n        menubar:'edit insert view format table',\n        height:'400'\n      };\n}",
	"doc": "In order for this to work:,\n(1) js libraries are required (in proper order) as dependencies on DBUI module: (a) tinymce, (b) angular-ui-tinymce \n(2) Angular module \"ui.tinymce\" must be added as external module dependency.  to DBUI module\n(3) A fieldCustomization needs to be set for the sourcecode field:  {\"uiSpec\": \"dbui.addon.tinymce_editor\"}",
	"fieldtypes": [
		{
			"_disp": "sourcecode",
			"_id": "vOaH1F-HRhefePjYFAGCBA",
			"name": "sourcecode"
		}
	],
	"for_editing": true,
	"for_editing_array": false,
	"for_viewing": false,
	"for_viewing_array": false,
	"key": "dbui.addon.tinymce_editor",
	"template": "<div class=\"dbui-edit-field-object\" style=\"min-height:400px\">\n  <textarea ui-tinymce=\"tinymceOptions\" ng-model=\"binding.value\"></textarea>\n</div>"
},
{
	"__t": "JsResource",
	"__ver": "sys:4",
	"_class": "JsResource",
	"_id": "2TDnTPuBRLCu1-DgDQdmKA",
	"content": null,
	"doc": "\"Shadow\" record for file on filesystem.",
	"name": "lodash.min.js",
	"path": "bower_components/lodash",
	"rolespec": null
},
{
	"__t": "JsResource",
	"__ver": "sys:4",
	"_class": "JsResource",
	"_id": "GABEyCzfTNSuQeo0b1H6TA",
	"content": null,
	"doc": "\"Shadow\" record for file on filesystem.",
	"name": "ui-bootstrap-tpls.js",
	"path": "bower_components/angular-bootstrap",
	"rolespec": null
},
{
	"__t": "JsResource",
	"__ver": "sys:5",
	"_class": "JsResource",
	"_id": "GUOAqvm-T0K8quHjSH-P8w",
	"content": null,
	"doc": "\"Shadow\" record for file on filesystem.",
	"name": "ace.js",
	"path": "bower_components/ace-builds/src-min-noconflict",
	"rolespec": null
},
{
	"__t": "JsResource",
	"__ver": "sys:6",
	"_class": "JsResource",
	"_id": "QJ9VrGUoQya0fyEGoww65A",
	"content": null,
	"doc": "\"Shadow\" record for file on filesystem.",
	"name": "jquery.min.js",
	"path": "bower_components/jquery/dist",
	"rolespec": null
},
{
	"__t": "JsResource",
	"__ver": "sys:3",
	"_class": "JsResource",
	"_id": "WGmUTuiGS5KfXGYV_sUHeQ",
	"content": null,
	"doc": "\"Shadow\" record for file on filesystem.",
	"name": "ui-ace.min.js",
	"path": "bower_components/angular-ui-ace",
	"rolespec": null
},
{
	"__t": "JsResource",
	"__ver": "sys:4",
	"_class": "JsResource",
	"_id": "YHk7GG6fQIKjEFXm7zTmFg",
	"content": null,
	"doc": "\"Shadow\" record for file on filesystem.",
	"name": "angular.min.js",
	"path": "bower_components/angular",
	"rolespec": null
},
{
	"__t": "JsResource",
	"__ver": "sys:1",
	"_class": "JsResource",
	"_id": "cevOr03VSL6fKgpPRnXYVQ",
	"doc": "Shadow",
	"name": "ext-language_tools.js",
	"path": "bower_components/ace-builds/src-min-noconflict",
	"rolespec": [
	]
},
{
	"__t": "JsResource",
	"__ver": "sys:4",
	"_class": "JsResource",
	"_id": "mmYBlEfVRi2WM5nGcfm0VA",
	"content": null,
	"doc": "\"Shadow\" record for file on filesystem.",
	"name": "angular-ui-router.min.js",
	"path": "bower_components/angular-ui-router/release",
	"rolespec": null
},
{
	"__t": "JsResource",
	"__ver": "sys:4",
	"_class": "JsResource",
	"_id": "obYp82hZTaWS6ABYtZ2eJA",
	"content": null,
	"doc": "\"Shadow\" record for file on filesystem.",
	"name": "angular-cookies.min.js",
	"path": "bower_components/angular-cookies",
	"rolespec": null
},
{
	"__t": "JsResource",
	"__ver": "sys:1",
	"_class": "JsResource",
	"_id": "omuJBnPOSYC6z4RH26g_xA",
	"doc": "SHADOW",
	"name": "moment.min.js",
	"path": "bower_components/moment/min",
	"rolespec": [
	]
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "LabelGroup",
	"_id": "0-2MLJNsRcqzvkDmagrWNg",
	"key": "sys.dbui.bo.DataAccessControl",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": true,
	"value": {
		"allow_create": "Allow Create",
		"allow_delete": "Allow Delete",
		"allow_read": "Allow Read",
		"allow_update": "Allow Update",
		"business_object": "Business Object",
		"condition": "Condition",
		"field_restrictions": "Field Restrictions",
		"rolespec": "Roles"
	}
},
{
	"__ver": "sys:2",
	"_class": "LabelGroup",
	"_id": "0-3ITOp9SGa71bHTqox3Dw",
	"key": "sys.dbui.bo.WebService",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": true,
	"value": {
		"doc": "Documentation",
		"function": "Function",
		"path": "Path",
		"rolespec": "Rolespec"
	}
},
{
	"__ver": "sys:2",
	"_class": "LabelGroup",
	"_id": "1goV4lEVQ6CWVJzvTAPYOg",
	"key": "sys.dbui.bo.FieldTypeUiSpec",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": true,
	"value": {
		"controller_fn": "Controller Fn",
		"fieldtypes": "Fieldtypes",
		"for_editing": "For Editing",
		"for_editing_array": "For Editing Array",
		"for_viewing": "For Viewing",
		"for_viewing_array": "For Viewing Array",
		"key": "Key",
		"link_fn": "Link Fn",
		"template": "Template"
	}
},
{
	"__ver": "sys:2",
	"_class": "LabelGroup",
	"_id": "2Zquz6iMQLS7V_ZyZWBR4Q",
	"key": "sys.dbui.bo.RemotePackageRepository",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": true,
	"value": {
		"auth": "Auth",
		"name": "Name",
		"package_keys": "Package Keys (to install)",
		"packages": "Packages",
		"url": "Url"
	}
},
{
	"__ver": "sys:2",
	"_class": "LabelGroup",
	"_id": "2_amBJywS--YleeMplRr9w",
	"key": "dbui.menu.dev_dbui_cust",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": true,
	"value": {
		"_submenu_label": "DBUI Customization",
		"custom_pages": "Custom Pages",
		"menus": "Menus",
		"perspectives": "Perspectives",
		"ui_actions": "UI Actions"
	}
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "LabelGroup",
	"_id": "3pQa7G08RPCvbNj-3SXnGw",
	"key": "sys.dbui.bo.Config",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": true,
	"value": {
		"allow_customize": "Allow Customization",
		"key": "Key",
		"rolespec": "For Specific Roles",
		"user": "User",
		"value": "Value"
	}
},
{
	"__pkg": "sys",
	"__ver": "sys:3",
	"_class": "LabelGroup",
	"_id": "5BKy2VxhTRqkuRDx74Byzg",
	"key": "sys.dbui.bo.FieldType",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": true,
	"value": {
		"doc": "Documentation",
		"from_db": "From Db",
		"get_validator": "Get Validator",
		"mongo_type": "Mongo Type",
		"name": "Name",
		"text_index": "Text Index",
		"to_db": "To Db"
	}
},
{
	"__ver": "sys:2",
	"_class": "LabelGroup",
	"_id": "7NOuKKSLSxytgyMyw3mm2w",
	"key": "sys.dbui.bo.CodeModule",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": true,
	"value": {
		"code": "Code",
		"doc": "Documentation",
		"name": "Name",
		"path": "Path"
	}
},
{
	"__pkg": "sys",
	"__ver": "sys:3",
	"_class": "LabelGroup",
	"_id": "7cawn4f9SneVXCAMIViLmQ",
	"key": "sys.query_operations",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": true,
	"value": {
		"after": "is after",
		"before": "is before",
		"childOf": "is child of",
		"contains": "contains",
		"empty": "is empty",
		"eq": "=",
		"gt": "is greater than",
		"gte": "is greater than or equals",
		"isfalse": "is false",
		"istrue": "is true",
		"lt": "is less than",
		"lte": "is less than or equals",
		"ne": "doesn't equal",
		"notcontains": "doesn't contain",
		"notempty": "is not empty",
		"regex": "matches regex",
		"relative": "relative to now",
		"todayminus": "within last n days"
	}
},
{
	"__ver": "sys:2",
	"_class": "LabelGroup",
	"_id": "8DShs7YTQf26hn73nut7Xg",
	"key": "sys.dbui.bo.ScheduleTrigger#schedule",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": false,
	"value": {
		"_tooltip": {
			"day_of_month": "1-31",
			"day_of_week": "0-7 (0 or 7 is sunday)",
			"hour": "0-23",
			"minute": "0-59",
			"month": "1-12",
			"second": "0-59"
		},
		"day_of_month": "Day Of Month",
		"day_of_week": "Day Of Week",
		"hour": "Hour",
		"minute": "Minute",
		"month": "Month",
		"second": "Second"
	}
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "LabelGroup",
	"_id": "8X3sML8-SS6icy3ql5brQg",
	"key": "sys.dbui.bo.BusinessObjectPackage",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": true,
	"value": {
		"dependencies": "Dependencies",
		"description": "Description",
		"key": "Key",
		"major_version": "Major Version",
		"manifest": "Manifest",
		"minor_version": "Minor Version",
		"name": "Name"
	}
},
{
	"__ver": "sys:1",
	"_class": "LabelGroup",
	"_id": "8ztMXn4uQ-CZFu8GyFEVhg",
	"key": "db.enum.TimeDuration",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": false,
	"value": {
		"days": "Days",
		"hours": "Hours",
		"milliseconds": "Milliseconds",
		"minutes": "Minutes",
		"months": "Months",
		"seconds": "Seconds",
		"weeks": "Weeks",
		"years": "Years"
	}
},
{
	"__ver": "sys:3",
	"_class": "LabelGroup",
	"_id": "CoWMlx_mQjCR23MRd_OMNA",
	"key": "sys.dbui.bo.CssResource",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": true,
	"value": {
		"compiled_content": "Compiled Content",
		"content": "Content",
		"doc": "Documentation",
		"name": "Name",
		"path": "Path",
		"preprocessor": "Preprocessor",
		"rolespec": "Rolespec"
	}
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "LabelGroup",
	"_id": "E-a8Xpq1Tja5pjgokvJu1A",
	"key": "sys.dbui.bo.WebResource",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": true,
	"value": {
		"doc": "Documentation",
		"name": "Name",
		"path": "Path",
		"rolespec": "Roles"
	}
},
{
	"__ver": "sys:1",
	"_class": "LabelGroup",
	"_id": "EWIt-os4Q4Cez3WAYSicBg",
	"key": "sys.dbui.bo.Person",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": false,
	"value": {
		"phone": "Phone",
		"user": "User"
	}
},
{
	"__ver": "sys:1",
	"_class": "LabelGroup",
	"_id": "LKubEUuoQtOlBpvsmH6opg",
	"key": "sys.dbui.bo.UpdateLog",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": false,
	"value": {
		"external_pkg": "External Pkg",
		"object_class": "Object Class",
		"object_id": "Object Id",
		"package": "Package",
		"revert_patch": "Revert Patch",
		"timestamp": "Timestamp",
		"update_type": "Update Type",
		"updated_version": "Updated Version"
	}
},
{
	"__pkg": "sys",
	"__ver": "sys:2",
	"_class": "LabelGroup",
	"_id": "NhgQZhe2SlSXrY8IJlW0-g",
	"key": "sys.dbui.bo.UiAction",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": true,
	"value": {
		"doc": "Documentation",
		"function": "Function",
		"key": "Key"
	}
},
{
	"__ver": "sys:7",
	"_class": "LabelGroup",
	"_id": "Q8e8BUTARj6S6PCQs827wg",
	"key": "dbui.menu.dev_angular",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": true,
	"value": {
		"_submenu_label": "Angular",
		"apps": "Applications",
		"controllers": "Controllers",
		"directives": "Directives",
		"factories": "Factories/Services",
		"filters": "Filters",
		"modules": "Modules",
		"templates": "Templates"
	}
},
{
	"__ver": "sys:4",
	"_class": "LabelGroup",
	"_id": "QGiwBe2MRDGQaJczxQJhcw",
	"key": "sys.dbui.bo.MemberFunction",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": true,
	"value": {
		"_tooltip": {
			"use_injection": "if this is true, the function below will be invoked ONCE (injecting libraries/services) to retrieve the actual member function."
		},
		"applies_to": "Applies To",
		"business_object": "Business Object",
		"doc": "Documentation",
		"function": "Function",
		"is_static": "Static",
		"name": "Name",
		"use_injection": "Use Injection"
	}
},
{
	"__ver": "sys:1",
	"_class": "LabelGroup",
	"_id": "SpMuRxTkTjaqIcALF8Kj8Q",
	"key": "sys.dbui.bo.PackageConflict",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": false,
	"value": {
		"conflict_type": "Conflict Type",
		"created_date": "Created Date",
		"diff": "Diff",
		"installed_object": "Installed Object",
		"installed_version_id": "Installed Version Id",
		"merged_object": "Merged Object",
		"object_class": "Object Class",
		"object_id": "Object Id",
		"package": "Package",
		"package_version_id": "Package Version Id"
	}
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "LabelGroup",
	"_id": "TS9SHirsQXKol9WBYFN-ZA",
	"key": "sys.dbui.bo.QueryOp",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": true,
	"value": {
		"evaluate": "Evaluate",
		"for_array": "Applies to Array",
		"fromMongo": "From Mongo",
		"name": "Name",
		"stringify": "Stringify",
		"toMongo": "To Mongo",
		"types": "Types"
	}
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "LabelGroup",
	"_id": "U4yGzcuDQh2rjSA7O3s7Tw",
	"key": "sys.dbui.bo.BusinessObjectDef",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": true,
	"value": {
		"abstract": "Is Abstract",
		"class_name": "Class Name",
		"definition": "Definition",
		"doc": "Documentation",
		"superclass": "Superclass",
		"system": "Is System"
	}
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "LabelGroup",
	"_id": "V_SaiCYWR5yl9o006_soMA",
	"key": "sys.dbui.bo.ImageResource",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": true,
	"value": {
		"content": "Content",
		"doc": "Documentation",
		"name": "Name",
		"path": "Path",
		"rolespec": "Roles"
	}
},
{
	"__ver": "sys:2",
	"_class": "LabelGroup",
	"_id": "Y-CAFkrLQDaUXl3yZAUpyw",
	"key": "sys.dbui.bo.DbuiCustomPage",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": true,
	"value": {
		"body": "Body",
		"controller": "Controller",
		"doc": "Documentation",
		"key": "Key"
	}
},
{
	"__ver": "sys:1",
	"_class": "LabelGroup",
	"_id": "_DrkA3czQUup-f2KiH-fCw",
	"key": "sys.dbui.bo.TestObject",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": false,
	"value": {
		"date": "Date"
	}
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "LabelGroup",
	"_id": "_QrXcqXVTjqddtOxKYlG9g",
	"key": "sys.dbui.bo.User",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": true,
	"value": {
		"language": "Language",
		"name": "Name",
		"password": "Password",
		"roles": "Assigned Roles"
	}
},
{
	"__ver": "sys:5",
	"_class": "LabelGroup",
	"_id": "_Tbit9I7QJ-Qv4c6PI25Sg",
	"key": "dbui.menu.dev_serverside",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": true,
	"value": {
		"_submenu_label": "Data Definition / Serverside Dev",
		"bods": "BusinessObjectDefs",
		"codemodules": "CodeModules",
		"datatriggers": "Data Triggers",
		"enumerations": "Enumerations",
		"labelgroups": "LabelGroups",
		"webservices": "Web Services"
	}
},
{
	"__ver": "sys:2",
	"_class": "LabelGroup",
	"_id": "_qEUjNuUQEiXNCKHLEQIeg",
	"key": "sys.dbui.bo.JsResource",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": true,
	"value": {
		"content": "Content",
		"doc": "Documentation",
		"name": "Name",
		"path": "Path",
		"rolespec": "Rolespec"
	}
},
{
	"__pkg": "sys",
	"__ver": "sys:3",
	"_class": "LabelGroup",
	"_id": "a5b6nZpERjiEGIJyV0DugA",
	"key": "sys.dbui.bo.Menu",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": true,
	"value": {
		"definition": "Definition",
		"doc": "Documentation",
		"key": "Key",
		"rolespec": "Rolespec"
	}
},
{
	"__ver": "sys:1",
	"_class": "LabelGroup",
	"_id": "aaEiS8DwTTSNsh-FRqlOuQ",
	"key": "sys.dbui.bo.DocTemplate",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": false,
	"value": {
		"content": "Content",
		"content_type": "Content Type",
		"key": "Key"
	}
},
{
	"__ver": "sys:1",
	"_class": "LabelGroup",
	"_id": "adqo1DHgT7Wc68njA7Eykg",
	"key": "dbui.menu.dev",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": false,
	"value": "Developer Menu"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "LabelGroup",
	"_id": "cT9jjW3gTUe-gLlyRxID2w",
	"key": "dbui.menu.user",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": true,
	"value": {
		"_submenu_label": "User Account",
		"password_change": "Password Change"
	}
},
{
	"__ver": "sys:1",
	"_class": "LabelGroup",
	"_id": "djHBYpkcRWuo5vHgCSsvqw",
	"key": "sys.dbui.bo.DataExport",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": true,
	"value": {
		"content_type": "Content Type",
		"name": "Name",
		"transform_fn": "Transform Fn"
	}
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "LabelGroup",
	"_id": "e-ykFDhbSWOeb7oxA8E_iQ",
	"key": "sys.dbui.bo.FileResource",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": true,
	"value": {
		"content": "Content",
		"doc": "Documentation",
		"name": "Name",
		"path": "Path",
		"rolespec": "Rolespec"
	}
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "LabelGroup",
	"_id": "f5jWkW__R7GMilAtgyOsjA",
	"key": "sys.dbui.bo.BusinessObjectPackageUpdate",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": true,
	"value": {
		"package": "Package",
		"target_object": "Target Object",
		"updates": "Updates"
	}
},
{
	"__ver": "sys:1",
	"_class": "LabelGroup",
	"_id": "fVVSdgdOSgGPZjlhkT8ZGA",
	"key": "sys.dbui.bo.QueryOpUiSpec",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": true,
	"value": {
		"editors": "Editors",
		"fieldtypes": "Fieldtypes",
		"for_array": "For Array",
		"key": "Key"
	}
},
{
	"__ver": "sys:1",
	"_class": "LabelGroup",
	"_id": "fphmOTaoTjeuZwiJ3A_eeA",
	"key": "sys.dbui.bo.Enumeration",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": true,
	"value": {
		"name": "Name",
		"values": "Values"
	}
},
{
	"__ver": "sys:1",
	"_class": "LabelGroup",
	"_id": "ioOrOL6zRmKDinIvZqAeFA",
	"key": "sys.dbui.bo.DbuiReport",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": false,
	"value": {
		"doc": "Doc",
		"input_perspective": "Input Perspective",
		"input_typedef": "Input Typedef",
		"name": "Name",
		"output_perspective": "Output Perspective",
		"output_typedef": "Output Typedef",
		"web_service": "Web Service"
	}
},
{
	"__ver": "sys:1",
	"_class": "LabelGroup",
	"_id": "jUvRflD4R5G5nrgacVEZqw",
	"key": "sys.dbui.bo.JsonResource",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": false,
	"value": {
		"content": "Content",
		"doc": "Doc",
		"name": "Name",
		"path": "Path",
		"rolespec": "Rolespec"
	}
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "LabelGroup",
	"_id": "l007C5XJRNyhqfXK-65DFw",
	"key": "sys.dbui.bo.LabelGroup",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": true,
	"value": {
		"key": "Key",
		"language": "Language",
		"value": "Value"
	}
},
{
	"__ver": "sys:5",
	"_class": "LabelGroup",
	"_id": "m4wYLW6UQeW429OeHQAQfw",
	"key": "sys.dbui.bo.AngularModule",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": true,
	"value": {
		"config_function": "Config Function",
		"css_dependencies": "CSS Dependencies",
		"doc": "Documentation",
		"external_mod_dependencies": "Module Dependencies (external)",
		"js_dependencies": "JS Dependencies",
		"mod_dependencies": "Module Dependencies",
		"name": "Name",
		"path": "Path"
	}
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "LabelGroup",
	"_id": "mttLJj-BSYS3LobLEoa1bA",
	"key": "sys.dbui.bo.HtmlResource",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": true,
	"value": {
		"content": "Content",
		"doc": "Documentation",
		"name": "Name",
		"path": "Path",
		"rolespec": "Roles"
	}
},
{
	"__ver": "sys:2",
	"_class": "LabelGroup",
	"_id": "oyTJzYryQ0CN4fhqSE8-Qg",
	"key": "sys.dbui.bo.AngularProvider",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": true,
	"value": {
		"doc": "Documentation",
		"function": "Function",
		"module": "Angular Module",
		"name": "Name",
		"parameters": "Parameter List",
		"path": "Path",
		"type": "Provider Type"
	}
},
{
	"__ver": "sys:3",
	"_class": "LabelGroup",
	"_id": "pq7sOK1ATRONqjsKnQ-e_A",
	"key": "dbui.menu.dev_webresource",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": true,
	"value": {
		"_submenu_label": "Web Resources",
		"css": "CSS",
		"file": "Files",
		"html": "HTML",
		"image": "Images",
		"js": "Javascript",
		"json": "JSON"
	}
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "LabelGroup",
	"_id": "q8GFjcCzSKm-Jj30-dNzpQ",
	"key": "sys.dbui.bo.Language",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": true,
	"value": {
		"code": "Code",
		"name": "Name"
	}
},
{
	"__ver": "sys:3",
	"_class": "LabelGroup",
	"_id": "qQZPxlHNTZ29ZamXeIWkAw",
	"key": "sys.dbui.bo.AngularTemplate",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": true,
	"value": {
		"content": "Content",
		"doc": "Documentation",
		"module": "Module",
		"name": "Name",
		"path": "Path",
		"provider": "Provider",
		"rolespec": "Rolespec"
	}
},
{
	"__ver": "sys:1",
	"_class": "LabelGroup",
	"_id": "rXLbwEJ_RrCjtdHyfECIIw",
	"key": "sys.dbui.bo.TwoFactorAuthImplementation",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": false,
	"value": {
		"doc": "Doc",
		"factory_fn": "Factory Fn",
		"name": "Name"
	}
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "LabelGroup",
	"_id": "tiV9QuZdQSCc-CtS8-xJGA",
	"key": "sys.dbui.bo.DataTrigger",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": true,
	"value": {
		"action": "Action",
		"before_after": "Before/After",
		"business_object": "Business Object",
		"doc": "Documentation",
		"key": "Key",
		"on_create": "On Create",
		"on_delete": "On Delete",
		"on_update": "On Update"
	}
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "LabelGroup",
	"_id": "uxOzgKeRRKCguGbhyQtD3g",
	"key": "sys.dbui.bo.Role",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": true,
	"value": {
		"name": "Name"
	}
},
{
	"__ver": "sys:2",
	"_class": "LabelGroup",
	"_id": "vQFHWhwZS1-l3PBxxzcBsg",
	"key": "dbui.menu.dev_admin",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": true,
	"value": {
		"_submenu_label": "Admin",
		"config": "Configuration",
		"dac": "Data Access Controls",
		"roles": "Roles",
		"users": "Users"
	}
},
{
	"__ver": "sys:2",
	"_class": "LabelGroup",
	"_id": "w3FIbwfYQoKk_QISUEDdKw",
	"key": "sys.dbui.bo.ScheduleTrigger",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": false,
	"value": {
		"enabled": "Enabled",
		"function": "Function",
		"key": "Key",
		"last_execution": "Last Execution",
		"schedule": "Schedule"
	}
},
{
	"__ver": "sys:2",
	"_class": "LabelGroup",
	"_id": "wZwh09FtR9KG0Yfagncppw",
	"key": "db.enum.CssPreprocessor",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": false,
	"value": {
		"css": "CSS (no preprocessing)",
		"less": "Less",
		"sass": "SASS",
		"scss": "SCSS"
	}
},
{
	"__ver": "sys:3",
	"_class": "LabelGroup",
	"_id": "xJDHd2XfT_uz1TXZ8HZQ0A",
	"key": "sys.dbui.bo.AngularApp",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": true,
	"value": {
		"body": "Body",
		"config_function": "Config Function",
		"css_dependencies": "Css Dependencies",
		"doc": "Doc",
		"head": "Head",
		"js_dependencies": "Js Dependencies",
		"module": "Angular Module",
		"name": "Name",
		"path": "Path",
		"rolespec": "Rolespec"
	}
},
{
	"__ver": "sys:1",
	"_class": "LabelGroup",
	"_id": "yOHJcevIQVKQuzvD4LC_SQ",
	"key": "sys.dbui.bo.TwoFactorAuthLoginRequest",
	"language": {
		"_disp": "English",
		"_id": "-9vPfv2lEeSFtiimx_V4dw",
		"code": "en"
	},
	"system": false,
	"value": {
		"code": "Code",
		"created_date": "Created Date",
		"user": "User"
	}
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9v21P2lEeSFtiimx_V4dw",
	"code": "zu",
	"name": "Zulu"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9v2mP2lEeSFtiimx_V4dw",
	"code": "za",
	"name": "Zhuang"
},
{
	"__pkg": "sys",
	"__ver": "sys:2",
	"_class": "Language",
	"_id": "-9vFOP2lEeSFtiimx_V4dw",
	"code": "ab",
	"name": "Abkhazian"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vG-v2lEeSFtiimx_V4dw",
	"code": "sq",
	"name": "Albanian"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vGKP2lEeSFtiimx_V4dw",
	"code": "aa",
	"name": "Afar"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vGgv2lEeSFtiimx_V4dw",
	"code": "af",
	"name": "Afrikaans"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vGvv2lEeSFtiimx_V4dw",
	"code": "ak",
	"name": "Akan"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vHQP2lEeSFtiimx_V4dw",
	"code": "ASL",
	"name": "American Sign Language"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vHhv2lEeSFtiimx_V4dw",
	"code": "am",
	"name": "Amharic"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vHwv2lEeSFtiimx_V4dw",
	"code": "ar",
	"name": "Arabic"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vI7v2lEeSFtiimx_V4dw",
	"code": "ay",
	"name": "Aymara"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vICP2lEeSFtiimx_V4dw",
	"code": "an",
	"name": "Aragonese"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vIRP2lEeSFtiimx_V4dw",
	"code": "hy",
	"name": "Armenian"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vIgP2lEeSFtiimx_V4dw",
	"code": "as",
	"name": "Assamese"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vIsv2lEeSFtiimx_V4dw",
	"code": "av",
	"name": "Avar"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vJ1P2lEeSFtiimx_V4dw",
	"code": "eu",
	"name": "Basque"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vJKv2lEeSFtiimx_V4dw",
	"code": "az",
	"name": "Azerbaijani"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vJZv2lEeSFtiimx_V4dw",
	"code": "bm",
	"name": "Bambara"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vJov2lEeSFtiimx_V4dw",
	"code": "ba",
	"name": "Bashkir"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vKEP2lEeSFtiimx_V4dw",
	"code": "be",
	"name": "Belarusian"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vKVv2lEeSFtiimx_V4dw",
	"code": "bn",
	"name": "Bengali"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vKkv2lEeSFtiimx_V4dw",
	"code": "bh",
	"name": "Bihari"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vKxP2lEeSFtiimx_V4dw",
	"code": "bi",
	"name": "Bislama"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vL5v2lEeSFtiimx_V4dw",
	"code": "km",
	"name": "Cambodian"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vLAP2lEeSFtiimx_V4dw",
	"code": "bs",
	"name": "Bosnian"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vLPP2lEeSFtiimx_V4dw",
	"code": "br",
	"name": "Breton"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vLbv2lEeSFtiimx_V4dw",
	"code": "bg",
	"name": "Bulgarian"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vLqv2lEeSFtiimx_V4dw",
	"code": "my",
	"name": "Burmese"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vMIv2lEeSFtiimx_V4dw",
	"code": "ca",
	"name": "Catalan"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vMVP2lEeSFtiimx_V4dw",
	"code": "ch",
	"name": "Chamorro"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vM_v2lEeSFtiimx_V4dw",
	"code": "zh",
	"name": "Chinese"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vMkP2lEeSFtiimx_V4dw",
	"code": "ce",
	"name": "Chechen"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vMzP2lEeSFtiimx_V4dw",
	"code": "ny",
	"name": "Chichewa"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vN5P2lEeSFtiimx_V4dw",
	"code": "cr",
	"name": "Cree"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vNOv2lEeSFtiimx_V4dw",
	"code": "cv",
	"name": "Chuvash"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vNdv2lEeSFtiimx_V4dw",
	"code": "kw",
	"name": "Cornish"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vNqP2lEeSFtiimx_V4dw",
	"code": "co",
	"name": "Corsican"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vO1P2lEeSFtiimx_V4dw",
	"code": "dv",
	"name": "Divehi"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vOIP2lEeSFtiimx_V4dw",
	"code": "hr",
	"name": "Croatian"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vOXP2lEeSFtiimx_V4dw",
	"code": "cs",
	"name": "Czech"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vOjv2lEeSFtiimx_V4dw",
	"code": "da",
	"name": "Danish"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vP7P2lEeSFtiimx_V4dw",
	"code": "et",
	"name": "Estonian"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vPBv2lEeSFtiimx_V4dw",
	"code": "nl",
	"name": "Dutch"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vPQv2lEeSFtiimx_V4dw",
	"code": "dz",
	"name": "Dzongkha"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vPfv2lEeSFtiimx_V4dw",
	"code": "en",
	"name": "English"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vPsP2lEeSFtiimx_V4dw",
	"code": "eo",
	"name": "Esperanto"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vQ0v2lEeSFtiimx_V4dw",
	"code": null,
	"name": "Filipino"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vQKP2lEeSFtiimx_V4dw",
	"code": "ee",
	"name": "Ewe"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vQZP2lEeSFtiimx_V4dw",
	"code": "fo",
	"name": "Faroese"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vQoP2lEeSFtiimx_V4dw",
	"code": "fj",
	"name": "Fijian"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vR9P2lEeSFtiimx_V4dw",
	"code": "de",
	"name": "German"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vRDv2lEeSFtiimx_V4dw",
	"code": "fi",
	"name": "Finnish"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vRSv2lEeSFtiimx_V4dw",
	"code": "fr",
	"name": "French"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vRhv2lEeSFtiimx_V4dw",
	"code": "gl",
	"name": "Galician"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vRuP2lEeSFtiimx_V4dw",
	"code": "lg",
	"name": "Ganda"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vS2v2lEeSFtiimx_V4dw",
	"code": "gu",
	"name": "Gujarati"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vSMP2lEeSFtiimx_V4dw",
	"code": "el",
	"name": "Greek"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vSbP2lEeSFtiimx_V4dw",
	"code": "kl",
	"name": "Greenlandic"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vSqP2lEeSFtiimx_V4dw",
	"code": "gn",
	"name": "Guarani"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vTFv2lEeSFtiimx_V4dw",
	"code": "ht",
	"name": "Haitian"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vTUv2lEeSFtiimx_V4dw",
	"code": "ha",
	"name": "Hausa"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vT_P2lEeSFtiimx_V4dw",
	"code": "hi",
	"name": "Hindi"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vThP2lEeSFtiimx_V4dw",
	"code": "he",
	"name": "Hebrew"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vTwP2lEeSFtiimx_V4dw",
	"code": "hz",
	"name": "Herero"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vU2P2lEeSFtiimx_V4dw",
	"code": "io",
	"name": "Ido"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vULv2lEeSFtiimx_V4dw",
	"code": "ho",
	"name": "Hiri Motu"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vUav2lEeSFtiimx_V4dw",
	"code": "hu",
	"name": "Hungarian"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vUpv2lEeSFtiimx_V4dw",
	"code": "is",
	"name": "Icelandic"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vV0v2lEeSFtiimx_V4dw",
	"code": "ie",
	"name": "Interlingue"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vVHv2lEeSFtiimx_V4dw",
	"code": "ig",
	"name": "Igbo"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vVWv2lEeSFtiimx_V4dw",
	"code": "id",
	"name": "Indonesian"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vVlv2lEeSFtiimx_V4dw",
	"code": "ia",
	"name": "Interlingua"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vW9P2lEeSFtiimx_V4dw",
	"code": "ja",
	"name": "Japanese"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vWDv2lEeSFtiimx_V4dw",
	"code": "iu",
	"name": "Inuktitut"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vWSv2lEeSFtiimx_V4dw",
	"code": "ik",
	"name": "Inupiak"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vWfP2lEeSFtiimx_V4dw",
	"code": "ga",
	"name": "Irish"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vWuP2lEeSFtiimx_V4dw",
	"code": "it",
	"name": "Italian"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vX5P2lEeSFtiimx_V4dw",
	"code": "ks",
	"name": "Kashmiri"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vXMP2lEeSFtiimx_V4dw",
	"code": "jv",
	"name": "Javanese"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vXbP2lEeSFtiimx_V4dw",
	"code": "kn",
	"name": "Kannada"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vXqP2lEeSFtiimx_V4dw",
	"code": "kr",
	"name": "Kanuri"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vYFv2lEeSFtiimx_V4dw",
	"code": "kk",
	"name": "Kazakh"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vYUv2lEeSFtiimx_V4dw",
	"code": "ki",
	"name": "Kikuyu"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vY_P2lEeSFtiimx_V4dw",
	"code": "kv",
	"name": "Komi"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vYjv2lEeSFtiimx_V4dw",
	"code": "ky",
	"name": "Kirghiz"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vYwP2lEeSFtiimx_V4dw",
	"code": "rn",
	"name": "Kirundi"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vZ4v2lEeSFtiimx_V4dw",
	"code": "ku",
	"name": "Kurdish"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vZOP2lEeSFtiimx_V4dw",
	"code": "kg",
	"name": "Kongo"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vZdP2lEeSFtiimx_V4dw",
	"code": "ko",
	"name": "Korean"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vZsP2lEeSFtiimx_V4dw",
	"code": "kj",
	"name": "Kuanyama"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vaHv2lEeSFtiimx_V4dw",
	"code": "lo",
	"name": "Laotian"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vaWv2lEeSFtiimx_V4dw",
	"code": "la",
	"name": "Latin"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9valv2lEeSFtiimx_V4dw",
	"code": "lv",
	"name": "Latvian"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vayP2lEeSFtiimx_V4dw",
	"code": "li",
	"name": "Limburgian"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vbBP2lEeSFtiimx_V4dw",
	"code": "ln",
	"name": "Lingala"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vbQP2lEeSFtiimx_V4dw",
	"code": "lt",
	"name": "Lithuanian"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vbfP2lEeSFtiimx_V4dw",
	"code": "lb",
	"name": "Luxembourgish"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vd_P2lEeSFtiimx_V4dw",
	"code": "mg",
	"name": "Malagasy"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vdwP2lEeSFtiimx_V4dw",
	"code": "mk",
	"name": "Macedonian"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9ve4v2lEeSFtiimx_V4dw",
	"code": "gv",
	"name": "Manx"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9veOP2lEeSFtiimx_V4dw",
	"code": "ms",
	"name": "Malay"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vedP2lEeSFtiimx_V4dw",
	"code": "ml",
	"name": "Malayalam"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vesP2lEeSFtiimx_V4dw",
	"code": "mt",
	"name": "Maltese"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vf0v2lEeSFtiimx_V4dw",
	"code": "mo",
	"name": "Moldovan"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vfHv2lEeSFtiimx_V4dw",
	"code": "mi",
	"name": "Maori"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vfWv2lEeSFtiimx_V4dw",
	"code": "mr",
	"name": "Marathi"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vflv2lEeSFtiimx_V4dw",
	"code": "mh",
	"name": "Marshallese"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vg9P2lEeSFtiimx_V4dw",
	"code": "ne",
	"name": "Nepali"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vgBP2lEeSFtiimx_V4dw",
	"code": "mn",
	"name": "Mongolian"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vgQP2lEeSFtiimx_V4dw",
	"code": "na",
	"name": "Nauruan"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vgfP2lEeSFtiimx_V4dw",
	"code": "nv",
	"name": "Navajo"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vguP2lEeSFtiimx_V4dw",
	"code": "ng",
	"name": "Ndonga"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vh2v2lEeSFtiimx_V4dw",
	"code": "oc",
	"name": "Occitan"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vhJv2lEeSFtiimx_V4dw",
	"code": "nd",
	"name": "North Ndebele"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vhYv2lEeSFtiimx_V4dw",
	"code": "no",
	"name": "Norwegian"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vhnv2lEeSFtiimx_V4dw",
	"code": "nn",
	"name": "Norwegian Nynorsk"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9viFv2lEeSFtiimx_V4dw",
	"code": "oj",
	"name": "Ojibwa"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9viUv2lEeSFtiimx_V4dw",
	"code": "cu",
	"name": "Old Church Slavonic / Old Bulgarian"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vimP2lEeSFtiimx_V4dw",
	"code": "or",
	"name": "Oriya"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9viyv2lEeSFtiimx_V4dw",
	"code": "om",
	"name": "Oromo"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vj7P2lEeSFtiimx_V4dw",
	"code": "ff",
	"name": "Peul"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vjBv2lEeSFtiimx_V4dw",
	"code": "os",
	"name": "Ossetian"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vjQv2lEeSFtiimx_V4dw",
	"code": "pi",
	"name": "Pali"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vjfv2lEeSFtiimx_V4dw",
	"code": "ps",
	"name": "Pashto"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vjuv2lEeSFtiimx_V4dw",
	"code": "fa",
	"name": "Persian"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vk3P2lEeSFtiimx_V4dw",
	"code": "qu",
	"name": "Quechua"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vkKP2lEeSFtiimx_V4dw",
	"code": "pl",
	"name": "Polish"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vkZP2lEeSFtiimx_V4dw",
	"code": null,
	"name": "Portugese"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vkoP2lEeSFtiimx_V4dw",
	"code": "pa",
	"name": "Punjabi"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vl_v2lEeSFtiimx_V4dw",
	"code": "rw",
	"name": "Rwandi"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vlaP2lEeSFtiimx_V4dw",
	"code": "rm",
	"name": "Raeto Romance"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vlmv2lEeSFtiimx_V4dw",
	"code": "ro",
	"name": "Romanian"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vlzP2lEeSFtiimx_V4dw",
	"code": "ru",
	"name": "Russian"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vmMP2lEeSFtiimx_V4dw",
	"code": "sm",
	"name": "Samoan"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vn1P2lEeSFtiimx_V4dw",
	"code": "gd",
	"name": "Scottish Gaelic"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vnKv2lEeSFtiimx_V4dw",
	"code": "sg",
	"name": "Sango"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vnZv2lEeSFtiimx_V4dw",
	"code": "sa",
	"name": "Sanskrit"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vnmP2lEeSFtiimx_V4dw",
	"code": "sc",
	"name": "Sardinian"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vo4v2lEeSFtiimx_V4dw",
	"code": "sd",
	"name": "Sindhi"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9voEP2lEeSFtiimx_V4dw",
	"code": "sr",
	"name": "Serbian"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9voQv2lEeSFtiimx_V4dw",
	"code": "sh",
	"name": "Serbo-Croatian"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vodP2lEeSFtiimx_V4dw",
	"code": "sn",
	"name": "Shona"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vosP2lEeSFtiimx_V4dw",
	"code": "ii",
	"name": "Sichuan Yi"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vp8P2lEeSFtiimx_V4dw",
	"code": "nr",
	"name": "South Ndebele"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vpHv2lEeSFtiimx_V4dw",
	"code": "si",
	"name": "Sinhalese"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vpUP2lEeSFtiimx_V4dw",
	"code": "sk",
	"name": "Slovak"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vpgv2lEeSFtiimx_V4dw",
	"code": "sl",
	"name": "Slovenian"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vpvv2lEeSFtiimx_V4dw",
	"code": "so",
	"name": "Somali"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vqLP2lEeSFtiimx_V4dw",
	"code": "st",
	"name": "Southern Sotho"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vqXv2lEeSFtiimx_V4dw",
	"code": "es",
	"name": "Spanish"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vtYP2lEeSFtiimx_V4dw",
	"code": "su",
	"name": "Sundanese"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vtnP2lEeSFtiimx_V4dw",
	"code": "sw",
	"name": "Swahili"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vtzv2lEeSFtiimx_V4dw",
	"code": "ss",
	"name": "Swati"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vu3P2lEeSFtiimx_V4dw",
	"code": "ta",
	"name": "Tamil"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vuCv2lEeSFtiimx_V4dw",
	"code": "sv",
	"name": "Swedish"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vuPP2lEeSFtiimx_V4dw",
	"code": "tl",
	"name": "Tagalog"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vubv2lEeSFtiimx_V4dw",
	"code": "ty",
	"name": "Tahitian"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vuqv2lEeSFtiimx_V4dw",
	"code": "tg",
	"name": "Tajik"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vv4P2lEeSFtiimx_V4dw",
	"code": "ti",
	"name": "Tigrinya"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vvDv2lEeSFtiimx_V4dw",
	"code": "tt",
	"name": "Tatar"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vvQP2lEeSFtiimx_V4dw",
	"code": "te",
	"name": "Telugu"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vvfP2lEeSFtiimx_V4dw",
	"code": "th",
	"name": "Thai"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vvrv2lEeSFtiimx_V4dw",
	"code": "bo",
	"name": "Tibetan"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vw7v2lEeSFtiimx_V4dw",
	"code": "tk",
	"name": "Turkmen"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vwHP2lEeSFtiimx_V4dw",
	"code": "to",
	"name": "Tonga"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vwTv2lEeSFtiimx_V4dw",
	"code": "ts",
	"name": "Tsonga"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vwiv2lEeSFtiimx_V4dw",
	"code": "tn",
	"name": "Tswana"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vwvP2lEeSFtiimx_V4dw",
	"code": "tr",
	"name": "Turkish"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vxIP2lEeSFtiimx_V4dw",
	"code": "tw",
	"name": "Twi"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vxXP2lEeSFtiimx_V4dw",
	"code": "ur",
	"name": "Urdu"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vx_P2lEeSFtiimx_V4dw",
	"code": "vi",
	"name": "Vietnamese"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vxjv2lEeSFtiimx_V4dw",
	"code": "ug",
	"name": "Uyghur"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vxwP2lEeSFtiimx_V4dw",
	"code": "ve",
	"name": "Venda"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vyLv2lEeSFtiimx_V4dw",
	"code": "vo",
	"name": "Volapük"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vyav2lEeSFtiimx_V4dw",
	"code": "wa",
	"name": "Walloon"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vynP2lEeSFtiimx_V4dw",
	"code": "cy",
	"name": "Welsh"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vyzv2lEeSFtiimx_V4dw",
	"code": "fy",
	"name": "West Frisian"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vzCv2lEeSFtiimx_V4dw",
	"code": "wo",
	"name": "Wolof"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vzPP2lEeSFtiimx_V4dw",
	"code": "xh",
	"name": "Xhosa"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vzbv2lEeSFtiimx_V4dw",
	"code": "yi",
	"name": "Yiddish"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "-9vzqv2lEeSFtiimx_V4dw",
	"code": "yo",
	"name": "Yoruba"
},
{
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "3sYTbZcQQDig4jSSYIuH7A",
	"code": "kek",
	"name": "Q’eqchi’"
},
{
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "E5VRsTHzR3GUKGcPAWZT-Q",
	"code": "mam",
	"name": "Mam"
},
{
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "Ory8fkpLRRSbnSf0K8_WeA",
	"code": "cab",
	"name": "Garifuna"
},
{
	"__ver": "sys:1",
	"_class": "Language",
	"_id": "wrR1NSqvQ_qVsXiJKkA_xw",
	"code": "quc",
	"name": "K’iche’"
},
{
	"__disp": "ImageResource.serveContent",
	"__ver": "sys:1",
	"_class": "MemberFunction",
	"_id": "1uza6hDGSvSEzgX0ls6QzQ",
	"applies_to": "server",
	"business_object": {
		"_disp": "ImageResource",
		"_id": "9nPBq3cpRbm5MyhyxSnZjA"
	},
	"function": "function (res) {\n    var myContent = this.content;\n    \n    if(myContent && myContent.type && myContent.data) {\n      res.type(myContent.type);\n\n      var dataUri = myContent.data;\n      var commaPos = dataUri.indexOf(',');\n      return res.send(new Buffer(dataUri.substring(commaPos+1), 'base64'));\n    }\n    else {\n        throw new Error('missing content');\n    }\n}",
	"is_static": false,
	"name": "serveContent",
	"use_injection": false
},
{
	"__disp": "FileResource.serveContent",
	"__ver": "sys:1",
	"_class": "MemberFunction",
	"_id": "BK1V0jTiSqiA28ztAXUxog",
	"applies_to": "server",
	"business_object": {
		"_disp": "FileResource",
		"_id": "LHh5ZfA6Swq6cHb3CcmCgA"
	},
	"function": "function (db) {\n    \n    return function(res) {\n        var wr = this;\n        var fileId = wr.content.attachment_id;\n        \n        var onError = function(err)  {\n            throw err;\n        }\n        \n        console.log('getting file %s', fileId);\n        return db._svc.GridFsService.getFile(fileId).then(function(f) {\n    \n          res.type(f.metadata.type);\n          var rs = f.readstream;\n    \n          rs.on('error', onError);\n          rs.setEncoding('base64');\n          rs.on('data', function(chunk) {\n            res.write(chunk, 'base64');\n          });\n          rs.on('end', function() {\n            res.end();\n          });\n        });\n    }\n\n}",
	"is_static": false,
	"name": "serveContent",
	"use_injection": true
},
{
	"__disp": "CssResource.serveContent",
	"__ver": "sys:2",
	"_class": "MemberFunction",
	"_id": "M_T8-yHuSC-b4WXHp3K3OQ",
	"applies_to": "server",
	"business_object": {
		"_disp": "CssResource",
		"_id": "_7EZRGUeRYaiyU-YSZonhQ"
	},
	"function": "function (res) {\n    res.type('css');\n    var content;\n    if(this.preprocessor !== 'css' && this.compiled_content) {\n        content = this.compiled_content;\n    }\n    else {\n        content = this.content;\n    }\n    return res.send(content);\n}",
	"is_static": false,
	"name": "serveContent",
	"use_injection": false
},
{
	"__disp": "AngularModule.serveContent",
	"__ver": "sys:19",
	"_class": "MemberFunction",
	"_id": "RSc8RWl_RCa0rJgZAQae5w",
	"applies_to": "server",
	"business_object": {
		"_disp": "AngularModule",
		"_id": "G6NlMXjRQEeiqdsC6PP-Dw"
	},
	"function": "function (db, _, Q) {\n    \n    return function(outStream) {\n        console.log('AngularModule.serveContent(...)');\n        \n        var moduleObj = this;\n        var moduleId = this._id;\n        // var qry = {'module._id':moduleId};\n        \n        // return Q.all([\n        //     db.AngularDirective.find(qry).exec(),\n        //     db.AngularProvider.find(qry).exec()\n        // ])\n        return db.AngularProvider.find({'module._id':moduleId})\n        .then(function(providers) {\n            \n            console.log('  providers count: %s', providers.length);\n            \n            if(typeof outStream.type === 'function') {\n                outStream.type('application/javascript');\n            }\n            \n            \n            //A tiny bit of code-generation for module dependency list:\n            var depArr = '';\n            var comma = '';\n            if(moduleObj.external_mod_dependencies && moduleObj.external_mod_dependencies.length) {\n                depArr = '\\''+moduleObj.external_mod_dependencies.join('\\',\\'')+'\\'';\n                comma = ',';\n            }\n            \n            if(moduleObj.mod_dependencies && moduleObj.mod_dependencies.length) {\n                _.forEach(moduleObj.mod_dependencies, function(dep) {\n                    depArr += comma+'\\''+dep.name+'\\'';\n                    comma = ',';\n                })\n            }\n            \n            //A little more code-generation...\n            \n            outStream.write(\n                \"'use strict';\\n\"+\n                \"angular.module('\"+moduleObj.name+\"', [\"+depArr+\"])\\n\"\n            );\n            \n            if(moduleObj.config_function) {\n                outStream.write(\n                    '.config('+moduleObj.config_function+')\\n'\n                );\n            }\n            \n            _.forEach(providers, function(providerObj) { \n                //Build up the proper call to the angular module api: \n                // e.g. .factory('factory_name', ['param1', 'param2', function(...) {}] )\n                \n                var curr = '.'+providerObj.type+'(\\''+providerObj.name+'\\', ';\n                var suffix = ')\\n\\n';\n                if(providerObj.parameters && providerObj.parameters.length) {\n                    curr += '[\\''+providerObj.parameters.join('\\',\\'')+'\\',';\n                    suffix = ']'+suffix;\n                }\n                curr += providerObj.function + suffix;\n                \n                outStream.write(curr);\n            });\n            \n            return outStream.end();\n            \n            // res.type('application/javascript');\n            // return res.send(toSend);    \n        });\n        \n        \n    }\n}",
	"is_static": false,
	"name": "serveContent",
	"use_injection": true
},
{
	"__disp": "JsonResource.serveContent",
	"__ver": "sys:1",
	"_class": "MemberFunction",
	"_id": "Rk-_b0GMSI2IrwAJjZwqzw",
	"applies_to": "server",
	"business_object": {
		"_disp": "JsonResource",
		"_id": "iLfiQteMQQ-daJIeQ37y5w"
	},
	"function": "function (outStream, nodeRequire) {\n    //If outStream is an http response, set content-type appropriately\n    if(typeof outStream.type === 'function') {\n        outStream.type('application/json');\n    }\n    outStream.write(JSON.stringify(this.content));\n    return outStream.end();\n}",
	"is_static": false,
	"name": "serveContent",
	"use_injection": false
},
{
	"__disp": "JsResource.serveContent",
	"__ver": "sys:6",
	"_class": "MemberFunction",
	"_id": "bcle51paSiSQ9WaJ1uBxRQ",
	"applies_to": "server",
	"business_object": {
		"_disp": "JsResource",
		"_id": "8q-MORjBS3qC0Dwh6dTIkw"
	},
	"function": "function (outStream, nodeRequire) {\n    //If outStream is an http response, set content-type appropriately\n    if(typeof outStream.type === 'function') {\n        outStream.type('application/javascript');\n    }\n    outStream.write(this.content);\n    return outStream.end();\n}",
	"is_static": false,
	"name": "serveContent",
	"use_injection": false
},
{
	"__disp": "AngularApp.serveContent",
	"__ver": "sys:36",
	"_class": "MemberFunction",
	"_id": "d-IVhuAdQlilU16t8Xyd-w",
	"applies_to": "server",
	"business_object": {
		"_disp": "AngularApp",
		"_id": "IhXNqXAyQiqGk28iCotr0Q"
	},
	"function": "function (db, Q, _, config) {\n    /**\n     * AngularApp.serveContent\n     * \n     */ \n    return function (outStream) {\n        var appObj = this;\n        var myPath = this.path;\n        var moduleObj;\n        \n        var initialPromise;\n        if(appObj.module) {\n            initialPromise = db.AngularModule.findOne({_id:appObj.module._id}).exec();\n        }\n        else {\n            initialPromise = Q(false);\n        }\n        \n        return initialPromise.then(function(result) {\n            if(result) {\n                moduleObj = result;\n                return moduleObj.getDependencyTags();\n            }\n            else {\n                return {css:'',js:''};\n            }\n        })\n        .then(function(moduleDepTags) {\n            \n            if(typeof outStream.type === 'function') {\n                outStream.type('html');\n            }\n            \n            var moduleName = moduleObj ? moduleObj.name : appObj._id;\n            \n            var header = '<!doctype html>';\n            \n            header += '<html ng-app=\"'+moduleName+'\">';\n            \n            \n            header += '<head>'\n            header += '<base href=\"'+config.serverConf.urlBase+'/\">';\n            \n            header += moduleDepTags.css; //Css dependencies of AngularModule's\n            \n            header += appObj.head+'\\n';\n            \n            outStream.write(header);\n            \n            if(appObj.css_dependencies && appObj.css_dependencies.length) {\n                _.forEach(appObj.css_dependencies, function(cssDep) {\n                    outStream.write('<link rel=\"stylesheet\" href=\"'+cssDep.path+'/'+cssDep.name+'\">\\n');\n                });\n            }\n            \n            outStream.write('</head>');\n            \n            outStream.write('<body>'+appObj.body+'\\n'+moduleDepTags.js+'\\n');\n            \n            if(appObj.js_dependencies && appObj.js_dependencies.length) {\n                _.forEach(appObj.js_dependencies, function(jsDep) {\n                    outStream.write('<script src=\"'+jsDep.path+'/'+jsDep.name+'\"></script>\\n');\n                });\n            }\n            \n            if(appObj.config_function) {\n                outStream.write('<script type=\"text/javascript\">\\n');\n                \n                outStream.write('angular.module(');\n                if(moduleObj) {\n                    outStream.write('\\''+moduleName+'\\'');\n                }\n                else{\n                    outStream.write('\\''+moduleName+'\\', []');\n                }\n                outStream.write(').config('+appObj.config_function+');\\n');\n                \n                outStream.write('</script>');\n            }\n            \n            outStream.write('</body></html>');\n            \n            return outStream.end();\n            \n        });\n        \n    }\n}",
	"is_static": false,
	"name": "serveContent",
	"use_injection": true
},
{
	"__disp": "AngularTemplate.serveContent",
	"__ver": "sys:1",
	"_class": "MemberFunction",
	"_id": "gmqHd9JrSjGwXTnXsBsIPw",
	"applies_to": "server",
	"business_object": {
		"_disp": "AngularTemplate",
		"_id": "pzaSsQYLT7uvOx6Trp1wMw"
	},
	"function": "function (res) {\n    res.type('html');\n    return res.send(this.content);\n}",
	"is_static": false,
	"name": "serveContent",
	"use_injection": false
},
{
	"__disp": "AngularModule.getDependencyTags",
	"__ver": "sys:12",
	"_class": "MemberFunction",
	"_id": "t14zSWV5SPa7k6brh4HFxg",
	"applies_to": "server",
	"business_object": {
		"_disp": "AngularModule",
		"_id": "G6NlMXjRQEeiqdsC6PP-Dw"
	},
	"function": "function (db, Q, _) {\n\n    \n    return function() {\n        var deferred = Q.defer();\n        \n        var moduleObj = this;\n        \n        \n        var myTag = '<script src=\"'+this.path+'/'+this.name+'\"></script>\\n';\n        \n        var jsDepTags = '';\n        var cssDepTags = '';\n        \n        //Start with my own JS dependencies:\n       if(moduleObj.js_dependencies && moduleObj.js_dependencies.length) {\n            _.forEach(moduleObj.js_dependencies, function(dep) {\n                // var depPath = PathTool.computeRelativePath(dep.path, relativeToPath);\n                jsDepTags += '<script src=\"'+dep.path+'/'+dep.name+'\"></script>\\n';\n            });\n        }\n        \n        //... and my own CSS dependencies:\n        if(moduleObj.css_dependencies && moduleObj.css_dependencies.length) {\n            _.forEach(moduleObj.css_dependencies, function(dep) {\n                // var depPath = PathTool.computeRelativePath(dep.path, relativeToPath);\n                cssDepTags += '<link rel=\"stylesheet\" href=\"'+dep.path+'/'+dep.name+'\"></link>\\n';\n            });\n        }\n        \n        //Now, recursively gather dependencies of the AngularModules on which I depend:\n        if(moduleObj.mod_dependencies && moduleObj.mod_dependencies.length) {\n            //Put id's in a list, retaining ordering of mod_dependencies field\n            var idList = [];\n            _.forEach(moduleObj.mod_dependencies, function(modRef) {\n                idList.push(modRef._id);\n            });\n            \n            db.AngularModule.find({_id:{$in:idList}}).then(function(depList) {\n                var depMap = {};\n               _.forEach(depList, function(dep) {\n                   depMap[dep._id] = dep;\n               });\n               \n               //Recursive call to grab tags for AngularModuleDependencies, in proper order\n               var promiseList = [];\n               _.forEach(idList, function(depId) {\n                   promiseList.push(depMap[depId].getDependencyTags());\n               });\n               \n               Q.all(promiseList).then(function(recursiveCallResultArr) {\n                   //recursiveCallResultArr contains dependency subtrees' tags...\n                   \n                   var jsTagList = [];\n                   var cssTagList = [];\n                   \n                   //First, pull in the tags for my dependencies\n                   _.forEach(recursiveCallResultArr, function(depTag) {\n                        if(depTag && depTag.js) {\n                            jsTagList.push(depTag.js); \n                        }\n                        if(depTag && depTag.css) {\n                            cssTagList.push(depTag.css);\n                        }\n                   });\n                   \n                   if(jsDepTags) {\n                       jsTagList.push(jsDepTags);\n                   }\n                   if(cssDepTags) {\n                       cssTagList.push(cssDepTags);\n                   }\n                   \n                   //Finally, my own AngularModule script\n                   jsTagList.push(myTag);\n                   \n                   deferred.resolve({js:jsTagList.join('\\n'), css:cssTagList.join('\\n')});\n                   \n               });\n               \n                \n            });\n        }\n        else {\n            //No module dependencies\n            deferred.resolve({js:jsDepTags+myTag, css:cssDepTags});\n        }\n        \n        return deferred.promise;\n    }\n}",
	"is_static": false,
	"name": "getDependencyTags",
	"use_injection": true
},
{
	"__disp": "HtmlResource.serveContent",
	"__ver": "sys:1",
	"_class": "MemberFunction",
	"_id": "tDmzVEMjQ0Ky1lpYoLnvCQ",
	"applies_to": "server",
	"business_object": {
		"_disp": "HtmlResource",
		"_id": "9lfB2NHJQdGXiCADh019SQ"
	},
	"function": "function (res) {\n    res.type('html');\n    return res.send(this.content);\n}",
	"is_static": false,
	"name": "serveContent",
	"use_injection": false
},
{
	"__ver": "sys:2",
	"_class": "Menu",
	"_id": "AXmX40RPTXC56BjTfuMyUA",
	"definition": [
		{
			"action": {
				"params": {
					"className": "Config",
					"perspective": "perspectives"
				},
				"state": "dbui.list"
			},
			"label": "perspectives"
		},
		{
			"action": {
				"params": {
					"className": "Menu",
					"perspective": "default"
				},
				"state": "dbui.list"
			},
			"label": "menus"
		},
		{
			"action": {
				"params": {
					"className": "DbuiCustomPage",
					"perspective": "default"
				},
				"state": "dbui.list"
			},
			"label": "custom_pages"
		},
		{
			"action": {
				"params": {
					"className": "UiAction",
					"perspective": "default"
				},
				"state": "dbui.list"
			},
			"label": "ui_actions"
		}
	],
	"key": "dbui.menu.dev_dbui_cust",
	"rolespec": [
		"FnQ_eBYITOSC8kJA4Zul5g"
	]
},
{
	"__ver": "sys:2",
	"_class": "Menu",
	"_id": "CEDPhAZiSOCkHHBZANtoPA",
	"definition": [
		{
			"action": {
				"params": {
					"className": "Config",
					"perspective": "non_perspectives"
				},
				"state": "dbui.list"
			},
			"label": "config"
		},
		{
			"action": {
				"params": {
					"className": "User",
					"perspective": "default"
				},
				"state": "dbui.list"
			},
			"label": "users"
		},
		{
			"action": {
				"params": {
					"className": "Role",
					"perspective": "default"
				},
				"state": "dbui.list"
			},
			"label": "roles"
		},
		{
			"action": {
				"params": {
					"className": "DataAccessControl",
					"perspective": "default"
				},
				"state": "dbui.list"
			},
			"label": "dac"
		}
	],
	"key": "dbui.menu.dev_admin",
	"rolespec": [
		"FnQ_eBYITOSC8kJA4Zul5g"
	]
},
{
	"__ver": "sys:4",
	"_class": "Menu",
	"_id": "RnuXn3mXQiKUO604UiGN9Q",
	"definition": [
		{
			"action": {
				"params": {
					"className": "AngularApp",
					"perspective": "default"
				},
				"state": "dbui.list"
			},
			"label": "apps"
		},
		{
			"action": {
				"params": {
					"className": "AngularModule",
					"perspective": "default"
				},
				"state": "dbui.list"
			},
			"label": "modules"
		},
		{
			"action": {
				"params": {
					"className": "AngularTemplate",
					"perspective": "default"
				},
				"state": "dbui.list"
			},
			"label": "templates"
		},
		{
			"action": {
				"params": {
					"className": "AngularProvider",
					"perspective": "factories"
				},
				"state": "dbui.list"
			},
			"label": "factories"
		},
		{
			"action": {
				"params": {
					"className": "AngularProvider",
					"perspective": "controllers"
				},
				"state": "dbui.list"
			},
			"label": "controllers"
		},
		{
			"action": {
				"params": {
					"className": "AngularProvider",
					"perspective": "directives"
				},
				"state": "dbui.list"
			},
			"label": "directives"
		},
		{
			"action": {
				"params": {
					"className": "AngularProvider",
					"perspective": "filters"
				},
				"state": "dbui.list"
			},
			"label": "filters"
		}
	],
	"key": "dbui.menu.dev_angular",
	"rolespec": [
		"FnQ_eBYITOSC8kJA4Zul5g"
	]
},
{
	"__ver": "sys:2",
	"_class": "Menu",
	"_id": "X1w4NWaxT2euz8uKoVzrXg",
	"definition": [
		{
			"action": {
				"params": {
					"className": "HtmlResource",
					"perspective": "default"
				},
				"state": "dbui.list"
			},
			"label": "html"
		},
		{
			"action": {
				"params": {
					"className": "CssResource",
					"perspective": "default"
				},
				"state": "dbui.list"
			},
			"label": "css"
		},
		{
			"action": {
				"params": {
					"className": "JsResource",
					"perspective": "default"
				},
				"state": "dbui.list"
			},
			"label": "js"
		},
		{
			"action": {
				"params": {
					"className": "ImageResource",
					"perspective": "default"
				},
				"state": "dbui.list"
			},
			"label": "image"
		},
		{
			"action": {
				"params": {
					"className": "JsonResource",
					"perspective": "default"
				},
				"state": "dbui.list"
			},
			"label": "json"
		},
		{
			"action": {
				"params": {
					"className": "FileResource",
					"perspective": "default"
				},
				"state": "dbui.list"
			},
			"label": "file"
		}
	],
	"key": "dbui.menu.dev_webresource",
	"rolespec": [
		"FnQ_eBYITOSC8kJA4Zul5g"
	]
},
{
	"__ver": "sys:5",
	"_class": "Menu",
	"_id": "kRvYH_xNQWGDwhBiTCx1KQ",
	"definition": [
		{
			"action": {
				"params": {
					"className": "BusinessObjectDef",
					"perspective": "default"
				},
				"state": "dbui.list"
			},
			"label": "bods"
		},
		{
			"action": {
				"params": {
					"className": "DataTrigger",
					"perspective": "default"
				},
				"state": "dbui.list"
			},
			"label": "datatriggers"
		},
		{
			"action": {
				"params": {
					"className": "CodeModule",
					"perspective": "default"
				},
				"state": "dbui.list"
			},
			"label": "codemodules"
		},
		{
			"action": {
				"params": {
					"className": "WebService",
					"perspective": "default"
				},
				"state": "dbui.list"
			},
			"label": "webservices"
		},
		{
			"action": {
				"params": {
					"className": "Enumeration",
					"perspective": "default"
				},
				"state": "dbui.list"
			},
			"label": "enumerations"
		},
		{
			"action": {
				"params": {
					"className": "LabelGroup",
					"perspective": "default"
				},
				"state": "dbui.list"
			},
			"label": "labelgroups"
		}
	],
	"key": "dbui.menu.dev_serverside",
	"rolespec": [
		"FnQ_eBYITOSC8kJA4Zul5g"
	]
},
{
	"__ver": "sys:10",
	"_class": "Menu",
	"_id": "p_WVIZErQimM-X_lf_6oOQ",
	"definition": [
		{
			"isOpen": true,
			"ref": "dbui.menu.dev_serverside"
		},
		{
			"ref": "dbui.menu.dev_dbui_cust"
		},
		{
			"ref": "dbui.menu.dev_webresource"
		},
		{
			"ref": "dbui.menu.dev_angular"
		},
		{
			"ref": "dbui.menu.dev_admin"
		}
	],
	"key": "dbui.menu.dev",
	"rolespec": [
		"FnQ_eBYITOSC8kJA4Zul5g"
	]
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Menu",
	"_id": "qHIq7pPjQgG4R_owGIU85Q",
	"definition": [
		{
			"action": {
				"params": {
					"key": "dbui.core.user_profile"
				},
				"state": "dbui.custompage"
			},
			"label": "password_change"
		}
	],
	"key": "dbui.menu.user",
	"rolespec": [
	]
},
{
	"__ver": "sys:2",
	"_class": "Menu",
	"_id": "qPRQBy6cQ3Oae_PhBpzN2g",
	"definition": [
		{
			"ref": "dbui.menu.user"
		}
	],
	"key": "dbui.menu.default_user",
	"rolespec": [
	]
},
{
	"__ver": "sys:1",
	"_class": "QueryOp",
	"_id": "5VU7BvKZRRG2dH3kfZVxYA",
	"evaluate": "function (expressionValue, testValue) {\n    return testValue > expressionValue;\n}",
	"for_array": false,
	"name": "$gt",
	"stringify": "function (expressionValue) {\n    return \"is greater than \"+expressionValue;\n}",
	"types": [
		{
			"_disp": "integer",
			"_id": "gxJBuQp7RkKLIV0cazfFnA"
		},
		{
			"_disp": "float",
			"_id": "EaQUGA7oS7qKanG4QbvYbQ"
		}
	]
},
{
	"__ver": "sys:1",
	"_class": "QueryOp",
	"_id": "5rnL4pEBS_mXnb6ukXlYTg",
	"evaluate": "function (expressionValue, testValue) {\n        \n    if(testValue && testValue instanceof Array) {\n        for(var i=0; i < testValue.length; i++) {\n            if(testValue[i] === expressionValue)\n                return true;\n        }\n    }   \n    return false;\n}",
	"for_array": true,
	"name": "$contains",
	"stringify": "function (expressionValue) {\n    return 'contains '+expressionValue;\n}",
	"toMongo": "function (fieldName, clause) {\n    var result = {};\n    result[fieldName] = {$eq:clause};\n    return result;\n}",
	"types": [
	]
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "QueryOp",
	"_id": "6RPTYsHJS_2kW_jh0y2XrQ",
	"evaluate": "function (expressionValue, testValue) {\n    return expressionValue == testValue;\n}",
	"for_array": false,
	"name": "$eq",
	"stringify": "function (expressionValue) {\n    return \"= '\"+expressionValue+\"'\";\n}",
	"toMongo": null,
	"types": [
		{
			"_disp": "string",
			"_id": "ZD_vX9d-RLqxGTOdZntz6Q"
		},
		{
			"_disp": "email",
			"_id": "S8eHnlXxQJqIPLM2q8HniQ"
		},
		{
			"_disp": "phone",
			"_id": "DDssakmDQoeACryXT377xw"
		},
		{
			"_disp": "url",
			"_id": "JMHHYAPlSgKuC5alDvehWA"
		},
		{
			"_disp": "path",
			"_id": "9_TB_-ppQnCpm3EKkO8naw"
		},
		{
			"_disp": "enum",
			"_id": "z_2NESmpQ-29ACeUMhflNQ"
		},
		{
			"_disp": "integer",
			"_id": "gxJBuQp7RkKLIV0cazfFnA"
		},
		{
			"_disp": "float",
			"_id": "EaQUGA7oS7qKanG4QbvYbQ"
		},
		{
			"_disp": "date",
			"_id": "nplFum9LRdWvt5TW1LyulQ"
		},
		{
			"_disp": "time",
			"_id": "uavtEE5AT2q5WcEcsWYTpw"
		}
	]
},
{
	"__pkg": "sys",
	"__ver": "sys:2",
	"_class": "QueryOp",
	"_id": "7OTRucYDT6CZbe48ouvuRA",
	"evaluate": "function (expressionValue, testValue) {\n    return testValue < expressionValue;\n}",
	"for_array": false,
	"name": "$lt",
	"stringify": "function (expressionValue) {\n    return \"is less than '\"+expressionValue+\"'\";\n}",
	"types": [
		{
			"_disp": "string",
			"_id": "ZD_vX9d-RLqxGTOdZntz6Q"
		},
		{
			"_disp": "email",
			"_id": "S8eHnlXxQJqIPLM2q8HniQ"
		},
		{
			"_disp": "phone",
			"_id": "DDssakmDQoeACryXT377xw"
		},
		{
			"_disp": "url",
			"_id": "JMHHYAPlSgKuC5alDvehWA"
		},
		{
			"_disp": "path",
			"_id": "9_TB_-ppQnCpm3EKkO8naw"
		},
		{
			"_disp": "integer",
			"_id": "gxJBuQp7RkKLIV0cazfFnA"
		},
		{
			"_disp": "float",
			"_id": "EaQUGA7oS7qKanG4QbvYbQ"
		}
	]
},
{
	"__pkg": "sys",
	"__ver": "sys:2",
	"_class": "QueryOp",
	"_id": "9QBc1ld5SvG5tZ7M06gXnQ",
	"evaluate": "function (expressionValue, testValue) {\n    //testValue is before expressionValue?\n    var expDate = new Date(expressionValue);\n    var testDate = testValue;\n    if(!(testDate instanceof Date)) {\n        testDate = new Date(testValue);\n    }\n    \n    return testDate.getTime() < expDate.getTime();\n}",
	"for_array": false,
	"name": "$before",
	"stringify": "function (expressionValue, typeDesc) {\n    // var d = new Date(expressionValue);\n    // var month = d.getMonth()+1;\n    // var day = d.getDate();\n    // var year = d.getFullYear();\n    \n    // var formattedDate = ''+month+'/'+day+'/'+year;\n    return \"is before \"+expressionValue;\n}",
	"toMongo": "function (fieldName, clause) {\n    var ret = {};\n    // var datestr = clause.toISOString ? clause.toISOString() : clause;\n    ret[fieldName] = {$lte:clause};\n    return ret;\n    \n}",
	"types": [
		{
			"_disp": "date",
			"_id": "nplFum9LRdWvt5TW1LyulQ"
		},
		{
			"_disp": "datetime",
			"_id": "SRrCNHZCTvW6sTMtR3a0iQ"
		},
		{
			"_disp": "time",
			"_id": "uavtEE5AT2q5WcEcsWYTpw"
		}
	]
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "QueryOp",
	"_id": "Fg065eAnQCWCYnprkIOzmQ",
	"evaluate": "function (clause, value) {\n    return value == true;\n}",
	"for_array": false,
	"name": "$istrue",
	"stringify": "function () {\n    return \"is true\";\n}",
	"toMongo": "function (fieldName, clause) {\n    var ret = {};\n    ret[fieldName] = {$eq:true};\n    return ret;\n}",
	"types": [
		{
			"_disp": "boolean",
			"_id": "WiUvP7txRQiF6tPM9FpFIw"
		}
	]
},
{
	"__ver": "sys:1",
	"_class": "QueryOp",
	"_id": "GAH5UsVYQ8-7Rex6HOo3aA",
	"evaluate": "function (expressionValue, testValue) {\n    //is testValue a child of expressionValue ->\n    // e.g. expressionValue='some.path', testValue='some.path.deeper'\n    if(testValue) {\n        return (''+testValue).indexOf(expressionValue) === 0;\n    }\n    \n    return false;\n}",
	"for_array": false,
	"name": "$childOf",
	"stringify": "function (expressionValue) {\n    return \"child of '\"+expressionValue+\"'\";\n}",
	"toMongo": "function (fieldName, clause) {\n    var ret = {};\n    ret[fieldName] = {$regex:'^'+clause};\n    return ret;\n}",
	"types": [
		{
			"_disp": "path",
			"_id": "9_TB_-ppQnCpm3EKkO8naw"
		}
	]
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "QueryOp",
	"_id": "Ga845hr7TvOvAA5hLSs77A",
	"evaluate": "function (expressionValue, testValue) {\n    return expressionValue != testValue;\n}",
	"for_array": false,
	"name": "$ne",
	"stringify": "function (expressionValue) {\n    return \"not equal to '\"+expressionValue+\"'\";\n}",
	"types": [
		{
			"_disp": "string",
			"_id": "ZD_vX9d-RLqxGTOdZntz6Q"
		},
		{
			"_disp": "email",
			"_id": "S8eHnlXxQJqIPLM2q8HniQ"
		},
		{
			"_disp": "phone",
			"_id": "DDssakmDQoeACryXT377xw"
		},
		{
			"_disp": "url",
			"_id": "JMHHYAPlSgKuC5alDvehWA"
		},
		{
			"_disp": "path",
			"_id": "9_TB_-ppQnCpm3EKkO8naw"
		},
		{
			"_disp": "enum",
			"_id": "z_2NESmpQ-29ACeUMhflNQ"
		},
		{
			"_disp": "integer",
			"_id": "gxJBuQp7RkKLIV0cazfFnA"
		},
		{
			"_disp": "float",
			"_id": "EaQUGA7oS7qKanG4QbvYbQ"
		}
	]
},
{
	"__pkg": "sys",
	"__ver": "sys:2",
	"_class": "QueryOp",
	"_id": "N-PdnQsoQUGvHJV2XkqiUw",
	"evaluate": "function (expressionValue, testValue) {\n    if(testValue)\n        return (''+testValue).indexOf(expressionValue) === -1;\n    else\n        return true;\n}",
	"for_array": false,
	"name": "$notcontains",
	"stringify": "function (expressionValue) {\n    return \"does not contain '\"+expressionValue+\"'\";\n}",
	"toMongo": "function (fieldName, clause) {\n    var ret = {};\n    ret[fieldName] = { $not: new RegExp(clause) };\n    return ret;\n}",
	"types": [
		{
			"_disp": "string",
			"_id": "ZD_vX9d-RLqxGTOdZntz6Q"
		},
		{
			"_disp": "email",
			"_id": "S8eHnlXxQJqIPLM2q8HniQ"
		},
		{
			"_disp": "phone",
			"_id": "DDssakmDQoeACryXT377xw"
		},
		{
			"_disp": "url",
			"_id": "JMHHYAPlSgKuC5alDvehWA"
		},
		{
			"_disp": "path",
			"_id": "9_TB_-ppQnCpm3EKkO8naw"
		},
		{
			"_disp": "text",
			"_id": "Qywi2S8xT86_tQl4leIXNA"
		},
		{
			"_disp": "jsdoc",
			"_id": "EqIuGj81QTyVDFA7qRQNHg"
		}
	]
},
{
	"__ver": "sys:3",
	"_class": "QueryOp",
	"_id": "Q8zKUPQpQ463QrxTG3Fo2Q",
	"evaluate": "function (expressionValue, testValue) {\n    return testValue === null || testValue === undefined;\n}",
	"for_array": false,
	"name": "$empty",
	"stringify": "function () {\n    return \"is empty\";\n}",
	"toMongo": "function (fieldName) {\n    var ret = {$or:[{},{}]};\n    ret.$or[0][fieldName] = {$exists:false};\n    ret.$or[1][fieldName] = null;\n    return ret;\n}",
	"types": [
		{
			"_disp": "boolean",
			"_id": "WiUvP7txRQiF6tPM9FpFIw"
		}
	]
},
{
	"__pkg": "sys",
	"__ver": "sys:8",
	"_class": "QueryOp",
	"_id": "UJ2ZLOfVTYa8BGzohg9QKg",
	"evaluate": "function (expressionValue, testValue) {\n    return testValue == null || testValue == '';\n}",
	"for_array": false,
	"name": "$empty",
	"stringify": "function () {\n    return \"is empty\";\n}",
	"toMongo": "function (fieldName) {\n    var ret = {$or:[]};\n    \n    var innerClause = {};\n    innerClause[fieldName] = {$exists:false};\n    ret.$or.push(innerClause);\n    \n    innerClause = {};\n    innerClause[fieldName] = null;\n    ret.$or.push(innerClause);\n    \n    innerClause = {};\n    innerClause[fieldName] = '';\n    ret.$or.push(innerClause);\n    \n    return ret;\n}",
	"types": [
	]
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "QueryOp",
	"_id": "X0qnD1lBQUy1B_7v2gOAdg",
	"evaluate": "function (expressionValue, testValue) {\n    var expId = expressionValue;\n    var testId = testValue;\n    \n    if(expressionValue && expressionValue._id)\n        expId = expressionValue._id;\n    if(testValue && testValue._id)\n        testId = testValue._id;\n        \n    return expId === testId;\n}",
	"for_array": false,
	"name": "$eq",
	"stringify": "function (expressionValue, typeDesc) {\n    if(expressionValue && expressionValue._disp)\n        return '= '+expressionValue._disp;\n    else \n        return '= '+expressionValue;\n}",
	"toMongo": "function (fieldName, clause) {\n    var result = {};\n    var targetId = clause;\n    \n    if(clause && clause._id)\n        targetId = clause._id;\n    \n    result[fieldName+'._id'] = targetId;\n    return result;\n}",
	"types": [
		{
			"_disp": "reference",
			"_id": "bHeoPzsMScORdzjtX6GdoA"
		}
	]
},
{
	"__pkg": "sys",
	"__ver": "sys:2",
	"_class": "QueryOp",
	"_id": "XSLnZYP0QeudDfrQ0zpNxg",
	"evaluate": "function (expressionValue, testValue) {\n    return testValue != null || testValue.length > 0;\n}",
	"for_array": true,
	"name": "$notempty",
	"stringify": "function () {\n    return \"is not empty\";\n}",
	"toMongo": "function (fieldName) {\n    var ret = {$and:[]};\n    \n    var innerClause = {};\n    innerClause[fieldName] = {$exists:true};\n    ret.$and.push(innerClause);\n    \n    innerClause = {};\n    innerClause[fieldName] = {$ne:null};\n    ret.$and.push(innerClause);\n    \n    innerClause = {};\n    innerClause[fieldName] = {$not:{$size:0}};\n    ret.$and.push(innerClause);\n    \n    return ret;\n}",
	"types": [
	]
},
{
	"__ver": "sys:4",
	"_class": "QueryOp",
	"_id": "ZEhDBfiSSVWSThJ7JWDRVg",
	"evaluate": "function (expressionValue, testValue) {\n    //testValue is after expressionValue?\n    var minusDays = +expressionValue;\n    var expDate = new Date();\n    \n    expDate.setDate(expDate.getDate()-minusDays);\n    \n    var testDate = testValue;\n    if(!(testDate instanceof Date)) {\n        testDate = new Date(testValue);\n    }\n    \n    return testDate.getTime() > expDate.getTime();\n}",
	"for_array": false,
	"name": "$todayminus",
	"stringify": "function (expressionValue, typeDesc) {\n    return \"is after \"+expressionValue+' days ago';\n}",
	"toMongo": "function (fieldName, clause) {\n    var minusDays = +clause;\n    var d = new Date();\n    \n    d.setDate(d.getDate()-minusDays);\n    \n    var ret = {};\n    var parsed = /(\\d{4}-\\d{2}-\\d{2}).*/.exec(d.toISOString());\n    if(parsed && parsed[1]) {\n        var day = parsed[1];\n        \n        ret[fieldName] = {$gte:day};\n    }\n    \n    return ret;\n}",
	"types": [
		{
			"_disp": "date",
			"_id": "nplFum9LRdWvt5TW1LyulQ"
		},
		{
			"_disp": "datetime",
			"_id": "SRrCNHZCTvW6sTMtR3a0iQ"
		}
	]
},
{
	"__pkg": "sys",
	"__ver": "sys:4",
	"_class": "QueryOp",
	"_id": "aZG5D6MQQImi1DLsFHpegw",
	"evaluate": null,
	"for_array": false,
	"name": "$fulltextsearch",
	"stringify": "function (expressionValue, typeDesc) {\n    return 'Search results for \"'+expressionValue+'\"';\n}",
	"toMongo": "function (searchStr, typeDescMap, FieldTypeService) {\n\n    var retCond = {$or:[\n        {__disp:{$regex:searchStr, $options:'i'}}\n    ]};\n    var condList = retCond.$or;\n\n    for(var fieldName in typeDescMap) {\n        var td = typeDescMap[fieldName];\n        if(fieldName.indexOf('_') === 0)\n            continue;\n        \n        if(td instanceof Array) {\n            td = td[0];\n        }\n\n        var mongoType = FieldTypeService.getSchemaElem(td);\n\n        if(!mongoType) {\n          console.log(\"No typeMapper for \"+td.type+\" field \"+fieldName);\n          continue;\n        }\n        var newCond;\n        if(mongoType.textIndex) {\n            newCond = {};\n            newCond[fieldName] = {$regex:searchStr, $options:'i'};\n            condList.push(newCond);\n        }\n        else if(td.type === 'reference') {\n            newCond = {};\n            newCond[fieldName+'._disp'] = {$regex:searchStr, $options:'i'};\n            condList.push(newCond);\n        }\n\n    }\n    \n    return retCond;\n}",
	"types": [
	]
},
{
	"__ver": "sys:1",
	"_class": "QueryOp",
	"_id": "claxRaq5Sl6999g5ADvFBA",
	"evaluate": "function (expressionValue, testValue) {\n        \n    if(testValue && testValue instanceof Array) {\n        for(var i=0; i < testValue.length; i++) {\n            if(testValue[i] === expressionValue)\n                return false;\n        }\n    }   \n    return true;\n}",
	"for_array": true,
	"name": "$notcontains",
	"stringify": "function (expressionValue) {\n    return 'does not contain '+expressionValue;\n}",
	"toMongo": "function (fieldName, clause) {\n    var result = {};\n    result[fieldName] = {$not:{$eq:clause}};\n    return result;\n}",
	"types": [
	]
},
{
	"__pkg": "sys",
	"__ver": "sys:2",
	"_class": "QueryOp",
	"_id": "eOnt26G2TES8-45sIWf4lg",
	"evaluate": "function (expressionValue, testValue) {\n    return testValue == null || testValue.length === 0;\n}",
	"for_array": true,
	"name": "$empty",
	"stringify": "function () {\n    return \"is empty\";\n}",
	"toMongo": "function (fieldName) {\n    var ret = {$or:[]};\n    \n    var innerClause = {};\n    innerClause[fieldName] = {$exists:false};\n    ret.$or.push(innerClause);\n    \n    innerClause = {};\n    innerClause[fieldName] = null;\n    ret.$or.push(innerClause);\n    \n    innerClause = {};\n    innerClause[fieldName] = {$size:0};\n    ret.$or.push(innerClause);\n    \n    return ret;\n}",
	"types": [
	]
},
{
	"__pkg": "sys",
	"__ver": "sys:2",
	"_class": "QueryOp",
	"_id": "fS3K_3xCRByFHjbFDnpguw",
	"evaluate": "function (clause, value) {\n    return value === false;\n}",
	"for_array": false,
	"name": "$isfalse",
	"stringify": "function () {\n    return \"is false\";\n}",
	"toMongo": "function (fieldName, clause) {\n    var ret = {};\n    ret[fieldName] = {$eq:false};\n    return ret;\n}",
	"types": [
		{
			"_disp": "boolean",
			"_id": "WiUvP7txRQiF6tPM9FpFIw"
		}
	]
},
{
	"__pkg": "sys",
	"__ver": "sys:9",
	"_class": "QueryOp",
	"_id": "fsAeeW_cSkKcRq_Z1f3BFg",
	"evaluate": "function (expressionValue, testValue) {\n    return testValue != null && testValue != '';\n}",
	"for_array": false,
	"name": "$notempty",
	"stringify": "function () {\n    return \"is not empty\";\n}",
	"toMongo": "function (fieldName) {\n    \n    var ret = { $nor:[{},{},{}]};\n    \n    ret.$nor[0][fieldName] = {$exists:false};\n    ret.$nor[1][fieldName] = '';\n    ret.$nor[2][fieldName] = null;\n    \n    return ret;\n}",
	"types": [
	]
},
{
	"__pkg": "sys",
	"__ver": "sys:3",
	"_class": "QueryOp",
	"_id": "gk5NKp1mS5mukraeQEPXxw",
	"for_array": false,
	"name": "$satisfiedBy",
	"stringify": "function (expressionValue, typeDesc) {\n    return 'is satisfied by roles '+expressionValue;\n}",
	"toMongo": "function (fieldName, clause) {\n    //{ \"fieldName\":{$satisfiedBy:['role_id1','role_id2']} }\n    // roleSpec: ['role_id1', ...]\n    \n    var roleList = clause; \n    \n    //Create a query that says:\n    //  \"all reccords where field is empty \n    //     OR\n    //   field contains at least one of items in roleList\"\n    \n    var query = {$or:[{},{}]};\n    \n    //... where field is empty:\n    query.$or[0][fieldName] = {$exists:false};\n    query.$or[1][fieldName] = {$size:0};\n    \n\n    //... field contains at least one of items in roleList\n    if(roleList) {\n        for(var i=0; i < roleList.length; i++) {\n            var r = roleList[i];\n            var qc = {};\n            \n            if(r._id)\n                qc[fieldName] = r._id;\n            else \n                qc[fieldName] = r;\n                \n            query.$or.push(qc);\n        }\n    }\n    \n    return query;\n    \n}",
	"types": [
		{
			"_disp": "rolespec",
			"_id": "aeOhqBixSbigoy3yBkyScQ"
		}
	]
},
{
	"__ver": "sys:1",
	"_class": "QueryOp",
	"_id": "jsEir8gmRbicBtWdCGzjmA",
	"evaluate": "function (expressionValue, testValue) {\n    return testValue !== null && testValue !== undefined;\n}",
	"for_array": false,
	"name": "$notempty",
	"stringify": "function () {\n    return \"is not empty\";\n}",
	"toMongo": "function (fieldName) {\n    var ret = {$and:[{},{}]};\n    ret.$and[0][fieldName] = {$exists:true};\n    ret.$and[1][fieldName] = {$ne:null};\n    return ret;\n}",
	"types": [
		{
			"_disp": "boolean",
			"_id": "WiUvP7txRQiF6tPM9FpFIw"
		}
	]
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "QueryOp",
	"_id": "na9FEzBsQJaAwn_Hxx36-Q",
	"evaluate": "function (expressionValue, testValue) {\n    var expId = expressionValue;\n    \n    if(expressionValue && expressionValue._id)\n        expId = expressionValue._id;\n        \n    if(testValue && testValue instanceof Array) {\n        for(var i=0; i < testValue.length; i++) {\n            if(testValue[i]._id === expId)\n                return true;\n        }\n    }   \n    return false;\n}",
	"for_array": true,
	"name": "$contains",
	"stringify": "function (expressionValue) {\n    if(expressionValue && expressionValue._disp)\n        return 'contains '+expressionValue._disp;\n    else \n        return 'contains '+expressionValue;\n}",
	"toMongo": "function (fieldName, clause) {\n    var result = {};\n    var targetId = clause;\n    \n    if(clause && clause._id)\n        targetId = clause._id;\n    \n    result[fieldName+'._id'] = targetId;\n    return result;\n}",
	"types": [
		{
			"_disp": "reference",
			"_id": "bHeoPzsMScORdzjtX6GdoA"
		}
	]
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "QueryOp",
	"_id": "nzhqqWOrRLiLG_BmsdxMxA",
	"evaluate": "function (expressionValue, testValue) {\n    var expId = expressionValue;\n    var testId = testValue;\n    \n    if(expressionValue && expressionValue._id)\n        expId = expressionValue._id;\n    if(testValue && testValue._id)\n        testId = testValue._id;\n        \n    return expId !== testId;\n}",
	"for_array": false,
	"name": "$ne",
	"stringify": "function (expressionValue, typeDesc) {\n    if(expressionValue && expressionValue._disp)\n        return 'is not '+expressionValue._disp;\n    else \n        return 'is not '+expressionValue;\n}",
	"toMongo": "function (fieldName, clause) {\n    var result = {};\n    var targetId = clause;\n    \n    if(clause && clause._id)\n        targetId = clause._id;\n    \n    result[fieldName+'._id'] = {$ne:targetId};\n    return result;\n}",
	"types": [
		{
			"_disp": "reference",
			"_id": "bHeoPzsMScORdzjtX6GdoA"
		}
	]
},
{
	"__pkg": "sys",
	"__ver": "sys:2",
	"_class": "QueryOp",
	"_id": "tAVq-i-vR4q-TXmDgAtVhg",
	"evaluate": "function (expressionValue, testValue) {\n    if(testValue)\n        return (''+testValue).indexOf(expressionValue) > -1;\n    else\n        return false;\n}",
	"for_array": false,
	"name": "$contains",
	"stringify": "function (expressionValue) {\n    return \"contains '\"+expressionValue+\"'\";\n}",
	"toMongo": "function (fieldName, clause) {\n    var ret = {};\n    ret[fieldName] = {$regex:clause, $options:'i'};\n    return ret;\n}",
	"types": [
		{
			"_disp": "string",
			"_id": "ZD_vX9d-RLqxGTOdZntz6Q"
		},
		{
			"_disp": "email",
			"_id": "S8eHnlXxQJqIPLM2q8HniQ"
		},
		{
			"_disp": "phone",
			"_id": "DDssakmDQoeACryXT377xw"
		},
		{
			"_disp": "url",
			"_id": "JMHHYAPlSgKuC5alDvehWA"
		},
		{
			"_disp": "path",
			"_id": "9_TB_-ppQnCpm3EKkO8naw"
		},
		{
			"_disp": "function",
			"_id": "e-rYyVWHQoKi1om5SUBMcA"
		},
		{
			"_disp": "sourcecode",
			"_id": "vOaH1F-HRhefePjYFAGCBA"
		},
		{
			"_disp": "text",
			"_id": "Qywi2S8xT86_tQl4leIXNA"
		},
		{
			"_disp": "jsdoc",
			"_id": "EqIuGj81QTyVDFA7qRQNHg"
		}
	]
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "QueryOp",
	"_id": "vHByvw8nQz-_tASbX6g56g",
	"evaluate": "function (expressionValue, testValue) {\n    return testValue > expressionValue;\n}",
	"for_array": false,
	"name": "$gt",
	"stringify": "function (expressionValue) {\n    return \"is greater than '\"+expressionValue+\"'\";\n}",
	"types": [
		{
			"_disp": "string",
			"_id": "ZD_vX9d-RLqxGTOdZntz6Q"
		},
		{
			"_disp": "email",
			"_id": "S8eHnlXxQJqIPLM2q8HniQ"
		},
		{
			"_disp": "phone",
			"_id": "DDssakmDQoeACryXT377xw"
		},
		{
			"_disp": "url",
			"_id": "JMHHYAPlSgKuC5alDvehWA"
		},
		{
			"_disp": "path",
			"_id": "9_TB_-ppQnCpm3EKkO8naw"
		}
	]
},
{
	"__pkg": "sys",
	"__ver": "sys:2",
	"_class": "QueryOp",
	"_id": "xVTEHwn0QZGCV0y3-40-sA",
	"evaluate": "function (expressionValue, testValue) {\n    //testValue is after expressionValue?\n    var expDate = new Date(expressionValue);\n    var testDate = testValue;\n    if(!(testDate instanceof Date)) {\n        testDate = new Date(testValue);\n    }\n    \n    return testDate.getTime() > expDate.getTime();\n}",
	"for_array": false,
	"name": "$after",
	"stringify": "function (expressionValue, typeDesc) {\n    return \"is after \"+expressionValue;\n}",
	"toMongo": "function (fieldName, clause) {\n    var ret = {};\n    ret[fieldName] = {$gte:clause};\n    return ret;\n}",
	"types": [
		{
			"_disp": "date",
			"_id": "nplFum9LRdWvt5TW1LyulQ"
		},
		{
			"_disp": "datetime",
			"_id": "SRrCNHZCTvW6sTMtR3a0iQ"
		},
		{
			"_disp": "time",
			"_id": "uavtEE5AT2q5WcEcsWYTpw"
		}
	]
},
{
	"__ver": "sys:5",
	"_class": "QueryOpUiSpec",
	"_id": "57ILg9OpRKW_mlCRHlbzgA",
	"editors": [
		{
			"$empty": false
		},
		{
			"$notempty": false
		}
	],
	"fieldtypes": [
		{
			"_disp": "sourcecode",
			"_id": "vOaH1F-HRhefePjYFAGCBA",
			"name": "sourcecode"
		},
		{
			"_disp": "function",
			"_id": "e-rYyVWHQoKi1om5SUBMcA",
			"name": "function"
		},
		{
			"_disp": "attachment",
			"_id": "vxlB7gSPTWqq98tG5lCcPQ",
			"name": "attachment"
		},
		{
			"_disp": "image",
			"_id": "lpmwbanlQH20mCWioX0H1g",
			"name": "image"
		},
		{
			"_disp": "color",
			"_id": "L0RpjYeuS-uVqxj00KzEZg",
			"name": "color"
		},
		{
			"_disp": "password",
			"_id": "PkJTkOpsStGYcReZiDoEnQ",
			"name": "password"
		},
		{
			"_disp": "object",
			"_id": "uMEzxXwVSgmj_dbfeY-fLA",
			"name": "object"
		}
	],
	"for_array": false,
	"key": "dbui.core.empty_notempty"
},
{
	"__ver": "sys:1",
	"_class": "QueryOpUiSpec",
	"_id": "7Ii8-VwZSEm4dTV4_P5mAQ",
	"editors": [
		{
			"$eq": true
		},
		{
			"$ne": true
		},
		{
			"$contains": {
				"type": "string"
			}
		},
		{
			"$notcontains": {
				"type": "string"
			}
		},
		{
			"$gt": {
				"type": "string"
			}
		},
		{
			"$lt": {
				"type": "string"
			}
		},
		{
			"$empty": false
		},
		{
			"$notempty": false
		}
	],
	"fieldtypes": [
		{
			"_disp": "string",
			"_id": "ZD_vX9d-RLqxGTOdZntz6Q",
			"name": "string"
		},
		{
			"_disp": "email",
			"_id": "S8eHnlXxQJqIPLM2q8HniQ",
			"name": "email"
		},
		{
			"_disp": "phone",
			"_id": "DDssakmDQoeACryXT377xw",
			"name": "phone"
		},
		{
			"_disp": "url",
			"_id": "JMHHYAPlSgKuC5alDvehWA",
			"name": "url"
		}
	],
	"for_array": false,
	"key": "dbui.core.stringlike"
},
{
	"__ver": "sys:1",
	"_class": "QueryOpUiSpec",
	"_id": "8bkpoJNqS6yAs24lNkbZDQ",
	"editors": [
		{
			"$eq": true
		},
		{
			"$before": true
		},
		{
			"$after": true
		},
		{
			"$todayminus": {
				"type": "integer"
			}
		},
		{
			"$empty": false
		},
		{
			"$notempty": false
		}
	],
	"fieldtypes": [
		{
			"_disp": "date",
			"_id": "nplFum9LRdWvt5TW1LyulQ",
			"name": "date"
		},
		{
			"_disp": "datetime",
			"_id": "SRrCNHZCTvW6sTMtR3a0iQ",
			"name": "datetime"
		}
	],
	"for_array": false,
	"key": "dbui.core.datelike"
},
{
	"__ver": "sys:2",
	"_class": "QueryOpUiSpec",
	"_id": "JCrbxNzDQPuHm_XRuwti9g",
	"editors": [
		{
			"$empty": false
		},
		{
			"$notempty": false
		}
	],
	"fieldtypes": [
		{
			"_disp": "attachment",
			"_id": "vxlB7gSPTWqq98tG5lCcPQ",
			"name": "attachment"
		},
		{
			"_disp": "composite",
			"_id": "ePi7MsceQMqn3qnVBlHkNA",
			"name": "composite"
		},
		{
			"_disp": "function",
			"_id": "e-rYyVWHQoKi1om5SUBMcA",
			"name": "function"
		},
		{
			"_disp": "image",
			"_id": "lpmwbanlQH20mCWioX0H1g",
			"name": "image"
		},
		{
			"_disp": "jsdoc",
			"_id": "EqIuGj81QTyVDFA7qRQNHg",
			"name": "jsdoc"
		},
		{
			"_disp": "object",
			"_id": "uMEzxXwVSgmj_dbfeY-fLA",
			"name": "object"
		},
		{
			"_disp": "password",
			"_id": "PkJTkOpsStGYcReZiDoEnQ",
			"name": "password"
		},
		{
			"_disp": "physical_address",
			"_id": "2RQWYKymQMmfYqEGxXVtoA",
			"name": "physical_address"
		},
		{
			"_disp": "sourcecode",
			"_id": "vOaH1F-HRhefePjYFAGCBA",
			"name": "sourcecode"
		},
		{
			"_disp": "text",
			"_id": "Qywi2S8xT86_tQl4leIXNA",
			"name": "text"
		},
		{
			"_disp": "rolespec",
			"_id": "aeOhqBixSbigoy3yBkyScQ",
			"name": "rolespec"
		},
		{
			"_disp": "money",
			"_id": "cKFhGuY3SZ6_2YWKwkpqCA",
			"name": "money"
		}
	],
	"for_array": true,
	"key": "dbui.core.Array.basic"
},
{
	"__ver": "sys:1",
	"_class": "QueryOpUiSpec",
	"_id": "KX-8B_faRSufRJ_0hGFetQ",
	"editors": [
		{
			"$eq": true
		},
		{
			"$before": true
		},
		{
			"$after": true
		},
		{
			"$empty": false
		},
		{
			"$notempty": false
		}
	],
	"fieldtypes": [
		{
			"_disp": "time",
			"_id": "uavtEE5AT2q5WcEcsWYTpw",
			"name": "time"
		}
	],
	"for_array": false,
	"key": "dbui.core.time"
},
{
	"__ver": "sys:2",
	"_class": "QueryOpUiSpec",
	"_id": "MwwmFSrdRGmgI24guVcCZg",
	"editors": [
		{
			"$contains": true
		},
		{
			"$notcontains": true
		},
		{
			"$empty": false
		},
		{
			"$notempty": false
		}
	],
	"fieldtypes": [
	],
	"for_array": true,
	"key": "dbui.core.Array.*"
},
{
	"__ver": "sys:1",
	"_class": "QueryOpUiSpec",
	"_id": "Pu272MTXQ7mIjEHlQrkcow",
	"editors": [
		{
			"$eq": true
		},
		{
			"$ne": true
		},
		{
			"$contains": {
				"type": "string"
			}
		},
		{
			"$notcontains": {
				"type": "string"
			}
		},
		{
			"$childOf": true
		},
		{
			"$gt": true
		},
		{
			"$lt": true
		},
		{
			"$empty": false
		},
		{
			"$notempty": false
		}
	],
	"fieldtypes": [
		{
			"_disp": "path",
			"_id": "9_TB_-ppQnCpm3EKkO8naw",
			"name": "path"
		}
	],
	"for_array": false,
	"key": "dbui.core.path"
},
{
	"__ver": "sys:2",
	"_class": "QueryOpUiSpec",
	"_id": "RFw8yw0xQhalrk0amOWkiQ",
	"editors": [
		{
			"$contains": {
				"type": "string"
			}
		},
		{
			"$notcontains": {
				"type": "string"
			}
		},
		{
			"$empty": false
		},
		{
			"$notempty": false
		}
	],
	"fieldtypes": [
		{
			"_disp": "text",
			"_id": "Qywi2S8xT86_tQl4leIXNA",
			"name": "text"
		},
		{
			"_disp": "jsdoc",
			"_id": "EqIuGj81QTyVDFA7qRQNHg",
			"name": "jsdoc"
		}
	],
	"for_array": false,
	"key": "dbui.core.text"
},
{
	"__ver": "sys:1",
	"_class": "QueryOpUiSpec",
	"_id": "XI_wd0QiRwCbonJru7RwWQ",
	"editors": [
		{
			"$istrue": false
		},
		{
			"$isfalse": false
		},
		{
			"$empty": false
		},
		{
			"$notempty": false
		}
	],
	"fieldtypes": [
		{
			"_disp": "boolean",
			"_id": "WiUvP7txRQiF6tPM9FpFIw",
			"name": "boolean"
		}
	],
	"for_array": false,
	"key": "dbui.core.boolean"
},
{
	"__ver": "sys:1",
	"_class": "QueryOpUiSpec",
	"_id": "csHQdrakQV-HfiudquIaeg",
	"editors": [
		{
			"$eq": true
		},
		{
			"$ne": true
		},
		{
			"$gt": true
		},
		{
			"$lt": true
		},
		{
			"$empty": false
		},
		{
			"$notempty": false
		}
	],
	"fieldtypes": [
		{
			"_disp": "integer",
			"_id": "gxJBuQp7RkKLIV0cazfFnA",
			"name": "integer"
		},
		{
			"_disp": "float",
			"_id": "EaQUGA7oS7qKanG4QbvYbQ",
			"name": "float"
		}
	],
	"for_array": false,
	"key": "dbui.core.numeric"
},
{
	"__ver": "sys:3",
	"_class": "QueryOpUiSpec",
	"_id": "oKmeb35kScC15wC7BfpjGQ",
	"editors": [
		{
			"$eq": true
		},
		{
			"$ne": true
		},
		{
			"$empty": false
		},
		{
			"$notempty": false
		}
	],
	"fieldtypes": [
		{
			"_disp": "enum",
			"_id": "z_2NESmpQ-29ACeUMhflNQ",
			"name": "enum"
		},
		{
			"_disp": "reference",
			"_id": "bHeoPzsMScORdzjtX6GdoA",
			"name": "reference"
		}
	],
	"for_array": false,
	"key": "dbui.core.empty_notempty_equality"
},
{
	"__ver": "sys:3",
	"_class": "RemotePackageRepository",
	"_id": "vbIpJ6l7RBask_VdWUx0fg",
	"auth": {
		"token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOiI5NFhVSkVsRlFlYUR4c1ZqMEVMUHNBIiwiaWF0IjoxNDcyMDgxNTA1fQ.qp6HQaVz6xxHx_FzEDSzPWxs5SfvDCheRVCFaIb2BHo"
	},
	"name": "PackageRepo",
	"package_keys": [
	],
	"packages": [
		{
			"_disp": "Core System",
			"_id": "7R4cBwsWTSacdSk5ZrAjTw",
			"key": "sys",
			"major_version": 0,
			"minor_version": 60
		}
	],
	"url": "https://pkg.noonian.org"
},
{
	"__pkg": "sys",
	"__ver": "sys:1",
	"_class": "Role",
	"_id": "FnQ_eBYITOSC8kJA4Zul5g",
	"name": "ROLE_SYSADMIN"
},
{
	"__ver": "sys:4",
	"_class": "TwoFactorAuthImplementation",
	"_id": "GaulTlfcRgGe0DkrJcq_tQ",
	"doc": "Simple test implementation that logs the code to console.",
	"factory_fn": "function () {\n    return {\n        sendCode:function(dest, code) {\n            console.log('Sending to %s: [%s]', dest, code);\n            return {result:dest+' '+code};\n        }\n    };\n}",
	"name": "SimpleTest"
},
{
	"__ver": "sys:2",
	"_class": "TwoFactorAuthImplementation",
	"_id": "fqJ0O30bRBGZx_MbdZJH-g",
	"factory_fn": "function (nodeRequire, Q, config) {\n    var getTwilioClient = nodeRequire('twilio');\n    \n    var formatPhone = function(phoneStr) {\n        //Assume we're only dealing w/ US numbers\n        //Format needs to be +1AAA#######\n        \n        //first clear out non-digits\n        phoneStr = phoneStr && phoneStr.replace(/\\D/g, '');\n        \n        //need at least areacode plus 7 digits\n        if(!phoneStr || phoneStr.length <10) {\n            return false;\n        }\n        if(phoneStr.length < 11) {\n            phoneStr = '1'+phoneStr;\n        }\n        \n        return '+'+phoneStr;\n        \n    };\n    \n    return {\n        sendCode:function(dest, code) {\n            console.log('TWILIO SEND CODE');\n            var deferred = Q.defer();\n            config.getParameter('twilio.auth', false).then(function(authParams) {\n                console.log('TWILIO SEND CODE! %s %s %j', dest, code, authParams);\n                if(!authParams || !authParams.sid || !authParams.token || !authParams.phone) {\n                    console.error('Bad config twilio.auth');\n                    deferred.reject('Bad config twilio.auth');\n                }\n                \n                var to = formatPhone(dest);\n                \n                if(!to) {\n                    return deferred.reject('Bad phone number '+dest);\n                }\n                \n                var twilioClient = getTwilioClient(authParams.sid, authParams.token);\n                \n                \n                \n                twilioClient.sendMessage(\n                    {\n                        to: to, \n                        from: authParams.phone,\n                        body: 'Verification Code: '+code\n                    }, \n                    function(err, responseData) {\n                        if(!err) {\n                            deferred.resolve(responseData);\n                        }\n                        else {\n                            deferred.reject(err);\n                        }\n                    }\n                );\n            });\n            \n            return deferred.promise;\n        }\n    };\n}",
	"name": "Twilio"
},
{
	"__ver": "sys:1",
	"_class": "UiAction",
	"_id": "i8CPDhK4SXKT7tT8JknLQw",
	"function": "function () {\n    console.log(this.targetObj);\n    // console.log(JSON.stringify(this.targetObj));\n}",
	"key": "test.logme"
},
{
	"__ver": "sys:8",
	"_class": "UiAction",
	"_id": "nCpVSR9XR3CrhRBRNDNtPw",
	"function": "function ($rootScope, $uibModal) {\n    \n    var to = this.targetObj;\n    \n    var modalInstance;\n      var scope = $rootScope.$new(true);\n\n      var className = scope.boClass = to.object_class;\n      var perspectiveName = scope.perspectiveName = 'default';\n      var boId = scope.boId = to.object_id;\n\n      modalInstance = $uibModal.open({\n        templateUrl:'dbui/core/view-dialog.html',\n        controller:'dbui_ViewCtrl',\n        size:'lg',\n        scope: scope,\n        resolve: {\n          theObject: function() {\n            return db[className].findOne({_id:boId}).$promise;\n          },\n          viewPerspective:  function(Dbui) {\n            return Dbui.getPerspective(perspectiveName, className, 'view');\n          }\n        }\n      });\n}",
	"key": "dbui.update_log_link"
},
{
	"__ver": "sys:1",
	"_class": "UiAction",
	"_id": "zIbWSxNgRiGVY_G7j_jYsA",
	"function": "function () {\n    var persp = this.perspectiveObj;\n    \n    var url='export/Vs_E0HrSSk6_aNtNUvexaw/'+this.className+'?';\n    var queryStr = null;\n    \n    var select = persp.fields;\n    var where = persp.filter;\n    var sort = persp.sort;\n    \n    var appendToQueryStr = function(str) {\n        queryStr = queryStr ? queryStr+'&'+str : str;\n    }\n    \n    if(persp.fields) {\n        appendToQueryStr('fields='+angular.toJson(persp.fields));\n        \n        var selectObj = {};\n        for(var i=0; i < persp.fields.length; i++) {\n          var f = persp.fields[i];\n          selectObj[f] = 1;\n        }\n        appendToQueryStr('select='+angular.toJson(selectObj));\n    }\n    \n    if(persp.filter || persp.searchString) {\n        appendToQueryStr('where='+angular.toJson(persp.getEffectiveQuery()));\n    }\n    \n    if(persp.sort) {\n        appendToQueryStr('sort='+angular.toJson(persp.sort));\n    }\n    \n\n    window.open(url+queryStr);\n}",
	"key": "dbui.export_csv"
},
{
	"__pkg": "sys",
	"__ver": "sys:3",
	"_class": "User",
	"_id": "vl22Nf2XTNym2-X90sxOag",
	"name": "admin",
	"password": {
		"hash": "$2a$10$upi6IEXcAO71HY.NzpT33ePm58Pf4Oxo8Flf8K6iOWqyPrQjFyh9G"
	},
	"roles": [
		{
			"_disp": "ROLE_SYSADMIN",
			"_id": "FnQ_eBYITOSC8kJA4Zul5g"
		}
	]
},
{
	"__disp": "/dbui/getAggregatePaths",
	"__ver": "sys:1",
	"_class": "WebService",
	"_id": "5TmX2XybS4WCYB8wS_g1uA",
	"doc": "Summarizes path information for a specified path field.  Used by the \"folders\" view in DBUI.\n@param className\n@param pathField\n@param conditions",
	"function": "function (queryParams, db, Q) {\n  var className = queryParams.className;\n  var pathField = queryParams.pathField;\n  var conditions = queryParams.conditions\n\n  if(!className || !pathField) {\n    throw new Error(\"Missing parameters\");\n  }\n\n  if(conditions) {\n    try {\n      conditions = JSON.parse(conditions);\n    } catch(e) {console.log(e)}\n  }\n  \n  var deferred = Q.defer();\n\n  var pipeline = [];\n\n  if(conditions) {\n    pipeline.push({$match:conditions});\n  }\n\n  pipeline.push({$group:{_id:'$'+pathField, total:{$sum:1} }});\n\n  db[className].aggregate(pipeline, function(err, paths) {\n    if(err) {\n      deferred.reject(err);\n    }\n\n    var pathSep = db[className]._bo_meta_data.getTypeDescriptor(pathField).seperator || '/';\n\n    var prefixMap = {};\n\n    for(var i=0; i < paths.length; i++) {\n      var currPath = paths[i]._id;\n      var currCount = paths[i].total;\n\n      //Compute all the prefixes for currPath; track count:\n      var sepIndex = -1;\n      var prefix;\n      var prefixStack = []; //[top, top.sub1, top.sub1.sub2, ...]\n\n      do {\n        sepIndex = currPath.indexOf(pathSep, sepIndex+1);\n        if(sepIndex < 0)\n          prefix = currPath\n        else\n          prefix = currPath.substring(0, sepIndex);\n\n        prefixStack.push(prefix);\n\n        if(!prefixMap[prefix])\n          prefixMap[prefix] = {count:0};\n\n        prefixMap[prefix].count += currCount;\n\n\n      } while (sepIndex > -1);\n\n\n      //Make each prefix know about it's direct children:\n      for(var j=0; j < prefixStack.length-1; j++) {\n        var currPrefix = prefixStack[j];\n        if(!prefixMap[currPrefix].children) {\n          prefixMap[currPrefix].children = {};\n        }\n        prefixMap[currPrefix].children[prefixStack[j+1]] = true;\n      }\n\n\n    }\n\n    //Tidy up the children\n    for(var p in prefixMap) {\n      if(prefixMap[p].children) {\n        prefixMap[p].children = Object.keys(prefixMap[p].children);\n        prefixMap[p].children.sort();\n      }\n    }\n\n    deferred.resolve({result:prefixMap});\n  });\n\n    return deferred.promise;\n}",
	"path": "/dbui/getAggregatePaths",
	"rolespec": [
	]
},
{
	"__disp": "/sys/i18n/getEnumerationValues",
	"__ver": "sys:4",
	"_class": "WebService",
	"_id": "7ugMfTjtQtyPiOiCpci9hA",
	"doc": "Retrieves internationalized list of possible values for a particular enumerated type.\n\n@param {string} name - name of Enumeration to obtain \n@return {Object[]} array of objects w/ keys 'value' and 'label'",
	"function": "function (auth, req, queryParams, db, I18n, Q, _) {\n    var enumName = queryParams.name;\n    \n    if(!enumName) {\n        throw new Error('missing required parameter');\n    }\n    \n    return auth.getCurrentUser(req).then(function(currentUser) {\n        return Q.all([\n            I18n.getLabelGroup('db.enum.'+enumName, currentUser),\n            db.Enumeration.findOne({name:enumName}).exec()\n        ])\n        .then(function(resultArr) {\n            var lg = resultArr[0] || {};\n            var enumeration = resultArr[1];\n            \n            if(!enumeration) {\n                throw new Error('Invalid enumeration \\''+enumName+'\\'');\n            }\n            \n            var ret = [];\n            _.forEach(enumeration.values, function(val) {\n                ret.push({\n                   value: val,\n                   label: (lg[val] || val)\n                });\n            });\n            return {result:ret};\n        });\n    });\n}",
	"path": "/sys/i18n/getEnumerationValues",
	"rolespec": [
	]
},
{
	"__disp": "/sys/i18n/getBoLabelGroup",
	"__ver": "sys:3",
	"_class": "WebService",
	"_id": "9G9tifuVToCBntbpzatynA",
	"function": "function (auth, req, queryParams, I18n) {\n    \n    if(!queryParams.className) {\n        return {result:{}};\n    }\n    \n    return auth.getCurrentUser(req).then(function(currentUser) {\n        return I18n.getBoLabelGroup(queryParams.className, currentUser).then(function(fieldLabels) {\n            return {result:fieldLabels};\n        })\n    });\n    \n}",
	"path": "/sys/i18n/getBoLabelGroup",
	"rolespec": [
	]
},
{
	"__disp": "/sys/getUiAction",
	"__ver": "sys:2",
	"_class": "WebService",
	"_id": "EPl27ZhKQBO60-xwX60JgA",
	"doc": "Allows access to UiAction objects to DBUI users w/out having to explicitly give permission via DataAccessControl.",
	"function": "function (queryParams, db) {\n  var key = queryParams.key;\n\n  if(!key) {\n    throw new Error('missing key param');\n  }\n  \n  return db.UiAction.findOne({key:key});\n}",
	"path": "/sys/getUiAction",
	"rolespec": [
	]
},
{
	"__disp": "/dbui/getFieldTypeMetadata",
	"__ver": "sys:28",
	"_class": "WebService",
	"_id": "Enqql7tlRMCPLm2kCsIDvg",
	"doc": "Provides FieldType metadata for dealing with fields on the client side.\n@param {string} class_name  Name of Business Object class \n@param {string} view_or_edit\n@return",
	"function": "function (queryParams, res, db, _) {\n    //Build response that maps type name to an 'info' object, providing what client-side needs in order to build a UI form for a specified business object.\n    \n    var className = queryParams.class_name;\n    var fieldtype = queryParams.field_type;\n    var viewEdit = queryParams.view_or_edit;\n    \n    // console.log('getFieldTypeMetadata for %s %s %s', className, fieldtype, viewEdit);\n    \n    if(className && !db[className]) {\n        throw new Error('Invalid class name: '+className);\n    }\n    \n    if(!className && !fieldtype) {\n        throw new Error('Missing required parameter(s)');\n    }\n    \n    var applicKey = viewEdit === 'view' ? 'for_viewing' : 'for_editing';\n    \n    var queryObj = {$or:[]};\n    \n    if(className) {\n        \n        var applicClause;\n        \n        if(viewEdit === 'view') {\n            applicKey = 'for_viewing';\n            applicClause = {\n                $or:[\n                    {for_viewing:true},\n                    {for_viewing_array:true}\n                ]\n            };\n        }\n        else {\n            applicKey = 'for_editing';\n            applicClause = {\n                $or:[\n                    {for_editing:true},\n                    {for_editing_array:true}\n                ]\n            };\n        }\n        \n        \n        \n        var types = {};\n    \n        //Catch 'universally-applicable' editors/viewers:    \n        queryObj.$or.push(\n            {$and:[{fieldtypes:{$empty:true}}, applicClause]}\n        );\n        \n        var queryObjBuilder = function(typeDescMap) {\n            _.forEach(typeDescMap, function(td) {\n                var clause;\n                // console.log(types);\n                if(td instanceof Array) {\n                    td = td[0];\n                    if(!types['ARR'+td.type]) {\n                        types['ARR'+td.type] = true;\n                        \n                        clause = {\n                            'fieldtypes.name':td.type\n                        };\n                        clause[applicKey+'_array'] = true;\n                        queryObj.$or.push(clause);\n                    }\n                }\n                \n                if(td.type && !types[td.type]) {\n                    types[td.type] = true;\n                    \n                    clause = {\n                        'fieldtypes.name':td.type\n                    }\n                    clause[applicKey] = true;\n                    queryObj.$or.push(clause);\n                }\n                \n                if(td.type === 'composite') {\n                    queryObjBuilder(td.type_desc_map);\n                }\n                \n            });\n        };\n    \n    \n        //Recursively pull in all fieldtypes of interest\n        queryObjBuilder(db[className]._bo_meta_data.type_desc_map);\n    }\n    else {\n        //just a single fieldtype!\n        \n        var clause = {};\n        var bracketPos = fieldtype.indexOf('[]');\n        var myApplic = applicKey;\n        if(bracketPos > 0) {\n            myApplic += '_array';\n            fieldtype = fieldtype.substring(0, bracketPos);\n        }\n        \n        clause['fieldtypes.name'] = fieldtype;\n        clause[myApplic] = true;\n        \n        queryObj.$or.push(clause);\n        \n        //also grab universally-applicable ones:\n        //Catch 'universally-applicable' editors/viewers:    \n        clause = {};\n        clause[myApplic] = true;\n        queryObj.$or.push(\n            {$and:[{fieldtypes:{$empty:true}}, clause]}\n        );\n        \n    }\n    \n    \n    // console.log('queryObj %j', queryObj);\n    return db.FieldTypeUiSpec.find(queryObj).then(function(uiSpecs) {\n        var result = [];\n        \n        var copyFields = ['template', 'link_fn', 'controller_fn', 'key'];\n        \n        _.forEach(uiSpecs, function(uiSpecObj) {\n            \n            var spec = {fieldtypes:[]};\n            result.push(spec);\n            \n            if(uiSpecObj[applicKey+'_array']) {\n                spec.for_array = true;\n            }\n            \n            _.forEach(copyFields, function(f) {\n                if(uiSpecObj[f] != null) {\n                    spec[f] = ''+uiSpecObj[f];\n                }\n            });\n            \n            _.forEach(uiSpecObj.fieldtypes, function(ftRef) {\n                spec.fieldtypes.push(ftRef.name);\n            });\n        });\n       return {result:result}; \n    });\n    \n}",
	"path": "/dbui/getFieldTypeMetadata",
	"rolespec": [
	]
},
{
	"__disp": "/dbui/stringifyQuery",
	"__ver": "sys:10",
	"_class": "WebService",
	"_id": "GXO11xYsQLKmo_4Ohy-eaQ",
	"doc": "Turn a query object into a human-readable string",
	"function": "function (req, queryParams, auth, I18n, db, _) {\n    var QueryOpService = db._svc.QueryOpService;\n    \n    var className = queryParams.className;\n    var queryObj = JSON.parse(queryParams.queryObj);\n    \n    \n    return auth.getCurrentUser(req).then(function(currentUser) {\n        var noonianContext = {currentUser:currentUser};\n        \n        return I18n.getBoLabelGroup(className, req.user).then(function(fieldLabels) {\n            if(fieldLabels._abbreviated) {\n                _.assign(fieldLabels, fieldLabels._abbreviated);\n            }\n            \n            var queryDesc = QueryOpService.stringifyQuery(queryObj, db[className]._bo_meta_data, fieldLabels, noonianContext);\n            \n            return queryDesc;\n        });\n    });\n}",
	"path": "/dbui/stringifyQuery",
	"rolespec": [
	]
},
{
	"__disp": "/dbui/getPerspective",
	"__ver": "sys:6",
	"_class": "WebService",
	"_id": "IeZLWhf8TEygSbIiXxU37A",
	"doc": "Web service to retrieve an assembled {@link DbuiPerspective|DBUI perspective}.",
	"function": "function (queryParams, req, DbuiPerspectiveBuilder) {\n    var name = queryParams.name;\n    var boClass = queryParams.class_name;\n    var type = queryParams.type;\n    var userId = req.user._id;\n\n\n    if(!boClass) {\n        throw new Error(\"Missing boClass parameter\");\n    }\n    \n    if(!name) {\n        name = 'default';\n    }\n    \n    return DbuiPerspectiveBuilder.getPerspective(boClass, name, type, userId);\n    \n}",
	"path": "/dbui/getPerspective",
	"rolespec": [
	]
},
{
	"__disp": "/pkg/runUpdate",
	"__ver": "sys:3",
	"_class": "WebService",
	"_id": "OsHGskAGTUWcWsUUMDkVLA",
	"doc": "Called from a RemotePackageRepository button; checks for updates on configured remote repo.",
	"function": "function (db, queryParams, httpRequestLib, Q, _) {\n    var PackagingService = db._svc.PackagingService;\n    \n    var repoUrl;\n    var authHeader;\n    \n    var myPackages = {}; //Packages I already have - check for upgrade\n    var toInstall = {};  //Packages to install (from rpr.package_keys) - pull latest version\n    \n    var repoBo;\n    \n    return db.RemotePackageRepository.findOne({_id:queryParams.id}).then(function(rpr) {\n        if(!rpr) {\n            throw 'invalid remotePackageRepo id';\n        }\n        repoBo = rpr;\n        \n        _.forEach(rpr.packages, function(pkgRef) {\n            myPackages[pkgRef.key] = {major:pkgRef.major_version, minor:pkgRef.minor_version};\n        });\n        \n        _.forEach(rpr.package_keys, function(pkgKey) {\n           toInstall[pkgKey] = true; \n        });\n        \n        console.log('Checking update for packages: %j', myPackages);\n        console.log('And attempting install for: %j', Object.keys(toInstall));\n        repoUrl = rpr.url;\n        authHeader = { authorization:'Bearer '+rpr.auth.token};\n        \n        var deferred = Q.defer();\n        httpRequestLib.get( {\n              uri:repoUrl+'/ws/package_repo/getList',\n              headers:authHeader,\n              rejectUnauthorized: false\n          }, function(err, httpResponse, body) {\n              if(err) {\n                  deferred.reject(err);\n              }\n              else {\n                  try {\n                    deferred.resolve(JSON.parse(body));\n                  }\n                  catch(err) {\n                      deferred.reject(err);\n                  }\n              }\n          });\n          return deferred.promise;\n        \n    })\n    .then(function(pkgList){\n        // console.log('Received pkg list: %j', pkgList);\n        var toUpgrade = {};\n        var workToDo = false;\n        \n        _.forEach(pkgList, function(remotePkg) {\n            var localVersion = myPackages[remotePkg.key];\n            if(localVersion) {\n                var remoteVersion = PackagingService.parseVersionString(remotePkg.latest_version);\n                // console.log('Checking %s against remote version %j', remotePkg.key, remoteVersion);\n                if(remoteVersion.compareTo(localVersion) > 0) {\n                    //Scan through available versions; find the first one that is newer than localVersion\n                    for(var i=0; i < remotePkg.available_versions.length; i++) {\n                        var v = PackagingService.parseVersionString(remotePkg.available_versions[i]);\n                        if(v.compareTo(localVersion) > 0) {\n                            toUpgrade[remotePkg.key] = v;\n                            workToDo = true;\n                            break;\n                        }\n                    }\n                    \n                }\n            }\n            else if(toInstall[remotePkg.key]) {\n                toUpgrade[remotePkg.key] = remotePkg.latest_version;\n                workToDo = true;\n            }\n        });\n        \n        //toUpgrade now maps pkg keys to target upgrade versions\n        if(workToDo) {\n            var summaryString = '';\n            var installedKeys = [];\n            var promiseChain = Q(true);\n            _.forEach(toUpgrade, function(askForVersion, key) {\n                summaryString += key+' '+askForVersion.toString()+', ';\n                \n                promiseChain = promiseChain.then(function() {\n                    \n                    if(toInstall[key]) {\n                        installedKeys.push(key);\n                    }\n                    \n                    var requestParams = {\n                        uri:repoUrl+'/ws/package_repo/getPackage?key='+key+'&version='+askForVersion.toString(),\n                        headers:authHeader,\n                        rejectUnauthorized: false\n                    };\n                    \n                    var pkgStream = httpRequestLib.get(requestParams);\n                    return PackagingService.applyPackageStream(pkgStream);\n                });\n            });\n            console.log('attempting updates: %s', summaryString);\n            \n            //replace repoBo.package_keys with refs in repoBo.packages\n            \n            promiseChain = promiseChain.then(function() {\n                if(installedKeys.length) {\n                    \n                    return db.BusinessObjectPackage.find({}).then(function(bopArr) {\n                        \n                        var keyToBop = {};\n                        _.forEach(bopArr, function(bop) {\n                            keyToBop[bop.key] = bop;\n                        });\n                        \n                        var retain = [];\n                        _.forEach(installedKeys, function(installedKey) {\n                            var bop = keyToBop[installedKey];\n                            if(bop) {\n                                repoBo.packages.push({\n                                    _id:bop._id, \n                                    _disp:bop._disp, \n                                    key:bop.key, \n                                    major_version:bop.major_version, \n                                    minor_version:bop.minor_version\n                                }); //work-around for Issue 28\n                            }\n                            else {\n                                retain.push(installedKeys);\n                            }\n                        });\n                        \n                        repoBo.package_keys = retain;\n                        return repoBo.save();\n                    });\n                }\n                else {\n                    return true;\n                }\n            });\n            \n            \n            return promiseChain.then(function() {\n               return {message: 'Upgrade complete: '+summaryString}; \n            });\n        }\n        else {\n            return({message:'all packages already up-to-date!'});\n        }\n    });\n}",
	"path": "/pkg/runUpdate",
	"rolespec": [
	]
},
{
	"__disp": "/dbui/getSidebarMenu",
	"__ver": "sys:14",
	"_class": "WebService",
	"_id": "SUUJLgaBQSmM-hi3AyGP0A",
	"function": "function (req, config, db, auth, DbuiMenuBuilder, Q, _, I18n) {\n    var configKey = 'sys.dbui.sidebar_menu';\n    var currUser;\n    \n    return auth.getCurrentUser(req).then(function(u) {\n        currUser = u;\n        \n        var configQuery = {\n            key:configKey\n        };\n        \n        var isAdmin = false; //special case\n        _.forEach(currUser.roles, function(r) {\n            if(r._id === 'FnQ_eBYITOSC8kJA4Zul5g') {\n                isAdmin = true;\n            }\n        });\n        \n        if(!isAdmin) {\n            configQuery.$or = [\n                {rolespec:{$satisfiedBy:currUser.roles}},\n                {user:currUser._id}\n            ];\n        }\n        \n        return db.Config.find(configQuery);\n    })\n    .then(function(matchingConfigs) {\n        var matchedKeys = {};\n        var menuKeys = []; \n        var menuPromises = [config.getCustomizedParameter(configKey, req.user._id)];\n        \n        _.forEach(matchingConfigs, function(c) {\n            if(!matchedKeys[c.value]) {\n                matchedKeys[c.value] = true;\n                menuKeys.push(c.value);\n                menuPromises.push(DbuiMenuBuilder.buildMenu(c.value, currUser));\n            }\n        });\n        \n        menuPromises.push(\n            I18n.aggregateLabelGroups(menuKeys, currUser)\n        );\n        \n        \n        return Q.all(menuPromises).then(function(resultArr) {\n            var result = {_primary:resultArr[0]};\n            for(var i=0; i < menuKeys.length; i++) {\n                var menuKey = menuKeys[i];\n                result[menuKey] = resultArr[i+1];\n            }\n            \n            result._labels = resultArr.pop();\n            \n            return result;\n        });\n        \n        \n    })\n    ;\n    \n    \n}",
	"path": "/dbui/getSidebarMenu",
	"rolespec": [
	]
},
{
	"__disp": "/pkg/installPackage",
	"__ver": "sys:2",
	"_class": "WebService",
	"_id": "SyEf04PFRfKB6f-MOH3QBg",
	"doc": "Called via button on BusinessObjectPackage; installs the package (the .json file attachment) into the system",
	"function": "function (queryParams, db) {\n    var bopId = queryParams.id;\n    if(!bopId) {\n        throw 'invalid package id';\n    }\n    \n    return db._svc.PackagingService.applyPackage(bopId).then(function(result) {\n        return {message:'applied package '+result};\n    });\n}",
	"path": "/pkg/installPackage",
	"rolespec": [
	]
},
{
	"__disp": "/pkg/buildPackage",
	"__ver": "sys:2",
	"_class": "WebService",
	"_id": "Tjiak1GXQq2BArAt7X9gew",
	"doc": "Called via button on BusinessObjectPackage; builds updated version from manifest and associated BusinessObjectPackageUpdate records.",
	"function": "function (queryParams, db) {\n    var bopId = queryParams.id;\n    if(!bopId) {\n        throw 'invalid package id';\n    }\n    \n    console.log('build package %s ...', bopId);\n    return db._svc.PackagingService.buildPackage(bopId).then(function(result) {\n        return {message:'created package '+result};\n    });\n}",
	"path": "/pkg/buildPackage",
	"rolespec": [
	]
},
{
	"__disp": "/dbui/getReferenceTypeahead",
	"__ver": "sys:7",
	"_class": "WebService",
	"_id": "UbKQqqY7SAWn6IrffevzFQ",
	"doc": "Retrieves typeahead list for specified phrase",
	"function": "function (db, queryParams, Q, _) {\n    var MAX_RESULTS = 10;\n    var className = queryParams.class_name;\n    var searchTerm = queryParams.search_term;\n    var filter = queryParams.filter;\n    \n    if(!className || !searchTerm) {\n        throw new Error('missing parameters');\n    }\n    \n    if(filter) {\n        filter = JSON.parse(filter);\n    }\n    \n    var Model = db[className];\n    var firstPromise;\n    \n    if(Model._bo_meta_data.type_desc_map._disp) {\n        var queryObj = {__disp:{$regex:searchTerm, $options:'i'}};\n        if(filter) {\n            queryObj = {$and:[filter,queryObj]};\n        }\n        firstPromise = Model.find(queryObj, {__disp:1}).limit(MAX_RESULTS).sort({__disp:'asc'}).lean();\n    }\n    else {\n        firstPromise = Q([]);\n    }\n    \n    return firstPromise.then(function(topResults) {\n        var ret = [];\n        var ids = [];\n        \n        _.forEach(topResults, function(ref) {\n            ret.push({\n                _disp:ref.__disp,\n                _id:ref._id\n            });\n            ids.push(ref._id);\n        });\n        \n        if(ret.length == MAX_RESULTS) {\n            return ret;\n        }\n        \n        var queryObj = {$and:[{_id:{$nin:ids}}, {$fulltextsearch:searchTerm}]};\n        if(filter) {\n            queryObj.$and.push(filter);\n        }\n        \n        return Model.find(queryObj).limit(MAX_RESULTS-ret.length).then(function(nextResults) {\n            _.forEach(nextResults, function(r) {\n                ret.push({\n                    _disp:r._disp,\n                    _id:r._id\n                });\n            });\n            return ret;\n        });\n        \n    });\n}",
	"path": "/dbui/getReferenceTypeahead",
	"rolespec": [
	]
},
{
	"__disp": "/dbui/saveQuery",
	"__ver": "sys:1",
	"_class": "WebService",
	"_id": "_ody1b4bSw2XY7xo1FycqQ",
	"doc": "Save a query to user-specific perspective",
	"function": "function (queryParams, db, req) {\n    var boClass = queryParams.class_name;\n    var perspectiveName = queryParams.perspective;\n    var title = queryParams.title;\n    var toSave = queryParams.theQuery;\n    \n    if(!boClass || !perspectiveName || !toSave) {\n        throw new Error('Missing required parameters');\n    }\n    \n    toSave = JSON.parse(toSave);\n    \n    var currUserId = req.user._id;\n    \n    var configKey = 'sys.dbui.perspective.'+perspectiveName+'.'+boClass;\n    return db.Config.findOne({key:configKey, user:currUserId}).then(function(cfg) {\n        if(!cfg) {\n            cfg = new db.Config({key:configKey, user:{_id:currUserId}, value:{}});\n        }\n        \n        var list = cfg.value.list = cfg.value.list || {};\n        var queryList = list.savedQueries = list.savedQueries || [];\n        queryList.push({\n            title:title,\n            query:toSave\n        });\n        cfg.markModified('value');\n        return cfg.save();\n    })\n    .then(function(cfg) {\n        return {result:'success', queryList:cfg.value.list.savedQueries};\n    })\n    ;\n}",
	"path": "/dbui/saveQuery",
	"rolespec": [
	]
},
{
	"__disp": "/dbui/getQueryOpMetadata",
	"__ver": "sys:11",
	"_class": "WebService",
	"_id": "bl7smamMSomv6EqTsuHCCg",
	"function": "function (queryParams, req, res, db, I18n, _) {\n    \n    var queryopLabels;\n    \n    return I18n.getLabelGroup('sys.query_operations', req.user).then(function(labelGroup) {\n        queryopLabels = labelGroup;\n        \n        return db.QueryOpUiSpec.find({});    \n    })\n    .then(function(uiSpecs) {\n        \n        //Restructure the list for easier consumption client-side\n        var resultList = [];\n        _.forEach(uiSpecs, function(specObj) {\n            \n            var typeNames = [];\n            var editorSpecs = [];\n            \n            //First, pull together type names\n            var typeNameSuffix = specObj.for_array ? '[]' : '';\n            \n            if(!specObj.fieldtypes || !specObj.fieldtypes.length) {\n                typeNames.push('*'+typeNameSuffix);\n            }\n            else {\n                _.forEach(specObj.fieldtypes, function(ftRef) {   \n                    typeNames.push(ftRef.name+typeNameSuffix);\n                });\n            }\n            \n            //Next, construct list of queryop spec objects.  These describe the available queryop's for the above fieldtypes\n            _.forEach(specObj.editors, function(editorSpec) {\n                var opName = Object.keys(editorSpec)[0];\n                editorSpecs.push({\n                    op:opName,\n                    label:queryopLabels[opName.substring(1)],\n                    editor:editorSpec[opName]\n                });\n            });\n            \n            //Finally, build result mapping: typename -> op info list \n            resultList.push({\n               types:typeNames,\n               queryops:editorSpecs\n            });\n            \n        }); //End uiSpecs iteration\n        \n       return resultList; \n    });\n    \n}",
	"path": "/dbui/getQueryOpMetadata",
	"rolespec": [
	]
},
{
	"__disp": "/sys/generateDocs",
	"__ver": "sys:1",
	"_class": "WebService",
	"_id": "cCrZOnWwSeO0dxcvJOfUBA",
	"function": "function (db, queryParams, res, Q, _) {\n    var pkg = queryParams.package;\n    \n    if(!pkg) {\n        throw new Error('missing required parameter \"package\"');\n    }\n    \n    \n    \n    var handlebars = require('handlebars');\n    \n    var bop;\n    var templateObj;\n    \n    \n    return Q.all([\n        db.BusinessObjectPackage.findOne({$or:[{_id:pkg}, {key:pkg}]}).lean().exec(),\n        db.DocTemplate.findOne({key:'sys.package_doc'})\n    ])\n    .then(function(resultArr) {\n        bop = resultArr[0];\n        templateObj = resultArr[1];\n        \n        res.type(templateObj.content_type || 'txt');\n        \n        //process the manifest\n        var bods = bop.manifest.BusinessObjectDef;\n        var bodIds = bods ? Object.keys(bods) : [];\n        \n        var webServices = bop.manifest.WebService;\n        var wsIds = webServices ? Object.keys(webServices) : [];\n        \n        var dataTriggers = bop.manifest.DataTrigger;\n        var dtIds = dataTriggers ? Object.keys(dataTriggers) : [];\n        \n        var uiActions = bop.manifest.UiAction;\n        var uiaIds = uiActions ? Object.keys(uiActions) : [];\n        \n        var configs = bop.manifest.Config;\n        var configIds = configs ? Object.keys(configs) : [];\n        \n        var customPages = bop.manifest.DbuiCustomPage;\n        var cpageIds = customPages ? Object.keys(customPages) : [];\n        \n        \n        \n        return Q.all([\n            db.BusinessObjectDef.find({_id:{$in:bodIds}}, {class_name:1, doc:1}, {sort:{class_name:1}}).lean().exec(),\n            db.WebService.find({_id:{$in:wsIds}}, {path:1, doc:1}, {sort:{path:1}}).lean().exec(),\n            db.DataTrigger.find({_id:{$in:dtIds}}, {action:0}, {sort:{key:1}}).lean().exec(),\n            db.UiAction.find({_id:{$in:uiaIds}}, {function:0}, {sort:{key:1}}).lean().exec(),\n            db.DbuiCustomPage.find({_id:{$in:cpageIds}}, {body:0, controller:0}, {sort:{key:1}}).lean().exec(),\n            db.Config.find({_id:{$in:configIds}, key:{$regex:'^sys.dbui.perspective'}}, {key:1}).lean().exec()\n        ]);\n    })\n    .then(function(resultArr) {\n        var templateContext = {\n            package:bop,\n            businessObjectDefs: resultArr[0],\n            webServices: resultArr[1],\n            dataTriggers: resultArr[2],\n            uiActions:resultArr[3],\n            customPages:resultArr[4]\n        };\n        \n        var perspectiveToBo = {};\n        \n        var rex = /^sys\\.dbui\\.perspective\\.([^.]+)\\.(.+)/;\n        _.forEach(resultArr[5], function(c) {\n            var match = rex.exec(c.key);\n            if(match) {\n                var persp = match[1];\n                var boClass = match[2];\n                if(!perspectiveToBo[persp]) {\n                    perspectiveToBo[persp] = [];\n                }\n                perspectiveToBo[persp].push(boClass);\n            }\n        });\n        \n        var perspectives = [];\n        _.forEach(perspectiveToBo, function(boArr, perspectiveName) {\n            boArr.sort();\n            perspectives.push({\n                name:perspectiveName,\n                classes:boArr\n            })\n        });\n        templateContext.perspectives = _.sortBy(perspectives, 'name');\n        \n        \n        var template = handlebars.compile(templateObj.content);\n        \n        return template(templateContext);\n    })\n    ;\n}",
	"path": "/sys/generateDocs",
	"rolespec": [
	]
},
{
	"__disp": "/sys/i18n/getLabelGroup",
	"__ver": "sys:3",
	"_class": "WebService",
	"_id": "fiWfHKZ8QS6-SezUmvfSmQ",
	"function": "function (auth, req, queryParams, I18n) {\n    \n    return auth.getCurrentUser(req).then(function(currentUser) {\n        return I18n.getLabelGroup(queryParams.key, currentUser).then(function(lg) {\n            return {result:lg};\n        });\n    });\n    \n    \n}",
	"path": "/sys/i18n/getLabelGroup",
	"rolespec": [
	]
},
{
	"__disp": "/pkg/resolvePackageConflict",
	"__ver": "sys:1",
	"_class": "WebService",
	"_id": "gvfgQ7NmQB-IfJSvKxyE6w",
	"doc": "Called from a PackageConflict record; \nInstalls the \"Merged Object\" into the system, updating the version id such that it becomes a descendent of both the installed and the incoming versions.",
	"function": "function (db, queryParams,_) {\n    var pcId = queryParams.id;\n    \n    if(!pcId) {\n        throw new Error('missing required parameters');\n    }\n    \n    var VersionId = db._svc.PackagingService.VersionId;\n    if(!VersionId) {\n        throw new Error('upgrade to noonain platform required');\n    }\n    \n    return db.PackageConflict.findOne({_id:pcId}).then(function(pc) {\n        if(!pc || !pc.installed_version_id || !pc.package_version_id || !pc.object_class || !db[pc.object_class] || !pc.object_id) {\n            throw new Error('invalid PackageConflict');\n        }\n        \n        //Create merged version id\n        var pkgVer = new VersionId(pc.package_version_id);\n        var localVer = new VersionId(pc.installed_version_id);\n        var mergedVer = VersionId.merge(pkgVer, localVer);\n        \n        return db[pc.object_class].findOne({_id:pc.object_id}).then(function(targetObj) {\n            var mergedObj = pc.merged_object;\n            delete mergedObj.__ver;\n            _.assign(targetObj, mergedObj);\n            return targetObj.save({useVersionId:mergedVer.toString(), skipTriggers:true}, null);\n        })\n        .then(function() {\n            return {message:'Success: merged version='+mergedVer.toString()};\n        })\n        ;\n    });\n}",
	"path": "/pkg/resolvePackageConflict",
	"rolespec": [
		"FnQ_eBYITOSC8kJA4Zul5g"
	]
},
{
	"__disp": "/dbui/getCustomPage",
	"__ver": "sys:1",
	"_class": "WebService",
	"_id": "jD8x-SVrQBmD38_K0rzFqA",
	"doc": "Retrieve custom page by key.",
	"function": "function (queryParams, db) {\n    var key = queryParams.key;\n    // var user = req.user;\n    \n    if(!key) {\n        throw new Error(\"Missing key parameter\");\n    }\n    \n    //TODO {rolespec:{$satsifiedBy:user.roles}}\n    return db.DbuiCustomPage.findOne({key:key});\n}",
	"path": "/dbui/getCustomPage",
	"rolespec": [
	]
},
{
	"__disp": "/pkg/toFilesystem",
	"__ver": "sys:1",
	"_class": "WebService",
	"_id": "lh4L_i9JQM2YIhtbmLtcUw",
	"doc": "Exports a BusinessObjectPackage attachement onto filesystem: noonian's 'data_pkg' directory.",
	"function": "function (queryParams, db) {\n    db._svc.PackagingService.packageToFs(queryParams.id);\n    return {message:'Package export initiated'};\n}",
	"path": "/pkg/toFilesystem",
	"rolespec": [
	]
},
{
	"__disp": "/dbui/getNavbarMenu",
	"__ver": "sys:10",
	"_class": "WebService",
	"_id": "oYBiiisfSu6pOQWFerHCHg",
	"function": "function (config, req, db, _) {\n    var configKey = 'sys.dbui.navbar_menu';\n    \n    var fullBoList = {};\n    \n    \n    var buildSubmenuContainer = function(categoryObj) {\n        \n        var submenuContainer = { label:categoryObj.title, submenu:[] };\n        \n        _.forEach(categoryObj.classes, function(boClass) {\n            submenuContainer.submenu.push({\n                action: {\n                    state: \"dbui.list\",\n                    params: { className:boClass, perspective:\"default\" }\n                },\n                label:boClass\n            });\n            delete fullBoList[boClass];\n        });\n        \n        return submenuContainer;\n    }\n    \n    return db.BusinessObjectDef.find({}).then(function(boList) {\n        _.forEach(boList, function(bo) {\n            fullBoList[bo.class_name] = bo._id;\n        });\n        \n        return config.getCustomizedParameter(configKey, req.user._id);\n    })\n    .then(function(categoryArr) {\n        //for now, menukey contains categorized list of BusinessObject names:\n        /*\n            [\n                { title:\"Angular Dev\", classes:[\"AngularModule\",\"AngularBlah\",...] },\n                { ... },\n                ...\n            ]\n        */\n        \n        var menuArr = [];\n        _.forEach(categoryArr, function(categoryObj) {\n            menuArr.push(buildSubmenuContainer(categoryObj));\n        });\n        \n        \n        //Divvy the ones not covered in sys.dbui.navbarmenu according to package.\n        if(Object.keys(fullBoList).length) {\n            return db.BusinessObjectPackage.find({}, {name:1, 'manifest.BusinessObjectDef':1}).sort({name:1}).then(function(bops) {\n                //map package to classes\n                var pkgToClasses = {};\n                \n                _.forEach(bops, function(bopObj) {\n                    if(bopObj.manifest && bopObj.manifest.BusinessObjectDef) {\n                        var pkgBos = bopObj.manifest.BusinessObjectDef;\n                        _.forEach(fullBoList, function(boId, boClass) {\n                            if(pkgBos[boId]) {\n                                pkgToClasses[bopObj.name] = pkgToClasses[bopObj.name] || [];\n                                pkgToClasses[bopObj.name].push(boClass);\n                                \n                            }\n                        })\n                    }\n                });\n                \n                _.forEach(pkgToClasses, function(classArr, pkgName) {\n                    classArr.sort();\n                    menuArr.push(buildSubmenuContainer({title:pkgName, classes:classArr}));\n                });\n                \n                var remaining = Object.keys(fullBoList);\n                if(remaining.length) {\n                    remaining.sort();\n                    menuArr.push(buildSubmenuContainer({title:\"(no package)\", classes:remaining}));\n                }\n                \n                return menuArr;\n            });\n        }\n        else {\n            return menuArr;\n        }\n    });\n    \n}",
	"path": "/dbui/getNavbarMenu",
	"rolespec": [
	]
},
{
	"__disp": "/dbui/getFieldTemplate",
	"__ver": "sys:3",
	"_class": "WebService",
	"_id": "rR1feiTrQP6WDbkV_3s3rg",
	"function": "function (queryParams, res, db, _) {\n    //Build response that maps type name to an 'info' object, providing what client-side needs in order to build a UI form for a specified business object.\n    \n    var fieldtypeName = queryParams.type;\n    var isArray = queryParams.array === 'true';\n    var viewEdit = queryParams.view_or_edit;\n    \n    console.log('getFieldTemplate for %s %s %s', viewEdit, fieldtypeName, (isArray ? '[ ]' : ''));\n    \n    if(!fieldtypeName) {\n        throw new Error('Invalid field type name: '+fieldtypeName);\n    }\n    \n    var applicKey = (viewEdit === 'view') ? 'for_viewing' : 'for_editing';\n    \n    if(isArray) {\n        applicKey += '_array';\n    }\n    \n    var queryObj = {\n        'fieldtypes.name':fieldtypeName\n    };\n    queryObj[applicKey] = true;\n    \n\n    \n    // console.log('queryObj %j', queryObj);\n    return db.FieldTypeUiSpec.find(queryObj).then(function(uiSpecs) {\n        \n        if(uiSpecs.length > 1) {\n            console.warn('Too many FieldTypeUiSpecs for %s %s %s', viewEdit, fieldtypeName, (isArray ? '[ ]' : ''))\n        }\n        if(uiSpecs.length === 0) {\n            //look 'universally-applicable' editors/viewers:    \n            delete queryObj['fieldtypes.name'];\n            queryObj.fieldtypes = {$empty:true};\n            \n            return db.FieldTypeUiSpec.find(queryObj).then(function(universalSpecs) {\n               if(!universalSpecs || !universalSpecs.length) {\n                   throw new Error('No FieldTypeUiSpecs found for '+viewEdit+' '+fieldtypeName+' '+isArray);\n               }\n               res.type('html');\n               return universalSpecs[0].template;\n            });\n        }\n        \n        res.type('html');\n        return uiSpecs[0].template;\n        \n    });\n    \n}",
	"path": "/dbui/getFieldTemplate",
	"rolespec": [
	]
},
{
	"__disp": "/dbui/getSysMetadata",
	"__ver": "sys:6",
	"_class": "WebService",
	"_id": "rVM06exeQXWZPYBFnq6n0g",
	"function": "function (db, auth, req, Q, _) {\n    \n    \n    return auth.getCurrentUser(req).then(function(currUser) {\n        var ENGLISH_ID='-9vPfv2lEeSFtiimx_V4dw';\n        var language = (currUser.language && currUser.language._id) || ENGLISH_ID;\n        \n        return Q.all([\n            db.BusinessObjectDef.find({}).lean().exec(),\n            db.MemberFunction.find({applies_to:{$in:['client', 'both']}}).lean().exec(),\n            db.LabelGroup.find({key:/^sys\\.dbui\\.bo\\..+/, language:language}).lean().exec()\n        ]);\n    })\n    .then(function(resultArr) {\n        var allBods = resultArr[0];\n        var memberFns = resultArr[1];\n        var labelGroups = resultArr[2];\n        \n        var bodMap = _.indexBy(allBods, '_id');\n        _.forEach(memberFns, function(memFn) {\n            if(memFn.business_object && memFn.business_object._id) {\n                var bod = bodMap[memFn.business_object._id];\n                bod._member_functions = bod._member_functions || [];\n                bod._member_functions.push(memFn);\n                delete memFn.business_object;\n                delete memFn.applies_to;\n            }\n        });\n        bodMap = _.indexBy(allBods, 'class_name');\n        _.forEach(labelGroups, function(lg) {\n            var className = lg.key.split('.').pop();\n            if(bodMap[className]) {\n                bodMap[className]._field_labels =  lg.value;\n            }\n        });\n        \n        return {result:allBods};\n    });\n}",
	"path": "/dbui/getSysMetadata",
	"rolespec": [
	]
},
{
	"__disp": "/dbui/getReportSpec",
	"__ver": "sys:1",
	"_class": "WebService",
	"_id": "v7m93WESQVyYqXfZE9XN4Q",
	"function": "function (queryParams, db, auth, req, i18n, Q) {\n    var reportId = queryParams.id;\n    \n    if(!reportId) {\n        throw new Error('missing required parameters');\n    }\n    \n    var result = {};\n    \n    return Q.all([\n        auth.getCurrentUser(req),\n        db.DbuiReport.findOne({_id:reportId}).lean().exec()\n    ])\n    .then(function(resultArr) {\n        var currUser = resultArr[0];\n        result.reportSpec = resultArr[1];\n        \n        return i18n.getLabelGroup('dbui.report.'+result.reportSpec.name, currUser);\n    })\n    .then(function(labels) {\n        result.labels = labels;\n        return result;\n    });\n}",
	"path": "/dbui/getReportSpec",
	"rolespec": [
	]
},
{
	"__disp": "/dbui/angularAppToFilesystem",
	"__ver": "sys:2",
	"_class": "WebService",
	"_id": "w-lHVPreRRSku89vhlyagA",
	"function": "function (queryParams) {\n    var appId = queryParams.appId;\n    \n    return {\n        warning:\"TO IMPLEMENT! \"+appId\n    };\n}",
	"path": "/dbui/angularAppToFilesystem",
	"rolespec": [
	]
}]}
